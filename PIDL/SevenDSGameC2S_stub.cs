




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Collections.Generic;
using System.Net;	     

namespace SevenDSGameC2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool CG_RequestChannelUserInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string netamrblePlayerID, SimpleCSharp.NetmarbleSDKInfo sdkInfo);  
		public CG_RequestChannelUserInfoDelegate CG_RequestChannelUserInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string netamrblePlayerID, SimpleCSharp.NetmarbleSDKInfo sdkInfo)
		{ 
			return false;
		};
		public delegate bool CG_RequestHeartBeatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestHeartBeatDelegate CG_RequestHeartBeat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestChangeNicknameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string nickname);  
		public CG_RequestChangeNicknameDelegate CG_RequestChangeNickname = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string nickname)
		{ 
			return false;
		};
		public delegate bool CG_RequestChangeWantToSayDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestChangeWantToSayDelegate CG_RequestChangeWantToSay = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTeamInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTeamInfoDelegate CG_RequestTeamInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTeamSlotChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, byte teamIndex, List<SimpleCSharp.UserTeamSlot> mainSlotList, int battlePowerPoint, int buffID);  
		public CG_RequestTeamSlotChangeDelegate CG_RequestTeamSlotChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, byte teamIndex, List<SimpleCSharp.UserTeamSlot> mainSlotList, int battlePowerPoint, int buffID)
		{ 
			return false;
		};
		public delegate bool CG_RequestTeamNameChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTeamNameChangeDelegate CG_RequestTeamNameChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyInfoDelegate CG_RequestLobbyInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int basePointID);  
		public CG_RequestBasePointInfoDelegate CG_RequestBasePointInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int basePointID)
		{ 
			return false;
		};
		public delegate bool CG_RequestMercenaryListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMercenaryListDelegate CG_RequestMercenaryList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMercenaryInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMercenaryInfoDelegate CG_RequestMercenaryInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildInfoDelegate CG_RequestGuildInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestChatStampUpdateBookmarkDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestChatStampUpdateBookmarkDelegate CG_RequestChatStampUpdateBookmark = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestChatStampUpdateQuickMessageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestChatStampUpdateQuickMessageDelegate CG_RequestChatStampUpdateQuickMessage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMainSkinChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMainSkinChangeDelegate CG_RequestMainSkinChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventListDelegate CG_RequestEventList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCheatEnterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCheatEnterDelegate CG_RequestCheatEnter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCheatStageClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCheatStageClearDelegate CG_RequestCheatStageClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDllGetItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDllGetItemDelegate CG_RequestDllGetItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRecommendFriendUSNListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRecommendFriendUSNListDelegate CG_RequestRecommendFriendUSNList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDailyResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDailyResetDelegate CG_RequestDailyReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFrozenAssetRedeemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFrozenAssetRedeemDelegate CG_RequestFrozenAssetRedeem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSecurityTokenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSecurityTokenDelegate CG_RequestSecurityToken = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestNetmarbleAuthDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string netmarblePlayerID, string gametoken, string securityCertValue, int versionNumber, SimpleCSharp.ClientDeviceType deviceType, int signType, SimpleCSharp.NetmarbleSDKInfo sdkInfo);  
		public CG_RequestNetmarbleAuthDelegate CG_RequestNetmarbleAuth = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string netmarblePlayerID, string gametoken, string securityCertValue, int versionNumber, SimpleCSharp.ClientDeviceType deviceType, int signType, SimpleCSharp.NetmarbleSDKInfo sdkInfo)
		{ 
			return false;
		};
		public delegate bool CG_RequestAuthenticateCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string netmarblePlayerID, SimpleCSharp.NetmarbleSDKInfo sdkInfo);  
		public CG_RequestAuthenticateCreateDelegate CG_RequestAuthenticateCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string netmarblePlayerID, SimpleCSharp.NetmarbleSDKInfo sdkInfo)
		{ 
			return false;
		};
		public delegate bool CG_RequestEditorUserInfoByNickNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEditorUserInfoByNickNameDelegate CG_RequestEditorUserInfoByNickName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLoginDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, long usn, SimpleCSharp.NetmarbleSDKInfo sdkInfo, SimpleCSharp.VersionInfo versionInfo, string rejoinData, long clientTimeTick, string patchName, string patchData, SimpleCSharp.LanguageType languageType);  
		public CG_RequestLoginDelegate CG_RequestLogin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, long usn, SimpleCSharp.NetmarbleSDKInfo sdkInfo, SimpleCSharp.VersionInfo versionInfo, string rejoinData, long clientTimeTick, string patchName, string patchData, SimpleCSharp.LanguageType languageType)
		{ 
			return false;
		};
		public delegate bool CG_RequestLoginInstantlyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLoginInstantlyDelegate CG_RequestLoginInstantly = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RetryRequestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RetryRequestDelegate CG_RetryRequest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBillingInitializeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBillingInitializeDelegate CG_RequestBillingInitialize = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBillingVerifyPUDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBillingVerifyPUDelegate CG_RequestBillingVerifyPU = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBillingRemainTRDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBillingRemainTRDelegate CG_RequestBillingRemainTR = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBillingCouponVerifyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.BillingVerifyType verifyType);  
		public CG_RequestBillingCouponVerifyDelegate CG_RequestBillingCouponVerify = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.BillingVerifyType verifyType)
		{ 
			return false;
		};
		public delegate bool CG_RequestBillingCrossPromotionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBillingCrossPromotionDelegate CG_RequestBillingCrossPromotion = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBillingPackageShopDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBillingPackageShopDelegate CG_RequestBillingPackageShop = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestAgeInputDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestAgeInputDelegate CG_RequestAgeInput = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSDKInfoChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSDKInfoChangeDelegate CG_RequestSDKInfoChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinLevelUpBySkinMaterialDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinLevelUpBySkinMaterialDelegate CG_RequestSkinLevelUpBySkinMaterial = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinResearchDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinResearchDelegate CG_RequestSkinResearch = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinResearchInitDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinResearchInitDelegate CG_RequestSkinResearchInit = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinMaterialGrindDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinMaterialGrindDelegate CG_RequestSkinMaterialGrind = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinAwakenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinAwakenDelegate CG_RequestSkinAwaken = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinHeadStyleChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinHeadStyleChangeDelegate CG_RequestSkinHeadStyleChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinEvolutionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinEvolutionDelegate CG_RequestSkinEvolution = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinSkillLevelUpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinSkillLevelUpDelegate CG_RequestSkinSkillLevelUp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinGiveFellowshipExpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinGiveFellowshipExpDelegate CG_RequestSkinGiveFellowshipExp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinFellowshipLevelUpRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinFellowshipLevelUpRewardDelegate CG_RequestSkinFellowshipLevelUpReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCostumeEquipDelegate CG_RequestCostumeEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeUnEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCostumeUnEquipDelegate CG_RequestCostumeUnEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeUnLockDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, List<int> targetHeroIDList, List<int> costumeGroupIDList, List<int> targetHeroGroupIDList);  
		public CG_RequestCostumeUnLockDelegate CG_RequestCostumeUnLock = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, List<int> targetHeroIDList, List<int> costumeGroupIDList, List<int> targetHeroGroupIDList)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinOverEvolutionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinOverEvolutionDelegate CG_RequestSkinOverEvolution = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinMaxAwakenRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinMaxAwakenRewardDelegate CG_RequestSkinMaxAwakenReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeRegisterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCostumeRegisterDelegate CG_RequestCostumeRegister = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinLoveRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinLoveRewardDelegate CG_RequestSkinLoveReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeAutoRegisterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.CostumeAutoRegisterInfo> registerInfoList);  
		public CG_RequestCostumeAutoRegisterDelegate CG_RequestCostumeAutoRegister = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.CostumeAutoRegisterInfo> registerInfoList)
		{ 
			return false;
		};
		public delegate bool CG_RequestStoryCostumeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, List<int> idList);  
		public CG_RequestStoryCostumeDelegate CG_RequestStoryCostume = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, List<int> idList)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeLevelUpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCostumeLevelUpDelegate CG_RequestCostumeLevelUp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestSkinMaxAwakenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestSkinMaxAwakenDelegate CG_RequestSkinMaxAwaken = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponEquipDelegate CG_RequestWeaponEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponUnEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponUnEquipDelegate CG_RequestWeaponUnEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponSellDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponSellDelegate CG_RequestWeaponSell = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponGrindDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponGrindDelegate CG_RequestWeaponGrind = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponUpgradeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponUpgradeDelegate CG_RequestWeaponUpgrade = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponUpgradeRetryDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponUpgradeRetryDelegate CG_RequestWeaponUpgradeRetry = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponEvolutionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponEvolutionDelegate CG_RequestWeaponEvolution = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponEvolutionRetryDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponEvolutionRetryDelegate CG_RequestWeaponEvolutionRetry = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponOptionEnhanceDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponOptionEnhanceDelegate CG_RequestWeaponOptionEnhance = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponLockDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponLockDelegate CG_RequestWeaponLock = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponUnLockDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponUnLockDelegate CG_RequestWeaponUnLock = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponEquipExchangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponEquipExchangeDelegate CG_RequestWeaponEquipExchange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponEquipExchangeAllDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponEquipExchangeAllDelegate CG_RequestWeaponEquipExchangeAll = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponEquipRecommandDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponEquipRecommandDelegate CG_RequestWeaponEquipRecommand = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponCarveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponCarveDelegate CG_RequestWeaponCarve = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponCarveRemoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponCarveRemoveDelegate CG_RequestWeaponCarveRemove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestStageInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestStageInfoDelegate CG_RequestStageInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestStageRejoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestStageRejoinDelegate CG_RequestStageRejoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Week_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Week_Stage_StartDelegate CG_Request_Week_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Week_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Week_Stage_ClearDelegate CG_Request_Week_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Week_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Week_Stage_ContinueDelegate CG_Request_Week_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.StageStartRequestInfo stageStartRequestInfo);  
		public CG_Request_Main_Stage_StartDelegate CG_Request_Main_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.StageStartRequestInfo stageStartRequestInfo)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.StageClearRequestInfo stageClearRequestInfo);  
		public CG_Request_Main_Stage_ClearDelegate CG_Request_Main_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.StageClearRequestInfo stageClearRequestInfo)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_Stage_ContinueDelegate CG_Request_Main_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_Stage_StartDelegate CG_Request_Free_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_Stage_ClearDelegate CG_Request_Free_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_Stage_ContinueDelegate CG_Request_Free_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestHawkRunStageStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestHawkRunStageStartDelegate CG_RequestHawkRunStageStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestHawkRunStageClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestHawkRunStageClearDelegate CG_RequestHawkRunStageClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventStageClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventStageClearDelegate CG_RequestEventStageClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Quest_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Quest_Stage_StartDelegate CG_Request_Quest_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Quest_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Quest_Stage_ClearDelegate CG_Request_Quest_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Quest_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Quest_Stage_ContinueDelegate CG_Request_Quest_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_Stage_StartDelegate CG_Request_Boss_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_Stage_ClearDelegate CG_Request_Boss_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_Stage_ContinueDelegate CG_Request_Boss_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Memorial_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Memorial_Stage_StartDelegate CG_Request_Memorial_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Memorial_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Memorial_Stage_ClearDelegate CG_Request_Memorial_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Memorial_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Memorial_Stage_ContinueDelegate CG_Request_Memorial_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Limited_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Limited_Stage_StartDelegate CG_Request_Limited_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Limited_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Limited_Stage_ClearDelegate CG_Request_Limited_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Limited_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Limited_Stage_ContinueDelegate CG_Request_Limited_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_ExtraStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_ExtraStage_StartDelegate CG_Request_Main_ExtraStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_ExtraStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_ExtraStage_ClearDelegate CG_Request_Main_ExtraStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_ExtraStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_ExtraStage_ContinueDelegate CG_Request_Main_ExtraStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_ExtraStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_ExtraStage_StartDelegate CG_Request_Boss_ExtraStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_ExtraStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_ExtraStage_ClearDelegate CG_Request_Boss_ExtraStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_ExtraStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_ExtraStage_ContinueDelegate CG_Request_Boss_ExtraStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRewardStageClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRewardStageClearDelegate CG_RequestRewardStageClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_SingleSiege_ExtraStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_SingleSiege_ExtraStage_StartDelegate CG_Request_SingleSiege_ExtraStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_SingleSiege_ExtraStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_SingleSiege_ExtraStage_ClearDelegate CG_Request_SingleSiege_ExtraStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_SingleSiege_ExtraStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_SingleSiege_ExtraStage_ContinueDelegate CG_Request_SingleSiege_ExtraStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_FinalBoss_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_FinalBoss_Stage_StartDelegate CG_Request_FinalBoss_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_FinalBoss_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_FinalBoss_Stage_ClearDelegate CG_Request_FinalBoss_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_FinalBoss_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_FinalBoss_Stage_ContinueDelegate CG_Request_FinalBoss_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_FinalBoss_Season_InfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_FinalBoss_Season_InfoDelegate CG_Request_FinalBoss_Season_Info = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Training_Stage_InfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Training_Stage_InfoDelegate CG_Request_Training_Stage_Info = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Training_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Training_Stage_StartDelegate CG_Request_Training_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Training_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Training_Stage_ClearDelegate CG_Request_Training_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Training_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Training_Stage_ContinueDelegate CG_Request_Training_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Training_Stage_OpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Training_Stage_OpenDelegate CG_Request_Training_Stage_Open = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Training_Stage_RefreshDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Training_Stage_RefreshDelegate CG_Request_Training_Stage_Refresh = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildBoss_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildBoss_Stage_StartDelegate CG_Request_GuildBoss_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildBoss_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildBoss_Stage_ClearDelegate CG_Request_GuildBoss_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildBoss_Lobby_InfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildBoss_Lobby_InfoDelegate CG_Request_GuildBoss_Lobby_Info = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildBoss_Rank_InfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildBoss_Rank_InfoDelegate CG_Request_GuildBoss_Rank_Info = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildBoss_LastWeek_Rank_InfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildBoss_LastWeek_Rank_InfoDelegate CG_Request_GuildBoss_LastWeek_Rank_Info = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildBoss_Time_RefreshDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildBoss_Time_RefreshDelegate CG_Request_GuildBoss_Time_Refresh = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_AnotherMain_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_AnotherMain_Stage_StartDelegate CG_Request_AnotherMain_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_AnotherMain_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_AnotherMain_Stage_ClearDelegate CG_Request_AnotherMain_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_AnotherMain_Stage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_AnotherMain_Stage_ContinueDelegate CG_Request_AnotherMain_Stage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_FinalBoss_Season_Rank_InfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_FinalBoss_Season_Rank_InfoDelegate CG_Request_FinalBoss_Season_Rank_Info = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Reverse_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Reverse_Stage_StartDelegate CG_Request_Reverse_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Reverse_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Reverse_Stage_ClearDelegate CG_Request_Reverse_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Reverse_Star_RewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Reverse_Star_RewardDelegate CG_Request_Reverse_Star_Reward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Reverse_Group_RewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Reverse_Group_RewardDelegate CG_Request_Reverse_Group_Reward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_EventAreaStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_EventAreaStage_StartDelegate CG_Request_Main_EventAreaStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_EventAreaStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_EventAreaStage_ClearDelegate CG_Request_Main_EventAreaStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_EventAreaStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_EventAreaStage_ContinueDelegate CG_Request_Main_EventAreaStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_EventAreaStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_EventAreaStage_StartDelegate CG_Request_Free_EventAreaStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_EventAreaStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_EventAreaStage_ClearDelegate CG_Request_Free_EventAreaStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_EventAreaStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_EventAreaStage_ContinueDelegate CG_Request_Free_EventAreaStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventAreaRewardStageClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventAreaRewardStageClearDelegate CG_RequestEventAreaRewardStageClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_EventStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_EventStage_StartDelegate CG_Request_Free_EventStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_EventStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_EventStage_ClearDelegate CG_Request_Free_EventStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_EventStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_EventStage_ContinueDelegate CG_Request_Free_EventStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventExchangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventExchangeDelegate CG_RequestEventExchange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventPlayCountRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventPlayCountRewardDelegate CG_RequestEventPlayCountReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_ListEventStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_ListEventStage_StartDelegate CG_Request_Main_ListEventStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_ListEventStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_ListEventStage_ClearDelegate CG_Request_Main_ListEventStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_ListEventStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_ListEventStage_ContinueDelegate CG_Request_Main_ListEventStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_ListEventStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_ListEventStage_StartDelegate CG_Request_Free_ListEventStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_ListEventStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_ListEventStage_ClearDelegate CG_Request_Free_ListEventStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Free_ListEventStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Free_ListEventStage_ContinueDelegate CG_Request_Free_ListEventStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_FinalBossStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_FinalBossStage_StartDelegate CG_Request_Main_FinalBossStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_FinalBossStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_FinalBossStage_ClearDelegate CG_Request_Main_FinalBossStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Main_FinalBossStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Main_FinalBossStage_ContinueDelegate CG_Request_Main_FinalBossStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_FinalBoss_EventFreeStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_FinalBoss_EventFreeStage_StartDelegate CG_Request_FinalBoss_EventFreeStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_FinalBoss_EventFreeStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_FinalBoss_EventFreeStage_ClearDelegate CG_Request_FinalBoss_EventFreeStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_FinalBoss_EventFreeStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_FinalBoss_EventFreeStage_ContinueDelegate CG_Request_FinalBoss_EventFreeStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Limited_EventStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Limited_EventStage_StartDelegate CG_Request_Limited_EventStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Limited_EventStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Limited_EventStage_ClearDelegate CG_Request_Limited_EventStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Limited_EventStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Limited_EventStage_ContinueDelegate CG_Request_Limited_EventStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_EventStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_EventStage_StartDelegate CG_Request_Boss_EventStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_EventStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_EventStage_ClearDelegate CG_Request_Boss_EventStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Boss_EventStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Boss_EventStage_ContinueDelegate CG_Request_Boss_EventStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Monthly_EventStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Monthly_EventStage_StartDelegate CG_Request_Monthly_EventStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Monthly_EventStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Monthly_EventStage_ClearDelegate CG_Request_Monthly_EventStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_Monthly_EventStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_Monthly_EventStage_ContinueDelegate CG_Request_Monthly_EventStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMonthlyStagePointRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMonthlyStagePointRewardDelegate CG_RequestMonthlyStagePointReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeekStageGaugeRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeekStageGaugeRewardDelegate CG_RequestWeekStageGaugeReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestIngameBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestIngameBattleStartDelegate CG_RequestIngameBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestStageEndLogDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestStageEndLogDelegate CG_RequestStageEndLog = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_ChallengeBoss_EventStage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_ChallengeBoss_EventStage_StartDelegate CG_Request_ChallengeBoss_EventStage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_ChallengeBoss_EventStage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_ChallengeBoss_EventStage_ClearDelegate CG_Request_ChallengeBoss_EventStage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_ChallengeBoss_EventStage_ContinueDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_ChallengeBoss_EventStage_ContinueDelegate CG_Request_ChallengeBoss_EventStage_Continue = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_ChallengeBoss_EventStage_InfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_ChallengeBoss_EventStage_InfoDelegate CG_Request_ChallengeBoss_EventStage_Info = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_ChallengeBoss_Event_Point_RewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_ChallengeBoss_Event_Point_RewardDelegate CG_Request_ChallengeBoss_Event_Point_Reward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMailListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.LanguageType languageType);  
		public CG_RequestMailListDelegate CG_RequestMailList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.LanguageType languageType)
		{ 
			return false;
		};
		public delegate bool CG_RequestMailConfirmDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMailConfirmDelegate CG_RequestMailConfirm = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMailConfirmAllDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMailConfirmAllDelegate CG_RequestMailConfirmAll = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMailHistoryListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMailHistoryListDelegate CG_RequestMailHistoryList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMailRecentlyHistoryListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMailRecentlyHistoryListDelegate CG_RequestMailRecentlyHistoryList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendMailListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendMailListDelegate CG_RequestFriendMailList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendMailConfirmDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendMailConfirmDelegate CG_RequestFriendMailConfirm = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendMailConfirmAllDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendMailConfirmAllDelegate CG_RequestFriendMailConfirmAll = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestNoticeMailRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int noticeMailSEQ);  
		public CG_RequestNoticeMailRewardDelegate CG_RequestNoticeMailReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int noticeMailSEQ)
		{ 
			return false;
		};
		public delegate bool CG_RequestPackageMailListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPackageMailListDelegate CG_RequestPackageMailList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestPackageMailGetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPackageMailGetDelegate CG_RequestPackageMailGet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestPackageMailHistoryListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPackageMailHistoryListDelegate CG_RequestPackageMailHistoryList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLevelUpPackageRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLevelUpPackageRewardDelegate CG_RequestLevelUpPackageReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLevelUpPackageRewardAllDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLevelUpPackageRewardAllDelegate CG_RequestLevelUpPackageRewardAll = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestAttendancePackageRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestAttendancePackageRewardDelegate CG_RequestAttendancePackageReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestAttendancePackageRewardAllDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestAttendancePackageRewardAllDelegate CG_RequestAttendancePackageRewardAll = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMailADRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMailADRewardDelegate CG_RequestMailADReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGambleShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGambleShopBuyDelegate CG_RequestGambleShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestStepupGambleShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestStepupGambleShopBuyDelegate CG_RequestStepupGambleShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestStepupGambleMileageRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestStepupGambleMileageRewardDelegate CG_RequestStepupGambleMileageReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemGambleShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemGambleShopInfoDelegate CG_RequestItemGambleShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemGambleShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemGambleShopBuyDelegate CG_RequestItemGambleShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRandomShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRandomShopBuyDelegate CG_RequestRandomShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRandomShopRefreshDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRandomShopRefreshDelegate CG_RequestRandomShopRefresh = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRandomShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRandomShopInfoDelegate CG_RequestRandomShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointShopInfoDelegate CG_RequestBasePointShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointShopBuyDelegate CG_RequestBasePointShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointShopResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointShopResetDelegate CG_RequestBasePointShopReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpShopInfoDelegate CG_RequestArenaRealTimePvpShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpShopBuyDelegate CG_RequestArenaRealTimePvpShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpShopResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpShopResetDelegate CG_RequestArenaRealTimePvpShopReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCoinShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCoinShopInfoDelegate CG_RequestCoinShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCoinShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCoinShopBuyDelegate CG_RequestCoinShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCoinShopDailyBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCoinShopDailyBuyDelegate CG_RequestCoinShopDailyBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCoinShopOnceBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCoinShopOnceBuyDelegate CG_RequestCoinShopOnceBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCostumeShopInfoDelegate CG_RequestCostumeShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCostumeShopBuyDelegate CG_RequestCostumeShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCostumeShopPackageBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCostumeShopPackageBuyDelegate CG_RequestCostumeShopPackageBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendPointShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendPointShopInfoDelegate CG_RequestFriendPointShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendPointShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendPointShopBuyDelegate CG_RequestFriendPointShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDiaShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDiaShopInfoDelegate CG_RequestDiaShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDiaShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDiaShopBuyDelegate CG_RequestDiaShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemInventoryBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemInventoryBuyDelegate CG_RequestItemInventoryBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeaponInventoryBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeaponInventoryBuyDelegate CG_RequestWeaponInventoryBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeekStageKeyBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeekStageKeyBuyDelegate CG_RequestWeekStageKeyBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCommonItemSellDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCommonItemSellDelegate CG_RequestCommonItemSell = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCommonItemRemoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCommonItemRemoveDelegate CG_RequestCommonItemRemove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestPackageBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPackageBuyDelegate CG_RequestPackageBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBuyDiaDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBuyDiaDelegate CG_RequestBuyDia = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBuyGoldDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBuyGoldDelegate CG_RequestBuyGold = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBuyStaminaDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBuyStaminaDelegate CG_RequestBuyStamina = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildShopInfoDelegate CG_RequestGuildShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildShopBuyDelegate CG_RequestGuildShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildShopResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildShopResetDelegate CG_RequestGuildShopReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFinalBossShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFinalBossShopInfoDelegate CG_RequestFinalBossShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFinalBossShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFinalBossShopBuyDelegate CG_RequestFinalBossShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventCollaborationCoinShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventCollaborationCoinShopInfoDelegate CG_RequestEventCollaborationCoinShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventCollaborationCoinShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventCollaborationCoinShopBuyDelegate CG_RequestEventCollaborationCoinShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBingoGambleShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBingoGambleShopInfoDelegate CG_RequestBingoGambleShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBingoGambleShopResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBingoGambleShopResetDelegate CG_RequestBingoGambleShopReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBingoGambleShopRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBingoGambleShopRewardDelegate CG_RequestBingoGambleShopReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDiaShopPackageBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDiaShopPackageBuyDelegate CG_RequestDiaShopPackageBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRandomShopVisitRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRandomShopVisitRewardDelegate CG_RequestRandomShopVisitReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGambleChoiceShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGambleChoiceShopBuyDelegate CG_RequestGambleChoiceShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRandomShopScheduleInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRandomShopScheduleInfoDelegate CG_RequestRandomShopScheduleInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestPackageShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPackageShopInfoDelegate CG_RequestPackageShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFreePackageRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFreePackageRewardDelegate CG_RequestFreePackageReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestPackageMissionCloseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPackageMissionCloseDelegate CG_RequestPackageMissionClose = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGambleShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGambleShopInfoDelegate CG_RequestGambleShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestADRouletteRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestADRouletteRewardDelegate CG_RequestADRouletteReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestQuestStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questID);  
		public CG_RequestQuestStartDelegate CG_RequestQuestStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questID)
		{ 
			return false;
		};
		public delegate bool CG_RequestQuestProgressDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questID, byte propIndex);  
		public CG_RequestQuestProgressDelegate CG_RequestQuestProgress = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questID, byte propIndex)
		{ 
			return false;
		};
		public delegate bool CG_RequestQuestClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questID);  
		public CG_RequestQuestClearDelegate CG_RequestQuestClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questID)
		{ 
			return false;
		};
		public delegate bool CG_RequestQuestRemoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestQuestRemoveDelegate CG_RequestQuestRemove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestNetmarbleQuestAchieveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestNetmarbleQuestAchieveDelegate CG_RequestNetmarbleQuestAchieve = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestNetmarbleQuestRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestNetmarbleQuestRewardDelegate CG_RequestNetmarbleQuestReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDirectSelectorRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDirectSelectorRewardDelegate CG_RequestDirectSelectorReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMissionProgressDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.MissionType missionType, int missionTypeValue, int addValue);  
		public CG_RequestMissionProgressDelegate CG_RequestMissionProgress = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.MissionType missionType, int missionTypeValue, int addValue)
		{ 
			return false;
		};
		public delegate bool CG_RequestMissionClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMissionClearDelegate CG_RequestMissionClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMissionEventClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMissionEventClearDelegate CG_RequestMissionEventClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestMissionGetAchievePointRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestMissionGetAchievePointRewardDelegate CG_RequestMissionGetAchievePointReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestQuestChapterClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestQuestChapterClearDelegate CG_RequestQuestChapterClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventMissionGetAchievePointRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventMissionGetAchievePointRewardDelegate CG_RequestEventMissionGetAchievePointReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventMissionCompleteRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventMissionCompleteRewardDelegate CG_RequestEventMissionCompleteReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventMissionInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventMissionInfoDelegate CG_RequestEventMissionInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventQuestClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventQuestClearDelegate CG_RequestEventQuestClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestAnotherQuestClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestAnotherQuestClearDelegate CG_RequestAnotherQuestClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestQuestGuideListAllClearRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestQuestGuideListAllClearRewardDelegate CG_RequestQuestGuideListAllClearReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyVRSearchDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyVRSearchDelegate CG_RequestLobbyVRSearch = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyVRHelbramDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyVRHelbramDelegate CG_RequestLobbyVRHelbram = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyNpcSkinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int npcID, int storyCostumeID);  
		public CG_RequestLobbyNpcSkinDelegate CG_RequestLobbyNpcSkin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int npcID, int storyCostumeID)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyNpcGiftDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyNpcGiftDelegate CG_RequestLobbyNpcGift = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyKingAmberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyKingAmberDelegate CG_RequestLobbyKingAmber = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyDropInteractiveOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyDropInteractiveOpenDelegate CG_RequestLobbyDropInteractiveOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyUniqueInteractiveOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyUniqueInteractiveOpenDelegate CG_RequestLobbyUniqueInteractiveOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyNpcTalkInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyNpcTalkInfoDelegate CG_RequestLobbyNpcTalkInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyNpcTalkChoiceDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyNpcTalkChoiceDelegate CG_RequestLobbyNpcTalkChoice = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyBarrelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyBarrelDelegate CG_RequestLobbyBarrel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyBarrelRefillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyBarrelRefillDelegate CG_RequestLobbyBarrelRefill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyCleanTableDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyCleanTableDelegate CG_RequestLobbyCleanTable = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyServeBeerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyServeBeerDelegate CG_RequestLobbyServeBeer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyPlayJukeboxDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyPlayJukeboxDelegate CG_RequestLobbyPlayJukebox = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyElizabethTouchDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyElizabethTouchDelegate CG_RequestLobbyElizabethTouch = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyHawkAngerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyHawkAngerDelegate CG_RequestLobbyHawkAnger = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestAttendanceRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.ClientDeviceType deviceType);  
		public CG_RequestAttendanceRewardDelegate CG_RequestAttendanceReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.ClientDeviceType deviceType)
		{ 
			return false;
		};
		public delegate bool CG_RequestAttendanceEventRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestAttendanceEventRewardDelegate CG_RequestAttendanceEventReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCookingStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCookingStartDelegate CG_RequestCookingStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRecipeActiveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRecipeActiveDelegate CG_RequestRecipeActive = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCookingRecipeOrderInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCookingRecipeOrderInfoDelegate CG_RequestCookingRecipeOrderInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCookingRecipeOrderDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCookingRecipeOrderDelegate CG_RequestCookingRecipeOrder = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCookingRecipeDisorderDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCookingRecipeDisorderDelegate CG_RequestCookingRecipeDisorder = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCookingRecipeCollectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCookingRecipeCollectDelegate CG_RequestCookingRecipeCollect = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCookingRecipeCollectOneSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCookingRecipeCollectOneSlotDelegate CG_RequestCookingRecipeCollectOneSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestCookingUseCookingBuffDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestCookingUseCookingBuffDelegate CG_RequestCookingUseCookingBuff = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuestInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuestInfoDelegate CG_RequestGuestInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuestChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuestChangeDelegate CG_RequestGuestChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuestChangeTargetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuestChangeTargetDelegate CG_RequestGuestChangeTarget = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuestTalkDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuestTalkDelegate CG_RequestGuestTalk = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuestGiftDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuestGiftDelegate CG_RequestGuestGift = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBirthdayNpcInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBirthdayNpcInfoDelegate CG_RequestBirthdayNpcInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRestRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRestRewardDelegate CG_RequestRestReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyHousingShopInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyHousingShopInfoDelegate CG_RequestLobbyHousingShopInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyHousingShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyHousingShopBuyDelegate CG_RequestLobbyHousingShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestLobbyFurnitureRegistDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestLobbyFurnitureRegistDelegate CG_RequestLobbyFurnitureRegist = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestUserMusicEditDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestUserMusicEditDelegate CG_RequestUserMusicEdit = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestAttendanceFortuneEventRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestAttendanceFortuneEventRewardDelegate CG_RequestAttendanceFortuneEventReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointGoldDonationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointGoldDonationDelegate CG_RequestBasePointGoldDonation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointSetTriggerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointSetTriggerDelegate CG_RequestBasePointSetTrigger = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointDropInteractiveOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointDropInteractiveOpenDelegate CG_RequestBasePointDropInteractiveOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointUniqueInteractiveOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointUniqueInteractiveOpenDelegate CG_RequestBasePointUniqueInteractiveOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointDailyRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointDailyRewardDelegate CG_RequestBasePointDailyReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointDonationEventRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointDonationEventRewardDelegate CG_RequestBasePointDonationEventReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointDonationInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointDonationInfoDelegate CG_RequestBasePointDonationInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBasePointEventGoldDonationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBasePointEventGoldDonationDelegate CG_RequestBasePointEventGoldDonation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventBasepointInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventBasepointInfoDelegate CG_RequestEventBasepointInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroySetInviteOptionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroySetInviteOptionDelegate CG_RequestDestroySetInviteOption = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyGetUserLoginListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyGetUserLoginListDelegate CG_RequestDestroyGetUserLoginList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyGetFriendLoginListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyGetFriendLoginListDelegate CG_RequestDestroyGetFriendLoginList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyGetGuildLoginListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyGetGuildLoginListDelegate CG_RequestDestroyGetGuildLoginList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyGetReceivedInvitationListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyGetReceivedInvitationListDelegate CG_RequestDestroyGetReceivedInvitationList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyInviteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyInviteDelegate CG_RequestDestroyInvite = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyRemoveInvitationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyRemoveInvitationDelegate CG_RequestDestroyRemoveInvitation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyRemoveJoinInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyRemoveJoinInfoDelegate CG_RequestDestroyRemoveJoinInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyCreateDelegate CG_RequestDestroyCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyJoinDelegate CG_RequestDestroyJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyStartDelegate CG_RequestDestroyStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyBattleStartDelegate CG_RequestDestroyBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyClearDelegate CG_RequestDestroyClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyReJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyReJoinDelegate CG_RequestDestroyReJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyRemoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyRemoveDelegate CG_RequestDestroyRemove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyBattleEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyBattleEndDelegate CG_RequestDestroyBattleEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyInviteAIDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyInviteAIDelegate CG_RequestDestroyInviteAI = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestDestroyKickOutAIDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestDestroyKickOutAIDelegate CG_RequestDestroyKickOutAI = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventDestroyCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventDestroyCreateDelegate CG_RequestEventDestroyCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventDestroyStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventDestroyStartDelegate CG_RequestEventDestroyStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventDestroyClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventDestroyClearDelegate CG_RequestEventDestroyClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventDestroyRemoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventDestroyRemoveDelegate CG_RequestEventDestroyRemove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventChallengeDestroyCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventChallengeDestroyCreateDelegate CG_RequestEventChallengeDestroyCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventChallengeDestroyStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventChallengeDestroyStartDelegate CG_RequestEventChallengeDestroyStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventChallengeDestroyClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventChallengeDestroyClearDelegate CG_RequestEventChallengeDestroyClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventChallengeDestroyPointRefreshDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventChallengeDestroyPointRefreshDelegate CG_RequestEventChallengeDestroyPointRefresh = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventChallengeDestroyUserRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventChallengeDestroyUserRewardDelegate CG_RequestEventChallengeDestroyUserReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventChallengeDestroyWorldRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventChallengeDestroyWorldRewardDelegate CG_RequestEventChallengeDestroyWorldReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendListDelegate CG_RequestFriendList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendGuildInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendGuildInfoDelegate CG_RequestFriendGuildInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendApplySendListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendApplySendListDelegate CG_RequestFriendApplySendList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendApplyReceiveListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendApplyReceiveListDelegate CG_RequestFriendApplyReceiveList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendApplySendDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendApplySendDelegate CG_RequestFriendApplySend = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendApplyRejectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendApplyRejectDelegate CG_RequestFriendApplyReject = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendApplyReceiveAcceptDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendApplyReceiveAcceptDelegate CG_RequestFriendApplyReceiveAccept = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendApplyReceiveAcceptListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendApplyReceiveAcceptListDelegate CG_RequestFriendApplyReceiveAcceptList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendApplyReceiveRefuseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendApplyReceiveRefuseDelegate CG_RequestFriendApplyReceiveRefuse = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendApplyReceiveRefuseListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendApplyReceiveRefuseListDelegate CG_RequestFriendApplyReceiveRefuseList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendRemoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendRemoveDelegate CG_RequestFriendRemove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendSearchDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendSearchDelegate CG_RequestFriendSearch = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendVisitDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendVisitDelegate CG_RequestFriendVisit = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendPointSendDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendPointSendDelegate CG_RequestFriendPointSend = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendPointSendAllDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendPointSendAllDelegate CG_RequestFriendPointSendAll = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendLobbyInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendLobbyInfoDelegate CG_RequestFriendLobbyInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendCookingRecipeInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendCookingRecipeInfoDelegate CG_RequestFriendCookingRecipeInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendCookingEatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendCookingEatDelegate CG_RequestFriendCookingEat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendCookingEatFriendListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendCookingEatFriendListDelegate CG_RequestFriendCookingEatFriendList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildRecommendListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildRecommendListDelegate CG_RequestGuildRecommendList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildInfoWithMemberListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildInfoWithMemberListDelegate CG_RequestGuildInfoWithMemberList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildSearchByNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildSearchByNameDelegate CG_RequestGuildSearchByName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildCreateDelegate CG_RequestGuildCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildDisbandDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildDisbandDelegate CG_RequestGuildDisband = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildApplicantListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildApplicantListDelegate CG_RequestGuildApplicantList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildApplyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildApplyDelegate CG_RequestGuildApply = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildReturnApplicationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildReturnApplicationDelegate CG_RequestGuildReturnApplication = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildAcceptApplicantDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildAcceptApplicantDelegate CG_RequestGuildAcceptApplicant = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildRejectApplicantDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildRejectApplicantDelegate CG_RequestGuildRejectApplicant = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildLevelUpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildLevelUpDelegate CG_RequestGuildLevelUp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildChangeNameDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildChangeNameDelegate CG_RequestGuildChangeName = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildChangeBoardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildChangeBoardDelegate CG_RequestGuildChangeBoard = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildChangeMasterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildChangeMasterDelegate CG_RequestGuildChangeMaster = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildChangeMemberGradeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildChangeMemberGradeDelegate CG_RequestGuildChangeMemberGrade = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildKickOutMemberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildKickOutMemberDelegate CG_RequestGuildKickOutMember = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildLeaveDelegate CG_RequestGuildLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildRoomInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildRoomInfoDelegate CG_RequestGuildRoomInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildAttendanceDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildAttendanceDelegate CG_RequestGuildAttendance = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildAttendanceRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildAttendanceRewardDelegate CG_RequestGuildAttendanceReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildUserInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildUserInfoDelegate CG_RequestGuildUserInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildAttendanceStatusDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildAttendanceStatusDelegate CG_RequestGuildAttendanceStatus = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildDonationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildDonationDelegate CG_RequestGuildDonation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildDonationInitializeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildDonationInitializeDelegate CG_RequestGuildDonationInitialize = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildMissionInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildMissionInfoDelegate CG_RequestGuildMissionInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildMissionRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildMissionRewardDelegate CG_RequestGuildMissionReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildDonationInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildDonationInfoDelegate CG_RequestGuildDonationInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildSkillInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildSkillInfoDelegate CG_RequestGuildSkillInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildSkillLevelUpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildSkillLevelUpDelegate CG_RequestGuildSkillLevelUp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildSkillUseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildSkillUseDelegate CG_RequestGuildSkillUse = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildSkillDisuseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildSkillDisuseDelegate CG_RequestGuildSkillDisuse = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildSkillUseInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildSkillUseInfoDelegate CG_RequestGuildSkillUseInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildMemberRankPointRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildMemberRankPointRewardDelegate CG_RequestGuildMemberRankPointReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildBattlePointRegisterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildBattlePointRegisterDelegate CG_RequestGuildBattlePointRegister = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildBattlePointMemeberRankListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildBattlePointMemeberRankListDelegate CG_RequestGuildBattlePointMemeberRankList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildBattlePointGuildRankListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildBattlePointGuildRankListDelegate CG_RequestGuildBattlePointGuildRankList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildBattlePointUserRankListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildBattlePointUserRankListDelegate CG_RequestGuildBattlePointUserRankList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestAPRechargeByUseItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestAPRechargeByUseItemDelegate CG_RequestAPRechargeByUseItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWeekStageKeyOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWeekStageKeyOpenDelegate CG_RequestWeekStageKeyOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFoodBuffAutoUseOnOffDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFoodBuffAutoUseOnOffDelegate CG_RequestFoodBuffAutoUseOnOff = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemUseRankExpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemUseRankExpDelegate CG_RequestItemUseRankExp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemUseBoxOpenDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemUseBoxOpenDelegate CG_RequestItemUseBoxOpen = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemUseRecipeExpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemUseRecipeExpDelegate CG_RequestItemUseRecipeExp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemUseWeeklyKeyBoxDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemUseWeeklyKeyBoxDelegate CG_RequestItemUseWeeklyKeyBox = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemUseWeaponTicketDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemUseWeaponTicketDelegate CG_RequestItemUseWeaponTicket = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestItemUseMusicDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestItemUseMusicDelegate CG_RequestItemUseMusic = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTutorialAddStepDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int tutorialStep);  
		public CG_RequestTutorialAddStepDelegate CG_RequestTutorialAddStep = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int tutorialStep)
		{ 
			return false;
		};
		public delegate bool CG_RequestTutorialSetFlagDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.TutorialType tutorialType);  
		public CG_RequestTutorialSetFlagDelegate CG_RequestTutorialSetFlag = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, SimpleCSharp.TutorialType tutorialType)
		{ 
			return false;
		};
		public delegate bool CG_RequestTutorialHeroFlagDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTutorialHeroFlagDelegate CG_RequestTutorialHeroFlag = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTutorialGambleShopBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int tutorialStep);  
		public CG_RequestTutorialGambleShopBuyDelegate CG_RequestTutorialGambleShopBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int tutorialStep)
		{ 
			return false;
		};
		public delegate bool CG_RequestBattleTutorialInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBattleTutorialInfoDelegate CG_RequestBattleTutorialInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBattleTutorialSetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBattleTutorialSetDelegate CG_RequestBattleTutorialSet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchCreateDelegate CG_RequestFriendlyMatchCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchFriendListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchFriendListDelegate CG_RequestFriendlyMatchFriendList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchInviteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchInviteDelegate CG_RequestFriendlyMatchInvite = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchReceivedInviteListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchReceivedInviteListDelegate CG_RequestFriendlyMatchReceivedInviteList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchInviteAcceptDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchInviteAcceptDelegate CG_RequestFriendlyMatchInviteAccept = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchInviteRejectDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchInviteRejectDelegate CG_RequestFriendlyMatchInviteReject = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchStartDelegate CG_RequestFriendlyMatchStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchBattleStartDelegate CG_RequestFriendlyMatchBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchClearDelegate CG_RequestFriendlyMatchClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchExitDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchExitDelegate CG_RequestFriendlyMatchExit = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestFriendlyMatchSetInviteOptionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestFriendlyMatchSetInviteOptionDelegate CG_RequestFriendlyMatchSetInviteOption = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventSeasonPassInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, byte currentClientSeasonPassWeek);  
		public CG_RequestEventSeasonPassInfoDelegate CG_RequestEventSeasonPassInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, byte currentClientSeasonPassWeek)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventSeasonPassRankUpRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventSeasonPassRankUpRewardDelegate CG_RequestEventSeasonPassRankUpReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventSeasonPassRankUpRewardAllDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventSeasonPassRankUpRewardAllDelegate CG_RequestEventSeasonPassRankUpRewardAll = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventSeasonPassRankBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventSeasonPassRankBuyDelegate CG_RequestEventSeasonPassRankBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWestSideServerInfo_RandomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWestSideServerInfo_RandomDelegate CG_RequestWestSideServerInfo_Random = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWestSideServerInfo_FixedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWestSideServerInfo_FixedDelegate CG_RequestWestSideServerInfo_Fixed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWestSideServerInfo_RecommandDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWestSideServerInfo_RecommandDelegate CG_RequestWestSideServerInfo_Recommand = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWestSide_PlayerInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWestSide_PlayerInfoDelegate CG_RequestWestSide_PlayerInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWestSide_PlayerteamInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWestSide_PlayerteamInfoDelegate CG_RequestWestSide_PlayerteamInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWestSide_PlayerGuildInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestWestSide_PlayerGuildInfoDelegate CG_RequestWestSide_PlayerGuildInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestWorldChattingChannelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int targetChannelId, bool neverFail);  
		public CG_RequestWorldChattingChannelDelegate CG_RequestWorldChattingChannel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int targetChannelId, bool neverFail)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLobbyInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLobbyInfoDelegate CG_RequestArenaRealTimePvpLobbyInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpJoinDelegate CG_RequestArenaRealTimePvpJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpTopRankerListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpTopRankerListDelegate CG_RequestArenaRealTimePvpTopRankerList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLastRankerListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLastRankerListDelegate CG_RequestArenaRealTimePvpLastRankerList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpMatchingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpMatchingDelegate CG_RequestArenaRealTimePvpMatching = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpBattleStartDelegate CG_RequestArenaRealTimePvpBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpBattleEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpBattleEndDelegate CG_RequestArenaRealTimePvpBattleEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpRollbackDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpRollbackDelegate CG_RequestArenaRealTimePvpRollback = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpIngameBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpIngameBattleStartDelegate CG_RequestArenaRealTimePvpIngameBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLowerLobbyInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLowerLobbyInfoDelegate CG_RequestArenaRealTimePvpLowerLobbyInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLowerJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLowerJoinDelegate CG_RequestArenaRealTimePvpLowerJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLowerTopRankerListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLowerTopRankerListDelegate CG_RequestArenaRealTimePvpLowerTopRankerList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLowerMatchingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLowerMatchingDelegate CG_RequestArenaRealTimePvpLowerMatching = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLowerBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLowerBattleStartDelegate CG_RequestArenaRealTimePvpLowerBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLowerBattleEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLowerBattleEndDelegate CG_RequestArenaRealTimePvpLowerBattleEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpAllInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpAllInfoDelegate CG_RequestArenaRealTimePvpAllInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLastRankerBattleInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLastRankerBattleInfoDelegate CG_RequestArenaRealTimePvpLastRankerBattleInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLastRankerBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLastRankerBattleStartDelegate CG_RequestArenaRealTimePvpLastRankerBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLowerRollbackDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLowerRollbackDelegate CG_RequestArenaRealTimePvpLowerRollback = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimePvpLowerIngameBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimePvpLowerIngameBattleStartDelegate CG_RequestArenaRealTimePvpLowerIngameBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionLobbyInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionLobbyInfoDelegate CG_RequestArenaRealTimeDecisionLobbyInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionJoinDelegate CG_RequestArenaRealTimeDecisionJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionTopRankerListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionTopRankerListDelegate CG_RequestArenaRealTimeDecisionTopRankerList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionMatchingDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionMatchingDelegate CG_RequestArenaRealTimeDecisionMatching = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionBattleEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionBattleEndDelegate CG_RequestArenaRealTimeDecisionBattleEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionIngameBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionIngameBattleStartDelegate CG_RequestArenaRealTimeDecisionIngameBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionHistoryDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionHistoryDelegate CG_RequestArenaRealTimeDecisionHistory = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionChangeMatchingListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionChangeMatchingListDelegate CG_RequestArenaRealTimeDecisionChangeMatchingList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestArenaRealTimeDecisionMatchingSimpleInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestArenaRealTimeDecisionMatchingSimpleInfoDelegate CG_RequestArenaRealTimeDecisionMatchingSimpleInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestPvpSeasonInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPvpSeasonInfoDelegate CG_RequestPvpSeasonInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestPvpSeasonHistoryDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPvpSeasonHistoryDelegate CG_RequestPvpSeasonHistory = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarCreateDelegate CG_RequestBossWarCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarJoinDelegate CG_RequestBossWarJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarStartDelegate CG_RequestBossWarStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarOnlineFriendListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarOnlineFriendListDelegate CG_RequestBossWarOnlineFriendList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarOnlineGuildMemberListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarOnlineGuildMemberListDelegate CG_RequestBossWarOnlineGuildMemberList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarOnlineUserRankRangeListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarOnlineUserRankRangeListDelegate CG_RequestBossWarOnlineUserRankRangeList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarInvitationReceiveListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarInvitationReceiveListDelegate CG_RequestBossWarInvitationReceiveList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarRemoveInvitationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarRemoveInvitationDelegate CG_RequestBossWarRemoveInvitation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarInviteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarInviteDelegate CG_RequestBossWarInvite = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarKickOutDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarKickOutDelegate CG_RequestBossWarKickOut = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarReadyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarReadyDelegate CG_RequestBossWarReady = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarReturnReadyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarReturnReadyDelegate CG_RequestBossWarReturnReady = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarLeaveDelegate CG_RequestBossWarLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarBattleStartDelegate CG_RequestBossWarBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarBattleSyncDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarBattleSyncDelegate CG_RequestBossWarBattleSync = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarBattleEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarBattleEndDelegate CG_RequestBossWarBattleEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestBossWarRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestBossWarRewardDelegate CG_RequestBossWarReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventExchangeInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventExchangeInfoDelegate CG_RequestEventExchangeInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventExchangeBoxGachaInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventExchangeBoxGachaInfoDelegate CG_RequestEventExchangeBoxGachaInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventExchangeBoxGachaPickupDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventExchangeBoxGachaPickupDelegate CG_RequestEventExchangeBoxGachaPickup = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventExchangeBoxGachaResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventExchangeBoxGachaResetDelegate CG_RequestEventExchangeBoxGachaReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventPaybackRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventPaybackRewardDelegate CG_RequestEventPaybackReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventSnsShareProgressDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventSnsShareProgressDelegate CG_RequestEventSnsShareProgress = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventSnsShareRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventSnsShareRewardDelegate CG_RequestEventSnsShareReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGagueEventInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGagueEventInfoDelegate CG_RequestGagueEventInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGagueEventChargeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGagueEventChargeDelegate CG_RequestGagueEventCharge = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGagueEventRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGagueEventRewardDelegate CG_RequestGagueEventReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGagueEventResetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGagueEventResetDelegate CG_RequestGagueEventReset = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventLadderRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventLadderRewardDelegate CG_RequestEventLadderReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventLobbyGiftRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventLobbyGiftRewardDelegate CG_RequestEventLobbyGiftReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventTimeMissionInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventTimeMissionInfoDelegate CG_RequestEventTimeMissionInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventTimeMissionStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventTimeMissionStartDelegate CG_RequestEventTimeMissionStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestEventLobbyDecorationRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestEventLobbyDecorationRewardDelegate CG_RequestEventLobbyDecorationReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestRegistPlayTitleDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestRegistPlayTitleDelegate CG_RequestRegistPlayTitle = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestPlayTitleMissionRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestPlayTitleMissionRewardDelegate CG_RequestPlayTitleMissionReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentListDelegate CG_RequestTournamentList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentProgressInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentProgressInfoDelegate CG_RequestTournamentProgressInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentResultInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentResultInfoDelegate CG_RequestTournamentResultInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentMatchJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentMatchJoinDelegate CG_RequestTournamentMatchJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentMatchBattleStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentMatchBattleStartDelegate CG_RequestTournamentMatchBattleStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentMatchBattleEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentMatchBattleEndDelegate CG_RequestTournamentMatchBattleEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentMatchExitDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentMatchExitDelegate CG_RequestTournamentMatchExit = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentRewardDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentRewardDelegate CG_RequestTournamentReward = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentPlayerTeamSlotChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentPlayerTeamSlotChangeDelegate CG_RequestTournamentPlayerTeamSlotChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentPlayerTeamInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentPlayerTeamInfoDelegate CG_RequestTournamentPlayerTeamInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentCheerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentCheerDelegate CG_RequestTournamentCheer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentCheerListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentCheerListDelegate CG_RequestTournamentCheerList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentWatcherJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentWatcherJoinDelegate CG_RequestTournamentWatcherJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentWatcherExitDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentWatcherExitDelegate CG_RequestTournamentWatcherExit = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentMatchPlayInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentMatchPlayInfoDelegate CG_RequestTournamentMatchPlayInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestTournamentReplayInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestTournamentReplayInfoDelegate CG_RequestTournamentReplayInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarLobbyInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarLobbyInfoDelegate CG_RequestGuildWarLobbyInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarRankInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarRankInfoDelegate CG_RequestGuildWarRankInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarVersusRecordInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarVersusRecordInfoDelegate CG_RequestGuildWarVersusRecordInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarGuildMemberListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarGuildMemberListDelegate CG_RequestGuildWarGuildMemberList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarWorldMapInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarWorldMapInfoDelegate CG_RequestGuildWarWorldMapInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarAttackSquadChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarAttackSquadChangeDelegate CG_RequestGuildWarAttackSquadChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarDefenceTeamChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarDefenceTeamChangeDelegate CG_RequestGuildWarDefenceTeamChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarRegionBonusScoreChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarRegionBonusScoreChangeDelegate CG_RequestGuildWarRegionBonusScoreChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarAreaGuildMemberChangeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarAreaGuildMemberChangeDelegate CG_RequestGuildWarAreaGuildMemberChange = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_RequestGuildWarBattleRecordInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_RequestGuildWarBattleRecordInfoDelegate CG_RequestGuildWarBattleRecordInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildWar_Stage_StartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildWar_Stage_StartDelegate CG_Request_GuildWar_Stage_Start = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildWar_Stage_ClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildWar_Stage_ClearDelegate CG_Request_GuildWar_Stage_Clear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildWar_Stage_RejoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildWar_Stage_RejoinDelegate CG_Request_GuildWar_Stage_Rejoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CG_Request_GuildWar_Stage_HeroStatus_SyncDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CG_Request_GuildWar_Stage_HeroStatus_SyncDelegate CG_Request_GuildWar_Stage_HeroStatus_Sync = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
            //Console.WriteLine("__rmiID:{0}", __rmiID);
            switch (__rmiID)
		{
        case Common.CG_RequestChannelUserInfo:
            ProcessReceivedMessage_CG_RequestChannelUserInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestHeartBeat:
            ProcessReceivedMessage_CG_RequestHeartBeat(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestChangeNickname:
            ProcessReceivedMessage_CG_RequestChangeNickname(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestChangeWantToSay:
            ProcessReceivedMessage_CG_RequestChangeWantToSay(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTeamInfo:
            ProcessReceivedMessage_CG_RequestTeamInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTeamSlotChange:
            ProcessReceivedMessage_CG_RequestTeamSlotChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTeamNameChange:
            ProcessReceivedMessage_CG_RequestTeamNameChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyInfo:
            ProcessReceivedMessage_CG_RequestLobbyInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointInfo:
            ProcessReceivedMessage_CG_RequestBasePointInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMercenaryList:
            ProcessReceivedMessage_CG_RequestMercenaryList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMercenaryInfo:
            ProcessReceivedMessage_CG_RequestMercenaryInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildInfo:
            ProcessReceivedMessage_CG_RequestGuildInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestChatStampUpdateBookmark:
            ProcessReceivedMessage_CG_RequestChatStampUpdateBookmark(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestChatStampUpdateQuickMessage:
            ProcessReceivedMessage_CG_RequestChatStampUpdateQuickMessage(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMainSkinChange:
            ProcessReceivedMessage_CG_RequestMainSkinChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventList:
            ProcessReceivedMessage_CG_RequestEventList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCheatEnter:
            ProcessReceivedMessage_CG_RequestCheatEnter(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCheatStageClear:
            ProcessReceivedMessage_CG_RequestCheatStageClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDllGetItem:
            ProcessReceivedMessage_CG_RequestDllGetItem(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRecommendFriendUSNList:
            ProcessReceivedMessage_CG_RequestRecommendFriendUSNList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDailyReset:
            ProcessReceivedMessage_CG_RequestDailyReset(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFrozenAssetRedeem:
            ProcessReceivedMessage_CG_RequestFrozenAssetRedeem(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSecurityToken:
            ProcessReceivedMessage_CG_RequestSecurityToken(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestNetmarbleAuth:
            ProcessReceivedMessage_CG_RequestNetmarbleAuth(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAuthenticateCreate:
            ProcessReceivedMessage_CG_RequestAuthenticateCreate(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEditorUserInfoByNickName:
            ProcessReceivedMessage_CG_RequestEditorUserInfoByNickName(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLogin:
            ProcessReceivedMessage_CG_RequestLogin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLoginInstantly:
            ProcessReceivedMessage_CG_RequestLoginInstantly(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RetryRequest:
            ProcessReceivedMessage_CG_RetryRequest(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBillingInitialize:
            ProcessReceivedMessage_CG_RequestBillingInitialize(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBillingVerifyPU:
            ProcessReceivedMessage_CG_RequestBillingVerifyPU(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBillingRemainTR:
            ProcessReceivedMessage_CG_RequestBillingRemainTR(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBillingCouponVerify:
            ProcessReceivedMessage_CG_RequestBillingCouponVerify(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBillingCrossPromotion:
            ProcessReceivedMessage_CG_RequestBillingCrossPromotion(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBillingPackageShop:
            ProcessReceivedMessage_CG_RequestBillingPackageShop(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAgeInput:
            ProcessReceivedMessage_CG_RequestAgeInput(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSDKInfoChange:
            ProcessReceivedMessage_CG_RequestSDKInfoChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinLevelUpBySkinMaterial:
            ProcessReceivedMessage_CG_RequestSkinLevelUpBySkinMaterial(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinResearch:
            ProcessReceivedMessage_CG_RequestSkinResearch(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinResearchInit:
            ProcessReceivedMessage_CG_RequestSkinResearchInit(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinMaterialGrind:
            ProcessReceivedMessage_CG_RequestSkinMaterialGrind(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinAwaken:
            ProcessReceivedMessage_CG_RequestSkinAwaken(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinHeadStyleChange:
            ProcessReceivedMessage_CG_RequestSkinHeadStyleChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinEvolution:
            ProcessReceivedMessage_CG_RequestSkinEvolution(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinSkillLevelUp:
            ProcessReceivedMessage_CG_RequestSkinSkillLevelUp(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinGiveFellowshipExp:
            ProcessReceivedMessage_CG_RequestSkinGiveFellowshipExp(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinFellowshipLevelUpReward:
            ProcessReceivedMessage_CG_RequestSkinFellowshipLevelUpReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeEquip:
            ProcessReceivedMessage_CG_RequestCostumeEquip(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeUnEquip:
            ProcessReceivedMessage_CG_RequestCostumeUnEquip(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeUnLock:
            ProcessReceivedMessage_CG_RequestCostumeUnLock(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinOverEvolution:
            ProcessReceivedMessage_CG_RequestSkinOverEvolution(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinMaxAwakenReward:
            ProcessReceivedMessage_CG_RequestSkinMaxAwakenReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeRegister:
            ProcessReceivedMessage_CG_RequestCostumeRegister(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinLoveReward:
            ProcessReceivedMessage_CG_RequestSkinLoveReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeAutoRegister:
            ProcessReceivedMessage_CG_RequestCostumeAutoRegister(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestStoryCostume:
            ProcessReceivedMessage_CG_RequestStoryCostume(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeLevelUp:
            ProcessReceivedMessage_CG_RequestCostumeLevelUp(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestSkinMaxAwaken:
            ProcessReceivedMessage_CG_RequestSkinMaxAwaken(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponEquip:
            ProcessReceivedMessage_CG_RequestWeaponEquip(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponUnEquip:
            ProcessReceivedMessage_CG_RequestWeaponUnEquip(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponSell:
            ProcessReceivedMessage_CG_RequestWeaponSell(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponGrind:
            ProcessReceivedMessage_CG_RequestWeaponGrind(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponUpgrade:
            ProcessReceivedMessage_CG_RequestWeaponUpgrade(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponUpgradeRetry:
            ProcessReceivedMessage_CG_RequestWeaponUpgradeRetry(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponEvolution:
            ProcessReceivedMessage_CG_RequestWeaponEvolution(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponEvolutionRetry:
            ProcessReceivedMessage_CG_RequestWeaponEvolutionRetry(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponOptionEnhance:
            ProcessReceivedMessage_CG_RequestWeaponOptionEnhance(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponLock:
            ProcessReceivedMessage_CG_RequestWeaponLock(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponUnLock:
            ProcessReceivedMessage_CG_RequestWeaponUnLock(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponEquipExchange:
            ProcessReceivedMessage_CG_RequestWeaponEquipExchange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponEquipExchangeAll:
            ProcessReceivedMessage_CG_RequestWeaponEquipExchangeAll(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponEquipRecommand:
            ProcessReceivedMessage_CG_RequestWeaponEquipRecommand(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponCarve:
            ProcessReceivedMessage_CG_RequestWeaponCarve(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponCarveRemove:
            ProcessReceivedMessage_CG_RequestWeaponCarveRemove(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestStageInfo:
            ProcessReceivedMessage_CG_RequestStageInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestStageRejoin:
            ProcessReceivedMessage_CG_RequestStageRejoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Week_Stage_Start:
            ProcessReceivedMessage_CG_Request_Week_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Week_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Week_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Week_Stage_Continue:
            ProcessReceivedMessage_CG_Request_Week_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_Stage_Start:
            ProcessReceivedMessage_CG_Request_Main_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Main_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_Stage_Continue:
            ProcessReceivedMessage_CG_Request_Main_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_Stage_Start:
            ProcessReceivedMessage_CG_Request_Free_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Free_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_Stage_Continue:
            ProcessReceivedMessage_CG_Request_Free_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestHawkRunStageStart:
            ProcessReceivedMessage_CG_RequestHawkRunStageStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestHawkRunStageClear:
            ProcessReceivedMessage_CG_RequestHawkRunStageClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventStageClear:
            ProcessReceivedMessage_CG_RequestEventStageClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Quest_Stage_Start:
            ProcessReceivedMessage_CG_Request_Quest_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Quest_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Quest_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Quest_Stage_Continue:
            ProcessReceivedMessage_CG_Request_Quest_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_Stage_Start:
            ProcessReceivedMessage_CG_Request_Boss_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Boss_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_Stage_Continue:
            ProcessReceivedMessage_CG_Request_Boss_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Memorial_Stage_Start:
            ProcessReceivedMessage_CG_Request_Memorial_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Memorial_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Memorial_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Memorial_Stage_Continue:
            ProcessReceivedMessage_CG_Request_Memorial_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Limited_Stage_Start:
            ProcessReceivedMessage_CG_Request_Limited_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Limited_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Limited_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Limited_Stage_Continue:
            ProcessReceivedMessage_CG_Request_Limited_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_ExtraStage_Start:
            ProcessReceivedMessage_CG_Request_Main_ExtraStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_ExtraStage_Clear:
            ProcessReceivedMessage_CG_Request_Main_ExtraStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_ExtraStage_Continue:
            ProcessReceivedMessage_CG_Request_Main_ExtraStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_ExtraStage_Start:
            ProcessReceivedMessage_CG_Request_Boss_ExtraStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_ExtraStage_Clear:
            ProcessReceivedMessage_CG_Request_Boss_ExtraStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_ExtraStage_Continue:
            ProcessReceivedMessage_CG_Request_Boss_ExtraStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRewardStageClear:
            ProcessReceivedMessage_CG_RequestRewardStageClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_SingleSiege_ExtraStage_Start:
            ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_SingleSiege_ExtraStage_Clear:
            ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_SingleSiege_ExtraStage_Continue:
            ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_FinalBoss_Stage_Start:
            ProcessReceivedMessage_CG_Request_FinalBoss_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_FinalBoss_Stage_Clear:
            ProcessReceivedMessage_CG_Request_FinalBoss_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_FinalBoss_Stage_Continue:
            ProcessReceivedMessage_CG_Request_FinalBoss_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_FinalBoss_Season_Info:
            ProcessReceivedMessage_CG_Request_FinalBoss_Season_Info(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Training_Stage_Info:
            ProcessReceivedMessage_CG_Request_Training_Stage_Info(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Training_Stage_Start:
            ProcessReceivedMessage_CG_Request_Training_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Training_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Training_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Training_Stage_Continue:
            ProcessReceivedMessage_CG_Request_Training_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Training_Stage_Open:
            ProcessReceivedMessage_CG_Request_Training_Stage_Open(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Training_Stage_Refresh:
            ProcessReceivedMessage_CG_Request_Training_Stage_Refresh(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildBoss_Stage_Start:
            ProcessReceivedMessage_CG_Request_GuildBoss_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildBoss_Stage_Clear:
            ProcessReceivedMessage_CG_Request_GuildBoss_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildBoss_Lobby_Info:
            ProcessReceivedMessage_CG_Request_GuildBoss_Lobby_Info(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildBoss_Rank_Info:
            ProcessReceivedMessage_CG_Request_GuildBoss_Rank_Info(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildBoss_LastWeek_Rank_Info:
            ProcessReceivedMessage_CG_Request_GuildBoss_LastWeek_Rank_Info(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildBoss_Time_Refresh:
            ProcessReceivedMessage_CG_Request_GuildBoss_Time_Refresh(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_AnotherMain_Stage_Start:
            ProcessReceivedMessage_CG_Request_AnotherMain_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_AnotherMain_Stage_Clear:
            ProcessReceivedMessage_CG_Request_AnotherMain_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_AnotherMain_Stage_Continue:
            ProcessReceivedMessage_CG_Request_AnotherMain_Stage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_FinalBoss_Season_Rank_Info:
            ProcessReceivedMessage_CG_Request_FinalBoss_Season_Rank_Info(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Reverse_Stage_Start:
            ProcessReceivedMessage_CG_Request_Reverse_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Reverse_Stage_Clear:
            ProcessReceivedMessage_CG_Request_Reverse_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Reverse_Star_Reward:
            ProcessReceivedMessage_CG_Request_Reverse_Star_Reward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Reverse_Group_Reward:
            ProcessReceivedMessage_CG_Request_Reverse_Group_Reward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_EventAreaStage_Start:
            ProcessReceivedMessage_CG_Request_Main_EventAreaStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_EventAreaStage_Clear:
            ProcessReceivedMessage_CG_Request_Main_EventAreaStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_EventAreaStage_Continue:
            ProcessReceivedMessage_CG_Request_Main_EventAreaStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_EventAreaStage_Start:
            ProcessReceivedMessage_CG_Request_Free_EventAreaStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_EventAreaStage_Clear:
            ProcessReceivedMessage_CG_Request_Free_EventAreaStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_EventAreaStage_Continue:
            ProcessReceivedMessage_CG_Request_Free_EventAreaStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventAreaRewardStageClear:
            ProcessReceivedMessage_CG_RequestEventAreaRewardStageClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_EventStage_Start:
            ProcessReceivedMessage_CG_Request_Free_EventStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_EventStage_Clear:
            ProcessReceivedMessage_CG_Request_Free_EventStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_EventStage_Continue:
            ProcessReceivedMessage_CG_Request_Free_EventStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventExchange:
            ProcessReceivedMessage_CG_RequestEventExchange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventPlayCountReward:
            ProcessReceivedMessage_CG_RequestEventPlayCountReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_ListEventStage_Start:
            ProcessReceivedMessage_CG_Request_Main_ListEventStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_ListEventStage_Clear:
            ProcessReceivedMessage_CG_Request_Main_ListEventStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_ListEventStage_Continue:
            ProcessReceivedMessage_CG_Request_Main_ListEventStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_ListEventStage_Start:
            ProcessReceivedMessage_CG_Request_Free_ListEventStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_ListEventStage_Clear:
            ProcessReceivedMessage_CG_Request_Free_ListEventStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Free_ListEventStage_Continue:
            ProcessReceivedMessage_CG_Request_Free_ListEventStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_FinalBossStage_Start:
            ProcessReceivedMessage_CG_Request_Main_FinalBossStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_FinalBossStage_Clear:
            ProcessReceivedMessage_CG_Request_Main_FinalBossStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Main_FinalBossStage_Continue:
            ProcessReceivedMessage_CG_Request_Main_FinalBossStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_FinalBoss_EventFreeStage_Start:
            ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_FinalBoss_EventFreeStage_Clear:
            ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_FinalBoss_EventFreeStage_Continue:
            ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Limited_EventStage_Start:
            ProcessReceivedMessage_CG_Request_Limited_EventStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Limited_EventStage_Clear:
            ProcessReceivedMessage_CG_Request_Limited_EventStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Limited_EventStage_Continue:
            ProcessReceivedMessage_CG_Request_Limited_EventStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_EventStage_Start:
            ProcessReceivedMessage_CG_Request_Boss_EventStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_EventStage_Clear:
            ProcessReceivedMessage_CG_Request_Boss_EventStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Boss_EventStage_Continue:
            ProcessReceivedMessage_CG_Request_Boss_EventStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Monthly_EventStage_Start:
            ProcessReceivedMessage_CG_Request_Monthly_EventStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Monthly_EventStage_Clear:
            ProcessReceivedMessage_CG_Request_Monthly_EventStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_Monthly_EventStage_Continue:
            ProcessReceivedMessage_CG_Request_Monthly_EventStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMonthlyStagePointReward:
            ProcessReceivedMessage_CG_RequestMonthlyStagePointReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeekStageGaugeReward:
            ProcessReceivedMessage_CG_RequestWeekStageGaugeReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestIngameBattleStart:
            ProcessReceivedMessage_CG_RequestIngameBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestStageEndLog:
            ProcessReceivedMessage_CG_RequestStageEndLog(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_ChallengeBoss_EventStage_Start:
            ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_ChallengeBoss_EventStage_Clear:
            ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_ChallengeBoss_EventStage_Continue:
            ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_Continue(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_ChallengeBoss_EventStage_Info:
            ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_Info(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_ChallengeBoss_Event_Point_Reward:
            ProcessReceivedMessage_CG_Request_ChallengeBoss_Event_Point_Reward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMailList:
            ProcessReceivedMessage_CG_RequestMailList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMailConfirm:
            ProcessReceivedMessage_CG_RequestMailConfirm(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMailConfirmAll:
            ProcessReceivedMessage_CG_RequestMailConfirmAll(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMailHistoryList:
            ProcessReceivedMessage_CG_RequestMailHistoryList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMailRecentlyHistoryList:
            ProcessReceivedMessage_CG_RequestMailRecentlyHistoryList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendMailList:
            ProcessReceivedMessage_CG_RequestFriendMailList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendMailConfirm:
            ProcessReceivedMessage_CG_RequestFriendMailConfirm(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendMailConfirmAll:
            ProcessReceivedMessage_CG_RequestFriendMailConfirmAll(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestNoticeMailReward:
            ProcessReceivedMessage_CG_RequestNoticeMailReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPackageMailList:
            ProcessReceivedMessage_CG_RequestPackageMailList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPackageMailGet:
            ProcessReceivedMessage_CG_RequestPackageMailGet(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPackageMailHistoryList:
            ProcessReceivedMessage_CG_RequestPackageMailHistoryList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLevelUpPackageReward:
            ProcessReceivedMessage_CG_RequestLevelUpPackageReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLevelUpPackageRewardAll:
            ProcessReceivedMessage_CG_RequestLevelUpPackageRewardAll(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAttendancePackageReward:
            ProcessReceivedMessage_CG_RequestAttendancePackageReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAttendancePackageRewardAll:
            ProcessReceivedMessage_CG_RequestAttendancePackageRewardAll(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMailADReward:
            ProcessReceivedMessage_CG_RequestMailADReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGambleShopBuy:
            ProcessReceivedMessage_CG_RequestGambleShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestStepupGambleShopBuy:
            ProcessReceivedMessage_CG_RequestStepupGambleShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestStepupGambleMileageReward:
            ProcessReceivedMessage_CG_RequestStepupGambleMileageReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemGambleShopInfo:
            ProcessReceivedMessage_CG_RequestItemGambleShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemGambleShopBuy:
            ProcessReceivedMessage_CG_RequestItemGambleShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRandomShopBuy:
            ProcessReceivedMessage_CG_RequestRandomShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRandomShopRefresh:
            ProcessReceivedMessage_CG_RequestRandomShopRefresh(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRandomShopInfo:
            ProcessReceivedMessage_CG_RequestRandomShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointShopInfo:
            ProcessReceivedMessage_CG_RequestBasePointShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointShopBuy:
            ProcessReceivedMessage_CG_RequestBasePointShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointShopReset:
            ProcessReceivedMessage_CG_RequestBasePointShopReset(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpShopInfo:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpShopBuy:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpShopReset:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopReset(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCoinShopInfo:
            ProcessReceivedMessage_CG_RequestCoinShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCoinShopBuy:
            ProcessReceivedMessage_CG_RequestCoinShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCoinShopDailyBuy:
            ProcessReceivedMessage_CG_RequestCoinShopDailyBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCoinShopOnceBuy:
            ProcessReceivedMessage_CG_RequestCoinShopOnceBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeShopInfo:
            ProcessReceivedMessage_CG_RequestCostumeShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeShopBuy:
            ProcessReceivedMessage_CG_RequestCostumeShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCostumeShopPackageBuy:
            ProcessReceivedMessage_CG_RequestCostumeShopPackageBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendPointShopInfo:
            ProcessReceivedMessage_CG_RequestFriendPointShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendPointShopBuy:
            ProcessReceivedMessage_CG_RequestFriendPointShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDiaShopInfo:
            ProcessReceivedMessage_CG_RequestDiaShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDiaShopBuy:
            ProcessReceivedMessage_CG_RequestDiaShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemInventoryBuy:
            ProcessReceivedMessage_CG_RequestItemInventoryBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeaponInventoryBuy:
            ProcessReceivedMessage_CG_RequestWeaponInventoryBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeekStageKeyBuy:
            ProcessReceivedMessage_CG_RequestWeekStageKeyBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCommonItemSell:
            ProcessReceivedMessage_CG_RequestCommonItemSell(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCommonItemRemove:
            ProcessReceivedMessage_CG_RequestCommonItemRemove(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPackageBuy:
            ProcessReceivedMessage_CG_RequestPackageBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBuyDia:
            ProcessReceivedMessage_CG_RequestBuyDia(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBuyGold:
            ProcessReceivedMessage_CG_RequestBuyGold(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBuyStamina:
            ProcessReceivedMessage_CG_RequestBuyStamina(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildShopInfo:
            ProcessReceivedMessage_CG_RequestGuildShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildShopBuy:
            ProcessReceivedMessage_CG_RequestGuildShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildShopReset:
            ProcessReceivedMessage_CG_RequestGuildShopReset(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFinalBossShopInfo:
            ProcessReceivedMessage_CG_RequestFinalBossShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFinalBossShopBuy:
            ProcessReceivedMessage_CG_RequestFinalBossShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventCollaborationCoinShopInfo:
            ProcessReceivedMessage_CG_RequestEventCollaborationCoinShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventCollaborationCoinShopBuy:
            ProcessReceivedMessage_CG_RequestEventCollaborationCoinShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBingoGambleShopInfo:
            ProcessReceivedMessage_CG_RequestBingoGambleShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBingoGambleShopReset:
            ProcessReceivedMessage_CG_RequestBingoGambleShopReset(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBingoGambleShopReward:
            ProcessReceivedMessage_CG_RequestBingoGambleShopReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDiaShopPackageBuy:
            ProcessReceivedMessage_CG_RequestDiaShopPackageBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRandomShopVisitReward:
            ProcessReceivedMessage_CG_RequestRandomShopVisitReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGambleChoiceShopBuy:
            ProcessReceivedMessage_CG_RequestGambleChoiceShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRandomShopScheduleInfo:
            ProcessReceivedMessage_CG_RequestRandomShopScheduleInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPackageShopInfo:
            ProcessReceivedMessage_CG_RequestPackageShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFreePackageReward:
            ProcessReceivedMessage_CG_RequestFreePackageReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPackageMissionClose:
            ProcessReceivedMessage_CG_RequestPackageMissionClose(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGambleShopInfo:
            ProcessReceivedMessage_CG_RequestGambleShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestADRouletteReward:
            ProcessReceivedMessage_CG_RequestADRouletteReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestQuestStart:
            ProcessReceivedMessage_CG_RequestQuestStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestQuestProgress:
            ProcessReceivedMessage_CG_RequestQuestProgress(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestQuestClear:
            ProcessReceivedMessage_CG_RequestQuestClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestQuestRemove:
            ProcessReceivedMessage_CG_RequestQuestRemove(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestNetmarbleQuestAchieve:
            ProcessReceivedMessage_CG_RequestNetmarbleQuestAchieve(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestNetmarbleQuestReward:
            ProcessReceivedMessage_CG_RequestNetmarbleQuestReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDirectSelectorReward:
            ProcessReceivedMessage_CG_RequestDirectSelectorReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMissionProgress:
            ProcessReceivedMessage_CG_RequestMissionProgress(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMissionClear:
            ProcessReceivedMessage_CG_RequestMissionClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMissionEventClear:
            ProcessReceivedMessage_CG_RequestMissionEventClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestMissionGetAchievePointReward:
            ProcessReceivedMessage_CG_RequestMissionGetAchievePointReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestQuestChapterClear:
            ProcessReceivedMessage_CG_RequestQuestChapterClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventMissionGetAchievePointReward:
            ProcessReceivedMessage_CG_RequestEventMissionGetAchievePointReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventMissionCompleteReward:
            ProcessReceivedMessage_CG_RequestEventMissionCompleteReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventMissionInfo:
            ProcessReceivedMessage_CG_RequestEventMissionInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventQuestClear:
            ProcessReceivedMessage_CG_RequestEventQuestClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAnotherQuestClear:
            ProcessReceivedMessage_CG_RequestAnotherQuestClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestQuestGuideListAllClearReward:
            ProcessReceivedMessage_CG_RequestQuestGuideListAllClearReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyVRSearch:
            ProcessReceivedMessage_CG_RequestLobbyVRSearch(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyVRHelbram:
            ProcessReceivedMessage_CG_RequestLobbyVRHelbram(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyNpcSkin:
            ProcessReceivedMessage_CG_RequestLobbyNpcSkin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyNpcGift:
            ProcessReceivedMessage_CG_RequestLobbyNpcGift(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyKingAmber:
            ProcessReceivedMessage_CG_RequestLobbyKingAmber(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyDropInteractiveOpen:
            ProcessReceivedMessage_CG_RequestLobbyDropInteractiveOpen(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyUniqueInteractiveOpen:
            ProcessReceivedMessage_CG_RequestLobbyUniqueInteractiveOpen(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyNpcTalkInfo:
            ProcessReceivedMessage_CG_RequestLobbyNpcTalkInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyNpcTalkChoice:
            ProcessReceivedMessage_CG_RequestLobbyNpcTalkChoice(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyBarrel:
            ProcessReceivedMessage_CG_RequestLobbyBarrel(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyBarrelRefill:
            ProcessReceivedMessage_CG_RequestLobbyBarrelRefill(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyCleanTable:
            ProcessReceivedMessage_CG_RequestLobbyCleanTable(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyServeBeer:
            ProcessReceivedMessage_CG_RequestLobbyServeBeer(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyPlayJukebox:
            ProcessReceivedMessage_CG_RequestLobbyPlayJukebox(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyElizabethTouch:
            ProcessReceivedMessage_CG_RequestLobbyElizabethTouch(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyHawkAnger:
            ProcessReceivedMessage_CG_RequestLobbyHawkAnger(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAttendanceReward:
            ProcessReceivedMessage_CG_RequestAttendanceReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAttendanceEventReward:
            ProcessReceivedMessage_CG_RequestAttendanceEventReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCookingStart:
            ProcessReceivedMessage_CG_RequestCookingStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRecipeActive:
            ProcessReceivedMessage_CG_RequestRecipeActive(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCookingRecipeOrderInfo:
            ProcessReceivedMessage_CG_RequestCookingRecipeOrderInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCookingRecipeOrder:
            ProcessReceivedMessage_CG_RequestCookingRecipeOrder(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCookingRecipeDisorder:
            ProcessReceivedMessage_CG_RequestCookingRecipeDisorder(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCookingRecipeCollect:
            ProcessReceivedMessage_CG_RequestCookingRecipeCollect(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCookingRecipeCollectOneSlot:
            ProcessReceivedMessage_CG_RequestCookingRecipeCollectOneSlot(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestCookingUseCookingBuff:
            ProcessReceivedMessage_CG_RequestCookingUseCookingBuff(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuestInfo:
            ProcessReceivedMessage_CG_RequestGuestInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuestChange:
            ProcessReceivedMessage_CG_RequestGuestChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuestChangeTarget:
            ProcessReceivedMessage_CG_RequestGuestChangeTarget(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuestTalk:
            ProcessReceivedMessage_CG_RequestGuestTalk(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuestGift:
            ProcessReceivedMessage_CG_RequestGuestGift(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBirthdayNpcInfo:
            ProcessReceivedMessage_CG_RequestBirthdayNpcInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRestReward:
            ProcessReceivedMessage_CG_RequestRestReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyHousingShopInfo:
            ProcessReceivedMessage_CG_RequestLobbyHousingShopInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyHousingShopBuy:
            ProcessReceivedMessage_CG_RequestLobbyHousingShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestLobbyFurnitureRegist:
            ProcessReceivedMessage_CG_RequestLobbyFurnitureRegist(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestUserMusicEdit:
            ProcessReceivedMessage_CG_RequestUserMusicEdit(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAttendanceFortuneEventReward:
            ProcessReceivedMessage_CG_RequestAttendanceFortuneEventReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointGoldDonation:
            ProcessReceivedMessage_CG_RequestBasePointGoldDonation(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointSetTrigger:
            ProcessReceivedMessage_CG_RequestBasePointSetTrigger(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointDropInteractiveOpen:
            ProcessReceivedMessage_CG_RequestBasePointDropInteractiveOpen(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointUniqueInteractiveOpen:
            ProcessReceivedMessage_CG_RequestBasePointUniqueInteractiveOpen(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointDailyReward:
            ProcessReceivedMessage_CG_RequestBasePointDailyReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointDonationEventReward:
            ProcessReceivedMessage_CG_RequestBasePointDonationEventReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointDonationInfo:
            ProcessReceivedMessage_CG_RequestBasePointDonationInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBasePointEventGoldDonation:
            ProcessReceivedMessage_CG_RequestBasePointEventGoldDonation(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventBasepointInfo:
            ProcessReceivedMessage_CG_RequestEventBasepointInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroySetInviteOption:
            ProcessReceivedMessage_CG_RequestDestroySetInviteOption(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyGetUserLoginList:
            ProcessReceivedMessage_CG_RequestDestroyGetUserLoginList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyGetFriendLoginList:
            ProcessReceivedMessage_CG_RequestDestroyGetFriendLoginList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyGetGuildLoginList:
            ProcessReceivedMessage_CG_RequestDestroyGetGuildLoginList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyGetReceivedInvitationList:
            ProcessReceivedMessage_CG_RequestDestroyGetReceivedInvitationList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyInvite:
            ProcessReceivedMessage_CG_RequestDestroyInvite(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyRemoveInvitation:
            ProcessReceivedMessage_CG_RequestDestroyRemoveInvitation(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyRemoveJoinInfo:
            ProcessReceivedMessage_CG_RequestDestroyRemoveJoinInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyCreate:
            ProcessReceivedMessage_CG_RequestDestroyCreate(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyJoin:
            ProcessReceivedMessage_CG_RequestDestroyJoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyStart:
            ProcessReceivedMessage_CG_RequestDestroyStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyBattleStart:
            ProcessReceivedMessage_CG_RequestDestroyBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyClear:
            ProcessReceivedMessage_CG_RequestDestroyClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyReJoin:
            ProcessReceivedMessage_CG_RequestDestroyReJoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyRemove:
            ProcessReceivedMessage_CG_RequestDestroyRemove(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyBattleEnd:
            ProcessReceivedMessage_CG_RequestDestroyBattleEnd(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyInviteAI:
            ProcessReceivedMessage_CG_RequestDestroyInviteAI(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestDestroyKickOutAI:
            ProcessReceivedMessage_CG_RequestDestroyKickOutAI(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventDestroyCreate:
            ProcessReceivedMessage_CG_RequestEventDestroyCreate(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventDestroyStart:
            ProcessReceivedMessage_CG_RequestEventDestroyStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventDestroyClear:
            ProcessReceivedMessage_CG_RequestEventDestroyClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventDestroyRemove:
            ProcessReceivedMessage_CG_RequestEventDestroyRemove(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventChallengeDestroyCreate:
            ProcessReceivedMessage_CG_RequestEventChallengeDestroyCreate(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventChallengeDestroyStart:
            ProcessReceivedMessage_CG_RequestEventChallengeDestroyStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventChallengeDestroyClear:
            ProcessReceivedMessage_CG_RequestEventChallengeDestroyClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventChallengeDestroyPointRefresh:
            ProcessReceivedMessage_CG_RequestEventChallengeDestroyPointRefresh(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventChallengeDestroyUserReward:
            ProcessReceivedMessage_CG_RequestEventChallengeDestroyUserReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventChallengeDestroyWorldReward:
            ProcessReceivedMessage_CG_RequestEventChallengeDestroyWorldReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendList:
            ProcessReceivedMessage_CG_RequestFriendList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendGuildInfo:
            ProcessReceivedMessage_CG_RequestFriendGuildInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendApplySendList:
            ProcessReceivedMessage_CG_RequestFriendApplySendList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendApplyReceiveList:
            ProcessReceivedMessage_CG_RequestFriendApplyReceiveList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendApplySend:
            ProcessReceivedMessage_CG_RequestFriendApplySend(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendApplyReject:
            ProcessReceivedMessage_CG_RequestFriendApplyReject(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendApplyReceiveAccept:
            ProcessReceivedMessage_CG_RequestFriendApplyReceiveAccept(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendApplyReceiveAcceptList:
            ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendApplyReceiveRefuse:
            ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuse(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendApplyReceiveRefuseList:
            ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendRemove:
            ProcessReceivedMessage_CG_RequestFriendRemove(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendSearch:
            ProcessReceivedMessage_CG_RequestFriendSearch(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendVisit:
            ProcessReceivedMessage_CG_RequestFriendVisit(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendPointSend:
            ProcessReceivedMessage_CG_RequestFriendPointSend(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendPointSendAll:
            ProcessReceivedMessage_CG_RequestFriendPointSendAll(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendLobbyInfo:
            ProcessReceivedMessage_CG_RequestFriendLobbyInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendCookingRecipeInfo:
            ProcessReceivedMessage_CG_RequestFriendCookingRecipeInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendCookingEat:
            ProcessReceivedMessage_CG_RequestFriendCookingEat(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendCookingEatFriendList:
            ProcessReceivedMessage_CG_RequestFriendCookingEatFriendList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildRecommendList:
            ProcessReceivedMessage_CG_RequestGuildRecommendList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildInfoWithMemberList:
            ProcessReceivedMessage_CG_RequestGuildInfoWithMemberList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildSearchByName:
            ProcessReceivedMessage_CG_RequestGuildSearchByName(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildCreate:
            ProcessReceivedMessage_CG_RequestGuildCreate(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildDisband:
            ProcessReceivedMessage_CG_RequestGuildDisband(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildApplicantList:
            ProcessReceivedMessage_CG_RequestGuildApplicantList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildApply:
            ProcessReceivedMessage_CG_RequestGuildApply(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildReturnApplication:
            ProcessReceivedMessage_CG_RequestGuildReturnApplication(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildAcceptApplicant:
            ProcessReceivedMessage_CG_RequestGuildAcceptApplicant(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildRejectApplicant:
            ProcessReceivedMessage_CG_RequestGuildRejectApplicant(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildLevelUp:
            ProcessReceivedMessage_CG_RequestGuildLevelUp(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildChangeName:
            ProcessReceivedMessage_CG_RequestGuildChangeName(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildChangeBoard:
            ProcessReceivedMessage_CG_RequestGuildChangeBoard(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildChangeMaster:
            ProcessReceivedMessage_CG_RequestGuildChangeMaster(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildChangeMemberGrade:
            ProcessReceivedMessage_CG_RequestGuildChangeMemberGrade(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildKickOutMember:
            ProcessReceivedMessage_CG_RequestGuildKickOutMember(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildLeave:
            ProcessReceivedMessage_CG_RequestGuildLeave(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildRoomInfo:
            ProcessReceivedMessage_CG_RequestGuildRoomInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildAttendance:
            ProcessReceivedMessage_CG_RequestGuildAttendance(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildAttendanceReward:
            ProcessReceivedMessage_CG_RequestGuildAttendanceReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildUserInfo:
            ProcessReceivedMessage_CG_RequestGuildUserInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildAttendanceStatus:
            ProcessReceivedMessage_CG_RequestGuildAttendanceStatus(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildDonation:
            ProcessReceivedMessage_CG_RequestGuildDonation(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildDonationInitialize:
            ProcessReceivedMessage_CG_RequestGuildDonationInitialize(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildMissionInfo:
            ProcessReceivedMessage_CG_RequestGuildMissionInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildMissionReward:
            ProcessReceivedMessage_CG_RequestGuildMissionReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildDonationInfo:
            ProcessReceivedMessage_CG_RequestGuildDonationInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildSkillInfo:
            ProcessReceivedMessage_CG_RequestGuildSkillInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildSkillLevelUp:
            ProcessReceivedMessage_CG_RequestGuildSkillLevelUp(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildSkillUse:
            ProcessReceivedMessage_CG_RequestGuildSkillUse(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildSkillDisuse:
            ProcessReceivedMessage_CG_RequestGuildSkillDisuse(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildSkillUseInfo:
            ProcessReceivedMessage_CG_RequestGuildSkillUseInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildMemberRankPointReward:
            ProcessReceivedMessage_CG_RequestGuildMemberRankPointReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildBattlePointRegister:
            ProcessReceivedMessage_CG_RequestGuildBattlePointRegister(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildBattlePointMemeberRankList:
            ProcessReceivedMessage_CG_RequestGuildBattlePointMemeberRankList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildBattlePointGuildRankList:
            ProcessReceivedMessage_CG_RequestGuildBattlePointGuildRankList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildBattlePointUserRankList:
            ProcessReceivedMessage_CG_RequestGuildBattlePointUserRankList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestAPRechargeByUseItem:
            ProcessReceivedMessage_CG_RequestAPRechargeByUseItem(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWeekStageKeyOpen:
            ProcessReceivedMessage_CG_RequestWeekStageKeyOpen(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFoodBuffAutoUseOnOff:
            ProcessReceivedMessage_CG_RequestFoodBuffAutoUseOnOff(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemUseRankExp:
            ProcessReceivedMessage_CG_RequestItemUseRankExp(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemUseBoxOpen:
            ProcessReceivedMessage_CG_RequestItemUseBoxOpen(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemUseRecipeExp:
            ProcessReceivedMessage_CG_RequestItemUseRecipeExp(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemUseWeeklyKeyBox:
            ProcessReceivedMessage_CG_RequestItemUseWeeklyKeyBox(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemUseWeaponTicket:
            ProcessReceivedMessage_CG_RequestItemUseWeaponTicket(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestItemUseMusic:
            ProcessReceivedMessage_CG_RequestItemUseMusic(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTutorialAddStep:
            ProcessReceivedMessage_CG_RequestTutorialAddStep(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTutorialSetFlag:
            ProcessReceivedMessage_CG_RequestTutorialSetFlag(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTutorialHeroFlag:
            ProcessReceivedMessage_CG_RequestTutorialHeroFlag(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTutorialGambleShopBuy:
            ProcessReceivedMessage_CG_RequestTutorialGambleShopBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBattleTutorialInfo:
            ProcessReceivedMessage_CG_RequestBattleTutorialInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBattleTutorialSet:
            ProcessReceivedMessage_CG_RequestBattleTutorialSet(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchCreate:
            ProcessReceivedMessage_CG_RequestFriendlyMatchCreate(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchFriendList:
            ProcessReceivedMessage_CG_RequestFriendlyMatchFriendList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchInvite:
            ProcessReceivedMessage_CG_RequestFriendlyMatchInvite(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchReceivedInviteList:
            ProcessReceivedMessage_CG_RequestFriendlyMatchReceivedInviteList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchInviteAccept:
            ProcessReceivedMessage_CG_RequestFriendlyMatchInviteAccept(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchInviteReject:
            ProcessReceivedMessage_CG_RequestFriendlyMatchInviteReject(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchStart:
            ProcessReceivedMessage_CG_RequestFriendlyMatchStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchBattleStart:
            ProcessReceivedMessage_CG_RequestFriendlyMatchBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchClear:
            ProcessReceivedMessage_CG_RequestFriendlyMatchClear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchExit:
            ProcessReceivedMessage_CG_RequestFriendlyMatchExit(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestFriendlyMatchSetInviteOption:
            ProcessReceivedMessage_CG_RequestFriendlyMatchSetInviteOption(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventSeasonPassInfo:
            ProcessReceivedMessage_CG_RequestEventSeasonPassInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventSeasonPassRankUpReward:
            ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventSeasonPassRankUpRewardAll:
            ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardAll(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventSeasonPassRankBuy:
            ProcessReceivedMessage_CG_RequestEventSeasonPassRankBuy(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWestSideServerInfo_Random:
            ProcessReceivedMessage_CG_RequestWestSideServerInfo_Random(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWestSideServerInfo_Fixed:
            ProcessReceivedMessage_CG_RequestWestSideServerInfo_Fixed(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWestSideServerInfo_Recommand:
            ProcessReceivedMessage_CG_RequestWestSideServerInfo_Recommand(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWestSide_PlayerInfo:
            ProcessReceivedMessage_CG_RequestWestSide_PlayerInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWestSide_PlayerteamInfo:
            ProcessReceivedMessage_CG_RequestWestSide_PlayerteamInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWestSide_PlayerGuildInfo:
            ProcessReceivedMessage_CG_RequestWestSide_PlayerGuildInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestWorldChattingChannel:
            ProcessReceivedMessage_CG_RequestWorldChattingChannel(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLobbyInfo:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLobbyInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpJoin:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpJoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpTopRankerList:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpTopRankerList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLastRankerList:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpMatching:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpMatching(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpBattleStart:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpBattleEnd:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpBattleEnd(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpRollback:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpRollback(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpIngameBattleStart:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpIngameBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLowerLobbyInfo:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerLobbyInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLowerJoin:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerJoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLowerTopRankerList:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerTopRankerList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLowerMatching:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerMatching(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLowerBattleStart:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLowerBattleEnd:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerBattleEnd(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpAllInfo:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpAllInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLastRankerBattleInfo:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerBattleInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLastRankerBattleStart:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLowerRollback:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerRollback(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimePvpLowerIngameBattleStart:
            ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerIngameBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionLobbyInfo:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionLobbyInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionJoin:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionJoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionTopRankerList:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionTopRankerList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionMatching:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionMatching(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionBattleEnd:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionBattleEnd(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionIngameBattleStart:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionIngameBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionHistory:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionHistory(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionChangeMatchingList:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionChangeMatchingList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestArenaRealTimeDecisionMatchingSimpleInfo:
            ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPvpSeasonInfo:
            ProcessReceivedMessage_CG_RequestPvpSeasonInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPvpSeasonHistory:
            ProcessReceivedMessage_CG_RequestPvpSeasonHistory(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarCreate:
            ProcessReceivedMessage_CG_RequestBossWarCreate(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarJoin:
            ProcessReceivedMessage_CG_RequestBossWarJoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarStart:
            ProcessReceivedMessage_CG_RequestBossWarStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarOnlineFriendList:
            ProcessReceivedMessage_CG_RequestBossWarOnlineFriendList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarOnlineGuildMemberList:
            ProcessReceivedMessage_CG_RequestBossWarOnlineGuildMemberList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarOnlineUserRankRangeList:
            ProcessReceivedMessage_CG_RequestBossWarOnlineUserRankRangeList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarInvitationReceiveList:
            ProcessReceivedMessage_CG_RequestBossWarInvitationReceiveList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarRemoveInvitation:
            ProcessReceivedMessage_CG_RequestBossWarRemoveInvitation(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarInvite:
            ProcessReceivedMessage_CG_RequestBossWarInvite(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarKickOut:
            ProcessReceivedMessage_CG_RequestBossWarKickOut(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarReady:
            ProcessReceivedMessage_CG_RequestBossWarReady(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarReturnReady:
            ProcessReceivedMessage_CG_RequestBossWarReturnReady(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarLeave:
            ProcessReceivedMessage_CG_RequestBossWarLeave(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarBattleStart:
            ProcessReceivedMessage_CG_RequestBossWarBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarBattleSync:
            ProcessReceivedMessage_CG_RequestBossWarBattleSync(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarBattleEnd:
            ProcessReceivedMessage_CG_RequestBossWarBattleEnd(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestBossWarReward:
            ProcessReceivedMessage_CG_RequestBossWarReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventExchangeInfo:
            ProcessReceivedMessage_CG_RequestEventExchangeInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventExchangeBoxGachaInfo:
            ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventExchangeBoxGachaPickup:
            ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaPickup(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventExchangeBoxGachaReset:
            ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaReset(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventPaybackReward:
            ProcessReceivedMessage_CG_RequestEventPaybackReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventSnsShareProgress:
            ProcessReceivedMessage_CG_RequestEventSnsShareProgress(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventSnsShareReward:
            ProcessReceivedMessage_CG_RequestEventSnsShareReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGagueEventInfo:
            ProcessReceivedMessage_CG_RequestGagueEventInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGagueEventCharge:
            ProcessReceivedMessage_CG_RequestGagueEventCharge(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGagueEventReward:
            ProcessReceivedMessage_CG_RequestGagueEventReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGagueEventReset:
            ProcessReceivedMessage_CG_RequestGagueEventReset(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventLadderReward:
            ProcessReceivedMessage_CG_RequestEventLadderReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventLobbyGiftReward:
            ProcessReceivedMessage_CG_RequestEventLobbyGiftReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventTimeMissionInfo:
            ProcessReceivedMessage_CG_RequestEventTimeMissionInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventTimeMissionStart:
            ProcessReceivedMessage_CG_RequestEventTimeMissionStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestEventLobbyDecorationReward:
            ProcessReceivedMessage_CG_RequestEventLobbyDecorationReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestRegistPlayTitle:
            ProcessReceivedMessage_CG_RequestRegistPlayTitle(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestPlayTitleMissionReward:
            ProcessReceivedMessage_CG_RequestPlayTitleMissionReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentList:
            ProcessReceivedMessage_CG_RequestTournamentList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentProgressInfo:
            ProcessReceivedMessage_CG_RequestTournamentProgressInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentResultInfo:
            ProcessReceivedMessage_CG_RequestTournamentResultInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentMatchJoin:
            ProcessReceivedMessage_CG_RequestTournamentMatchJoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentMatchBattleStart:
            ProcessReceivedMessage_CG_RequestTournamentMatchBattleStart(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentMatchBattleEnd:
            ProcessReceivedMessage_CG_RequestTournamentMatchBattleEnd(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentMatchExit:
            ProcessReceivedMessage_CG_RequestTournamentMatchExit(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentReward:
            ProcessReceivedMessage_CG_RequestTournamentReward(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentPlayerTeamSlotChange:
            ProcessReceivedMessage_CG_RequestTournamentPlayerTeamSlotChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentPlayerTeamInfo:
            ProcessReceivedMessage_CG_RequestTournamentPlayerTeamInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentCheer:
            ProcessReceivedMessage_CG_RequestTournamentCheer(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentCheerList:
            ProcessReceivedMessage_CG_RequestTournamentCheerList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentWatcherJoin:
            ProcessReceivedMessage_CG_RequestTournamentWatcherJoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentWatcherExit:
            ProcessReceivedMessage_CG_RequestTournamentWatcherExit(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentMatchPlayInfo:
            ProcessReceivedMessage_CG_RequestTournamentMatchPlayInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestTournamentReplayInfo:
            ProcessReceivedMessage_CG_RequestTournamentReplayInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarLobbyInfo:
            ProcessReceivedMessage_CG_RequestGuildWarLobbyInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarRankInfo:
            ProcessReceivedMessage_CG_RequestGuildWarRankInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarVersusRecordInfo:
            ProcessReceivedMessage_CG_RequestGuildWarVersusRecordInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarGuildMemberList:
            ProcessReceivedMessage_CG_RequestGuildWarGuildMemberList(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarWorldMapInfo:
            ProcessReceivedMessage_CG_RequestGuildWarWorldMapInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarAttackSquadChange:
            ProcessReceivedMessage_CG_RequestGuildWarAttackSquadChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarDefenceTeamChange:
            ProcessReceivedMessage_CG_RequestGuildWarDefenceTeamChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarRegionBonusScoreChange:
            ProcessReceivedMessage_CG_RequestGuildWarRegionBonusScoreChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarAreaGuildMemberChange:
            ProcessReceivedMessage_CG_RequestGuildWarAreaGuildMemberChange(__msg, pa, hostTag, remote);
            break;
        case Common.CG_RequestGuildWarBattleRecordInfo:
            ProcessReceivedMessage_CG_RequestGuildWarBattleRecordInfo(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildWar_Stage_Start:
            ProcessReceivedMessage_CG_Request_GuildWar_Stage_Start(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildWar_Stage_Clear:
            ProcessReceivedMessage_CG_Request_GuildWar_Stage_Clear(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildWar_Stage_Rejoin:
            ProcessReceivedMessage_CG_Request_GuildWar_Stage_Rejoin(__msg, pa, hostTag, remote);
            break;
        case Common.CG_Request_GuildWar_Stage_HeroStatus_Sync:
            ProcessReceivedMessage_CG_Request_GuildWar_Stage_HeroStatus_Sync(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_CG_RequestChannelUserInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string netamrblePlayerID; SimpleCSharp.Marshaler.Read(__msg,out netamrblePlayerID);	
SimpleCSharp.NetmarbleSDKInfo sdkInfo; SimpleCSharp.Marshaler.Read(__msg,out sdkInfo);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestChannelUserInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=netamrblePlayerID.ToString()+",";
parameterString+=sdkInfo.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestChannelUserInfo, RmiName_CG_RequestChannelUserInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestChannelUserInfo;
        summary.rmiName = RmiName_CG_RequestChannelUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestChannelUserInfo (remote,ctx , netamrblePlayerID, sdkInfo );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChannelUserInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestChannelUserInfo;
        summary.rmiName = RmiName_CG_RequestChannelUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestHeartBeat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeartBeat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestHeartBeat, RmiName_CG_RequestHeartBeat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestHeartBeat;
        summary.rmiName = RmiName_CG_RequestHeartBeat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestHeartBeat (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeartBeat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestHeartBeat;
        summary.rmiName = RmiName_CG_RequestHeartBeat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestChangeNickname(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string nickname; SimpleCSharp.Marshaler.Read(__msg,out nickname);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestChangeNickname);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=nickname.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestChangeNickname, RmiName_CG_RequestChangeNickname,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestChangeNickname;
        summary.rmiName = RmiName_CG_RequestChangeNickname;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestChangeNickname (remote,ctx , nickname );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChangeNickname);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestChangeNickname;
        summary.rmiName = RmiName_CG_RequestChangeNickname;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestChangeWantToSay(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestChangeWantToSay);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestChangeWantToSay, RmiName_CG_RequestChangeWantToSay,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestChangeWantToSay;
        summary.rmiName = RmiName_CG_RequestChangeWantToSay;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestChangeWantToSay (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChangeWantToSay);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestChangeWantToSay;
        summary.rmiName = RmiName_CG_RequestChangeWantToSay;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTeamInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTeamInfo, RmiName_CG_RequestTeamInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTeamInfo;
        summary.rmiName = RmiName_CG_RequestTeamInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTeamInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTeamInfo;
        summary.rmiName = RmiName_CG_RequestTeamInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTeamSlotChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        byte teamIndex; SimpleCSharp.Marshaler.Read(__msg,out teamIndex);	
List<SimpleCSharp.UserTeamSlot> mainSlotList; SimpleCSharp.Marshaler.Read(__msg,out mainSlotList);	
int battlePowerPoint; SimpleCSharp.Marshaler.Read(__msg,out battlePowerPoint);	
int buffID; SimpleCSharp.Marshaler.Read(__msg,out buffID);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamSlotChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=teamIndex.ToString()+",";
parameterString+=mainSlotList.ToString()+",";
parameterString+=battlePowerPoint.ToString()+",";
parameterString+=buffID.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestTeamSlotChange, RmiName_CG_RequestTeamSlotChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTeamSlotChange;
        summary.rmiName = RmiName_CG_RequestTeamSlotChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTeamSlotChange (remote,ctx , teamIndex, mainSlotList, battlePowerPoint, buffID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamSlotChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTeamSlotChange;
        summary.rmiName = RmiName_CG_RequestTeamSlotChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTeamNameChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamNameChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTeamNameChange, RmiName_CG_RequestTeamNameChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTeamNameChange;
        summary.rmiName = RmiName_CG_RequestTeamNameChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTeamNameChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamNameChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTeamNameChange;
        summary.rmiName = RmiName_CG_RequestTeamNameChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyInfo, RmiName_CG_RequestLobbyInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyInfo;
        summary.rmiName = RmiName_CG_RequestLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyInfo;
        summary.rmiName = RmiName_CG_RequestLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int basePointID; SimpleCSharp.Marshaler.Read(__msg,out basePointID);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=basePointID.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestBasePointInfo, RmiName_CG_RequestBasePointInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointInfo;
        summary.rmiName = RmiName_CG_RequestBasePointInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointInfo (remote,ctx , basePointID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointInfo;
        summary.rmiName = RmiName_CG_RequestBasePointInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMercenaryList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMercenaryList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMercenaryList, RmiName_CG_RequestMercenaryList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMercenaryList;
        summary.rmiName = RmiName_CG_RequestMercenaryList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMercenaryList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMercenaryList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMercenaryList;
        summary.rmiName = RmiName_CG_RequestMercenaryList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMercenaryInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMercenaryInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMercenaryInfo, RmiName_CG_RequestMercenaryInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMercenaryInfo;
        summary.rmiName = RmiName_CG_RequestMercenaryInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMercenaryInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMercenaryInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMercenaryInfo;
        summary.rmiName = RmiName_CG_RequestMercenaryInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildInfo, RmiName_CG_RequestGuildInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildInfo;
        summary.rmiName = RmiName_CG_RequestGuildInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildInfo;
        summary.rmiName = RmiName_CG_RequestGuildInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestChatStampUpdateBookmark(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestChatStampUpdateBookmark);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestChatStampUpdateBookmark, RmiName_CG_RequestChatStampUpdateBookmark,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestChatStampUpdateBookmark;
        summary.rmiName = RmiName_CG_RequestChatStampUpdateBookmark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestChatStampUpdateBookmark (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChatStampUpdateBookmark);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestChatStampUpdateBookmark;
        summary.rmiName = RmiName_CG_RequestChatStampUpdateBookmark;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestChatStampUpdateQuickMessage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestChatStampUpdateQuickMessage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestChatStampUpdateQuickMessage, RmiName_CG_RequestChatStampUpdateQuickMessage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestChatStampUpdateQuickMessage;
        summary.rmiName = RmiName_CG_RequestChatStampUpdateQuickMessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestChatStampUpdateQuickMessage (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChatStampUpdateQuickMessage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestChatStampUpdateQuickMessage;
        summary.rmiName = RmiName_CG_RequestChatStampUpdateQuickMessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMainSkinChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMainSkinChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMainSkinChange, RmiName_CG_RequestMainSkinChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMainSkinChange;
        summary.rmiName = RmiName_CG_RequestMainSkinChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMainSkinChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMainSkinChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMainSkinChange;
        summary.rmiName = RmiName_CG_RequestMainSkinChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventList, RmiName_CG_RequestEventList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventList;
        summary.rmiName = RmiName_CG_RequestEventList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventList;
        summary.rmiName = RmiName_CG_RequestEventList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCheatEnter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCheatEnter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCheatEnter, RmiName_CG_RequestCheatEnter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCheatEnter;
        summary.rmiName = RmiName_CG_RequestCheatEnter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCheatEnter (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCheatEnter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCheatEnter;
        summary.rmiName = RmiName_CG_RequestCheatEnter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCheatStageClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCheatStageClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCheatStageClear, RmiName_CG_RequestCheatStageClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCheatStageClear;
        summary.rmiName = RmiName_CG_RequestCheatStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCheatStageClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCheatStageClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCheatStageClear;
        summary.rmiName = RmiName_CG_RequestCheatStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDllGetItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDllGetItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDllGetItem, RmiName_CG_RequestDllGetItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDllGetItem;
        summary.rmiName = RmiName_CG_RequestDllGetItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDllGetItem (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDllGetItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDllGetItem;
        summary.rmiName = RmiName_CG_RequestDllGetItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRecommendFriendUSNList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRecommendFriendUSNList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRecommendFriendUSNList, RmiName_CG_RequestRecommendFriendUSNList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRecommendFriendUSNList;
        summary.rmiName = RmiName_CG_RequestRecommendFriendUSNList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRecommendFriendUSNList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRecommendFriendUSNList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRecommendFriendUSNList;
        summary.rmiName = RmiName_CG_RequestRecommendFriendUSNList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDailyReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDailyReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDailyReset, RmiName_CG_RequestDailyReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDailyReset;
        summary.rmiName = RmiName_CG_RequestDailyReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDailyReset (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDailyReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDailyReset;
        summary.rmiName = RmiName_CG_RequestDailyReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFrozenAssetRedeem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFrozenAssetRedeem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFrozenAssetRedeem, RmiName_CG_RequestFrozenAssetRedeem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFrozenAssetRedeem;
        summary.rmiName = RmiName_CG_RequestFrozenAssetRedeem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFrozenAssetRedeem (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFrozenAssetRedeem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFrozenAssetRedeem;
        summary.rmiName = RmiName_CG_RequestFrozenAssetRedeem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSecurityToken(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSecurityToken);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSecurityToken, RmiName_CG_RequestSecurityToken,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSecurityToken;
        summary.rmiName = RmiName_CG_RequestSecurityToken;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSecurityToken (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSecurityToken);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSecurityToken;
        summary.rmiName = RmiName_CG_RequestSecurityToken;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestNetmarbleAuth(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string netmarblePlayerID; SimpleCSharp.Marshaler.Read(__msg,out netmarblePlayerID);	
string gametoken; SimpleCSharp.Marshaler.Read(__msg,out gametoken);	
string securityCertValue; SimpleCSharp.Marshaler.Read(__msg,out securityCertValue);	
int versionNumber; SimpleCSharp.Marshaler.Read(__msg,out versionNumber);	
SimpleCSharp.ClientDeviceType deviceType; SimpleCSharp.Marshaler.Read(__msg,out deviceType);	
int signType; SimpleCSharp.Marshaler.Read(__msg,out signType);	
SimpleCSharp.NetmarbleSDKInfo sdkInfo; SimpleCSharp.Marshaler.Read(__msg,out sdkInfo);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestNetmarbleAuth);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=netmarblePlayerID.ToString()+",";
parameterString+=gametoken.ToString()+",";
parameterString+=securityCertValue.ToString()+",";
parameterString+=versionNumber.ToString()+",";
parameterString+=deviceType.ToString()+",";
parameterString+=signType.ToString()+",";
parameterString+=sdkInfo.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestNetmarbleAuth, RmiName_CG_RequestNetmarbleAuth,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestNetmarbleAuth;
        summary.rmiName = RmiName_CG_RequestNetmarbleAuth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestNetmarbleAuth (remote,ctx , netmarblePlayerID, gametoken, securityCertValue, versionNumber, deviceType, signType, sdkInfo );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNetmarbleAuth);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestNetmarbleAuth;
        summary.rmiName = RmiName_CG_RequestNetmarbleAuth;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAuthenticateCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string netmarblePlayerID; SimpleCSharp.Marshaler.Read(__msg,out netmarblePlayerID);	
SimpleCSharp.NetmarbleSDKInfo sdkInfo; SimpleCSharp.Marshaler.Read(__msg,out sdkInfo);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestAuthenticateCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=netmarblePlayerID.ToString()+",";
parameterString+=sdkInfo.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestAuthenticateCreate, RmiName_CG_RequestAuthenticateCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAuthenticateCreate;
        summary.rmiName = RmiName_CG_RequestAuthenticateCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAuthenticateCreate (remote,ctx , netmarblePlayerID, sdkInfo );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAuthenticateCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAuthenticateCreate;
        summary.rmiName = RmiName_CG_RequestAuthenticateCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEditorUserInfoByNickName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEditorUserInfoByNickName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEditorUserInfoByNickName, RmiName_CG_RequestEditorUserInfoByNickName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEditorUserInfoByNickName;
        summary.rmiName = RmiName_CG_RequestEditorUserInfoByNickName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEditorUserInfoByNickName (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEditorUserInfoByNickName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEditorUserInfoByNickName;
        summary.rmiName = RmiName_CG_RequestEditorUserInfoByNickName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLogin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        long usn; SimpleCSharp.Marshaler.Read(__msg,out usn);	
SimpleCSharp.NetmarbleSDKInfo sdkInfo; SimpleCSharp.Marshaler.Read(__msg,out sdkInfo);	
SimpleCSharp.VersionInfo versionInfo; SimpleCSharp.Marshaler.Read(__msg,out versionInfo);	
string rejoinData; SimpleCSharp.Marshaler.Read(__msg,out rejoinData);	
long clientTimeTick; SimpleCSharp.Marshaler.Read(__msg,out clientTimeTick);	
string patchName; SimpleCSharp.Marshaler.Read(__msg,out patchName);	
string patchData; SimpleCSharp.Marshaler.Read(__msg,out patchData);	
SimpleCSharp.LanguageType languageType; SimpleCSharp.Marshaler.Read(__msg,out languageType);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestLogin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=usn.ToString()+",";
parameterString+=sdkInfo.ToString()+",";
parameterString+=versionInfo.ToString()+",";
parameterString+=rejoinData.ToString()+",";
parameterString+=clientTimeTick.ToString()+",";
parameterString+=patchName.ToString()+",";
parameterString+=patchData.ToString()+",";
parameterString+=languageType.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestLogin, RmiName_CG_RequestLogin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLogin;
        summary.rmiName = RmiName_CG_RequestLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLogin (remote,ctx , usn, sdkInfo, versionInfo, rejoinData, clientTimeTick, patchName, patchData, languageType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLogin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLogin;
        summary.rmiName = RmiName_CG_RequestLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLoginInstantly(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLoginInstantly);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLoginInstantly, RmiName_CG_RequestLoginInstantly,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLoginInstantly;
        summary.rmiName = RmiName_CG_RequestLoginInstantly;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLoginInstantly (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLoginInstantly);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLoginInstantly;
        summary.rmiName = RmiName_CG_RequestLoginInstantly;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RetryRequest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RetryRequest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RetryRequest, RmiName_CG_RetryRequest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RetryRequest;
        summary.rmiName = RmiName_CG_RetryRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RetryRequest (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RetryRequest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RetryRequest;
        summary.rmiName = RmiName_CG_RetryRequest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBillingInitialize(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingInitialize);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingInitialize, RmiName_CG_RequestBillingInitialize,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBillingInitialize;
        summary.rmiName = RmiName_CG_RequestBillingInitialize;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBillingInitialize (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingInitialize);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBillingInitialize;
        summary.rmiName = RmiName_CG_RequestBillingInitialize;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBillingVerifyPU(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingVerifyPU);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingVerifyPU, RmiName_CG_RequestBillingVerifyPU,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBillingVerifyPU;
        summary.rmiName = RmiName_CG_RequestBillingVerifyPU;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBillingVerifyPU (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingVerifyPU);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBillingVerifyPU;
        summary.rmiName = RmiName_CG_RequestBillingVerifyPU;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBillingRemainTR(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingRemainTR);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingRemainTR, RmiName_CG_RequestBillingRemainTR,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBillingRemainTR;
        summary.rmiName = RmiName_CG_RequestBillingRemainTR;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBillingRemainTR (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingRemainTR);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBillingRemainTR;
        summary.rmiName = RmiName_CG_RequestBillingRemainTR;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBillingCouponVerify(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        SimpleCSharp.BillingVerifyType verifyType; SimpleCSharp.Marshaler.Read(__msg,out verifyType);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingCouponVerify);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=verifyType.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestBillingCouponVerify, RmiName_CG_RequestBillingCouponVerify,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBillingCouponVerify;
        summary.rmiName = RmiName_CG_RequestBillingCouponVerify;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBillingCouponVerify (remote,ctx , verifyType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingCouponVerify);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBillingCouponVerify;
        summary.rmiName = RmiName_CG_RequestBillingCouponVerify;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBillingCrossPromotion(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingCrossPromotion);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingCrossPromotion, RmiName_CG_RequestBillingCrossPromotion,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBillingCrossPromotion;
        summary.rmiName = RmiName_CG_RequestBillingCrossPromotion;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBillingCrossPromotion (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingCrossPromotion);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBillingCrossPromotion;
        summary.rmiName = RmiName_CG_RequestBillingCrossPromotion;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBillingPackageShop(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingPackageShop);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingPackageShop, RmiName_CG_RequestBillingPackageShop,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBillingPackageShop;
        summary.rmiName = RmiName_CG_RequestBillingPackageShop;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBillingPackageShop (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingPackageShop);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBillingPackageShop;
        summary.rmiName = RmiName_CG_RequestBillingPackageShop;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAgeInput(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestAgeInput);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAgeInput, RmiName_CG_RequestAgeInput,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAgeInput;
        summary.rmiName = RmiName_CG_RequestAgeInput;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAgeInput (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAgeInput);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAgeInput;
        summary.rmiName = RmiName_CG_RequestAgeInput;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSDKInfoChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSDKInfoChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSDKInfoChange, RmiName_CG_RequestSDKInfoChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSDKInfoChange;
        summary.rmiName = RmiName_CG_RequestSDKInfoChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSDKInfoChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSDKInfoChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSDKInfoChange;
        summary.rmiName = RmiName_CG_RequestSDKInfoChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinLevelUpBySkinMaterial(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinLevelUpBySkinMaterial);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinLevelUpBySkinMaterial, RmiName_CG_RequestSkinLevelUpBySkinMaterial,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinLevelUpBySkinMaterial;
        summary.rmiName = RmiName_CG_RequestSkinLevelUpBySkinMaterial;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinLevelUpBySkinMaterial (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinLevelUpBySkinMaterial);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinLevelUpBySkinMaterial;
        summary.rmiName = RmiName_CG_RequestSkinLevelUpBySkinMaterial;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinResearch(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinResearch);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinResearch, RmiName_CG_RequestSkinResearch,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinResearch;
        summary.rmiName = RmiName_CG_RequestSkinResearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinResearch (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinResearch);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinResearch;
        summary.rmiName = RmiName_CG_RequestSkinResearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinResearchInit(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinResearchInit);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinResearchInit, RmiName_CG_RequestSkinResearchInit,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinResearchInit;
        summary.rmiName = RmiName_CG_RequestSkinResearchInit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinResearchInit (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinResearchInit);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinResearchInit;
        summary.rmiName = RmiName_CG_RequestSkinResearchInit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinMaterialGrind(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaterialGrind);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinMaterialGrind, RmiName_CG_RequestSkinMaterialGrind,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinMaterialGrind;
        summary.rmiName = RmiName_CG_RequestSkinMaterialGrind;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinMaterialGrind (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaterialGrind);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinMaterialGrind;
        summary.rmiName = RmiName_CG_RequestSkinMaterialGrind;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinAwaken(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinAwaken);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinAwaken, RmiName_CG_RequestSkinAwaken,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinAwaken;
        summary.rmiName = RmiName_CG_RequestSkinAwaken;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinAwaken (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinAwaken);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinAwaken;
        summary.rmiName = RmiName_CG_RequestSkinAwaken;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinHeadStyleChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinHeadStyleChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinHeadStyleChange, RmiName_CG_RequestSkinHeadStyleChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinHeadStyleChange;
        summary.rmiName = RmiName_CG_RequestSkinHeadStyleChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinHeadStyleChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinHeadStyleChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinHeadStyleChange;
        summary.rmiName = RmiName_CG_RequestSkinHeadStyleChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinEvolution(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinEvolution);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinEvolution, RmiName_CG_RequestSkinEvolution,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinEvolution;
        summary.rmiName = RmiName_CG_RequestSkinEvolution;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinEvolution (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinEvolution);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinEvolution;
        summary.rmiName = RmiName_CG_RequestSkinEvolution;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinSkillLevelUp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinSkillLevelUp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinSkillLevelUp, RmiName_CG_RequestSkinSkillLevelUp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinSkillLevelUp;
        summary.rmiName = RmiName_CG_RequestSkinSkillLevelUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinSkillLevelUp (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinSkillLevelUp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinSkillLevelUp;
        summary.rmiName = RmiName_CG_RequestSkinSkillLevelUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinGiveFellowshipExp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinGiveFellowshipExp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinGiveFellowshipExp, RmiName_CG_RequestSkinGiveFellowshipExp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinGiveFellowshipExp;
        summary.rmiName = RmiName_CG_RequestSkinGiveFellowshipExp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinGiveFellowshipExp (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinGiveFellowshipExp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinGiveFellowshipExp;
        summary.rmiName = RmiName_CG_RequestSkinGiveFellowshipExp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinFellowshipLevelUpReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinFellowshipLevelUpReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinFellowshipLevelUpReward, RmiName_CG_RequestSkinFellowshipLevelUpReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinFellowshipLevelUpReward;
        summary.rmiName = RmiName_CG_RequestSkinFellowshipLevelUpReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinFellowshipLevelUpReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinFellowshipLevelUpReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinFellowshipLevelUpReward;
        summary.rmiName = RmiName_CG_RequestSkinFellowshipLevelUpReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeEquip, RmiName_CG_RequestCostumeEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeEquip;
        summary.rmiName = RmiName_CG_RequestCostumeEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeEquip (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeEquip;
        summary.rmiName = RmiName_CG_RequestCostumeEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeUnEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeUnEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeUnEquip, RmiName_CG_RequestCostumeUnEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeUnEquip;
        summary.rmiName = RmiName_CG_RequestCostumeUnEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeUnEquip (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeUnEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeUnEquip;
        summary.rmiName = RmiName_CG_RequestCostumeUnEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeUnLock(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        List<int> targetHeroIDList; SimpleCSharp.Marshaler.Read(__msg,out targetHeroIDList);	
List<int> costumeGroupIDList; SimpleCSharp.Marshaler.Read(__msg,out costumeGroupIDList);	
List<int> targetHeroGroupIDList; SimpleCSharp.Marshaler.Read(__msg,out targetHeroGroupIDList);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeUnLock);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=targetHeroIDList.ToString()+",";
parameterString+=costumeGroupIDList.ToString()+",";
parameterString+=targetHeroGroupIDList.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestCostumeUnLock, RmiName_CG_RequestCostumeUnLock,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeUnLock;
        summary.rmiName = RmiName_CG_RequestCostumeUnLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeUnLock (remote,ctx , targetHeroIDList, costumeGroupIDList, targetHeroGroupIDList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeUnLock);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeUnLock;
        summary.rmiName = RmiName_CG_RequestCostumeUnLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinOverEvolution(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinOverEvolution);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinOverEvolution, RmiName_CG_RequestSkinOverEvolution,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinOverEvolution;
        summary.rmiName = RmiName_CG_RequestSkinOverEvolution;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinOverEvolution (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinOverEvolution);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinOverEvolution;
        summary.rmiName = RmiName_CG_RequestSkinOverEvolution;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinMaxAwakenReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaxAwakenReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinMaxAwakenReward, RmiName_CG_RequestSkinMaxAwakenReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinMaxAwakenReward;
        summary.rmiName = RmiName_CG_RequestSkinMaxAwakenReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinMaxAwakenReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaxAwakenReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinMaxAwakenReward;
        summary.rmiName = RmiName_CG_RequestSkinMaxAwakenReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeRegister(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeRegister);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeRegister, RmiName_CG_RequestCostumeRegister,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeRegister;
        summary.rmiName = RmiName_CG_RequestCostumeRegister;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeRegister (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeRegister);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeRegister;
        summary.rmiName = RmiName_CG_RequestCostumeRegister;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinLoveReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinLoveReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinLoveReward, RmiName_CG_RequestSkinLoveReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinLoveReward;
        summary.rmiName = RmiName_CG_RequestSkinLoveReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinLoveReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinLoveReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinLoveReward;
        summary.rmiName = RmiName_CG_RequestSkinLoveReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeAutoRegister(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        List<SimpleCSharp.CostumeAutoRegisterInfo> registerInfoList; SimpleCSharp.Marshaler.Read(__msg,out registerInfoList);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeAutoRegister);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=registerInfoList.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestCostumeAutoRegister, RmiName_CG_RequestCostumeAutoRegister,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeAutoRegister;
        summary.rmiName = RmiName_CG_RequestCostumeAutoRegister;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeAutoRegister (remote,ctx , registerInfoList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeAutoRegister);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeAutoRegister;
        summary.rmiName = RmiName_CG_RequestCostumeAutoRegister;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestStoryCostume(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        List<int> idList; SimpleCSharp.Marshaler.Read(__msg,out idList);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestStoryCostume);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=idList.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestStoryCostume, RmiName_CG_RequestStoryCostume,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestStoryCostume;
        summary.rmiName = RmiName_CG_RequestStoryCostume;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestStoryCostume (remote,ctx , idList );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStoryCostume);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestStoryCostume;
        summary.rmiName = RmiName_CG_RequestStoryCostume;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeLevelUp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeLevelUp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeLevelUp, RmiName_CG_RequestCostumeLevelUp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeLevelUp;
        summary.rmiName = RmiName_CG_RequestCostumeLevelUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeLevelUp (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeLevelUp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeLevelUp;
        summary.rmiName = RmiName_CG_RequestCostumeLevelUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestSkinMaxAwaken(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaxAwaken);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinMaxAwaken, RmiName_CG_RequestSkinMaxAwaken,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestSkinMaxAwaken;
        summary.rmiName = RmiName_CG_RequestSkinMaxAwaken;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestSkinMaxAwaken (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaxAwaken);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestSkinMaxAwaken;
        summary.rmiName = RmiName_CG_RequestSkinMaxAwaken;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEquip, RmiName_CG_RequestWeaponEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEquip;
        summary.rmiName = RmiName_CG_RequestWeaponEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponEquip (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEquip;
        summary.rmiName = RmiName_CG_RequestWeaponEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponUnEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponUnEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponUnEquip, RmiName_CG_RequestWeaponUnEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponUnEquip;
        summary.rmiName = RmiName_CG_RequestWeaponUnEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponUnEquip (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponUnEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponUnEquip;
        summary.rmiName = RmiName_CG_RequestWeaponUnEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponSell(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponSell);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponSell, RmiName_CG_RequestWeaponSell,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponSell;
        summary.rmiName = RmiName_CG_RequestWeaponSell;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponSell (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponSell);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponSell;
        summary.rmiName = RmiName_CG_RequestWeaponSell;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponGrind(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponGrind);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponGrind, RmiName_CG_RequestWeaponGrind,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponGrind;
        summary.rmiName = RmiName_CG_RequestWeaponGrind;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponGrind (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponGrind);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponGrind;
        summary.rmiName = RmiName_CG_RequestWeaponGrind;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponUpgrade(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponUpgrade);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponUpgrade, RmiName_CG_RequestWeaponUpgrade,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponUpgrade;
        summary.rmiName = RmiName_CG_RequestWeaponUpgrade;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponUpgrade (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponUpgrade);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponUpgrade;
        summary.rmiName = RmiName_CG_RequestWeaponUpgrade;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponUpgradeRetry(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponUpgradeRetry);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponUpgradeRetry, RmiName_CG_RequestWeaponUpgradeRetry,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponUpgradeRetry;
        summary.rmiName = RmiName_CG_RequestWeaponUpgradeRetry;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponUpgradeRetry (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponUpgradeRetry);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponUpgradeRetry;
        summary.rmiName = RmiName_CG_RequestWeaponUpgradeRetry;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponEvolution(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEvolution);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEvolution, RmiName_CG_RequestWeaponEvolution,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEvolution;
        summary.rmiName = RmiName_CG_RequestWeaponEvolution;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponEvolution (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEvolution);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEvolution;
        summary.rmiName = RmiName_CG_RequestWeaponEvolution;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponEvolutionRetry(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEvolutionRetry);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEvolutionRetry, RmiName_CG_RequestWeaponEvolutionRetry,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEvolutionRetry;
        summary.rmiName = RmiName_CG_RequestWeaponEvolutionRetry;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponEvolutionRetry (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEvolutionRetry);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEvolutionRetry;
        summary.rmiName = RmiName_CG_RequestWeaponEvolutionRetry;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponOptionEnhance(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponOptionEnhance);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponOptionEnhance, RmiName_CG_RequestWeaponOptionEnhance,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponOptionEnhance;
        summary.rmiName = RmiName_CG_RequestWeaponOptionEnhance;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponOptionEnhance (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponOptionEnhance);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponOptionEnhance;
        summary.rmiName = RmiName_CG_RequestWeaponOptionEnhance;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponLock(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponLock);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponLock, RmiName_CG_RequestWeaponLock,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponLock;
        summary.rmiName = RmiName_CG_RequestWeaponLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponLock (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponLock);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponLock;
        summary.rmiName = RmiName_CG_RequestWeaponLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponUnLock(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponUnLock);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponUnLock, RmiName_CG_RequestWeaponUnLock,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponUnLock;
        summary.rmiName = RmiName_CG_RequestWeaponUnLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponUnLock (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponUnLock);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponUnLock;
        summary.rmiName = RmiName_CG_RequestWeaponUnLock;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponEquipExchange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEquipExchange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEquipExchange, RmiName_CG_RequestWeaponEquipExchange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEquipExchange;
        summary.rmiName = RmiName_CG_RequestWeaponEquipExchange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponEquipExchange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEquipExchange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEquipExchange;
        summary.rmiName = RmiName_CG_RequestWeaponEquipExchange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponEquipExchangeAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEquipExchangeAll);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEquipExchangeAll, RmiName_CG_RequestWeaponEquipExchangeAll,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEquipExchangeAll;
        summary.rmiName = RmiName_CG_RequestWeaponEquipExchangeAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponEquipExchangeAll (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEquipExchangeAll);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEquipExchangeAll;
        summary.rmiName = RmiName_CG_RequestWeaponEquipExchangeAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponEquipRecommand(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEquipRecommand);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEquipRecommand, RmiName_CG_RequestWeaponEquipRecommand,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEquipRecommand;
        summary.rmiName = RmiName_CG_RequestWeaponEquipRecommand;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponEquipRecommand (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEquipRecommand);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponEquipRecommand;
        summary.rmiName = RmiName_CG_RequestWeaponEquipRecommand;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponCarve(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponCarve);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponCarve, RmiName_CG_RequestWeaponCarve,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponCarve;
        summary.rmiName = RmiName_CG_RequestWeaponCarve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponCarve (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponCarve);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponCarve;
        summary.rmiName = RmiName_CG_RequestWeaponCarve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponCarveRemove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponCarveRemove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponCarveRemove, RmiName_CG_RequestWeaponCarveRemove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponCarveRemove;
        summary.rmiName = RmiName_CG_RequestWeaponCarveRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponCarveRemove (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponCarveRemove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponCarveRemove;
        summary.rmiName = RmiName_CG_RequestWeaponCarveRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestStageInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestStageInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStageInfo, RmiName_CG_RequestStageInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestStageInfo;
        summary.rmiName = RmiName_CG_RequestStageInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestStageInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStageInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestStageInfo;
        summary.rmiName = RmiName_CG_RequestStageInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestStageRejoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestStageRejoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStageRejoin, RmiName_CG_RequestStageRejoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestStageRejoin;
        summary.rmiName = RmiName_CG_RequestStageRejoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestStageRejoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStageRejoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestStageRejoin;
        summary.rmiName = RmiName_CG_RequestStageRejoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Week_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Week_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Week_Stage_Start, RmiName_CG_Request_Week_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Week_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Week_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Week_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Week_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Week_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Week_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Week_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Week_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Week_Stage_Clear, RmiName_CG_Request_Week_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Week_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Week_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Week_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Week_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Week_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Week_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Week_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Week_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Week_Stage_Continue, RmiName_CG_Request_Week_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Week_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Week_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Week_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Week_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Week_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Week_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        SimpleCSharp.StageStartRequestInfo stageStartRequestInfo; SimpleCSharp.Marshaler.Read(__msg,out stageStartRequestInfo);	
core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=stageStartRequestInfo.ToString()+",";
        NotifyCallFromStub(Common.CG_Request_Main_Stage_Start, RmiName_CG_Request_Main_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Main_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_Stage_Start (remote,ctx , stageStartRequestInfo );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Main_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        SimpleCSharp.StageClearRequestInfo stageClearRequestInfo; SimpleCSharp.Marshaler.Read(__msg,out stageClearRequestInfo);	
core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=stageClearRequestInfo.ToString()+",";
        NotifyCallFromStub(Common.CG_Request_Main_Stage_Clear, RmiName_CG_Request_Main_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_Stage_Clear (remote,ctx , stageClearRequestInfo );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_Stage_Continue, RmiName_CG_Request_Main_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_Stage_Start, RmiName_CG_Request_Free_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Free_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Free_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_Stage_Clear, RmiName_CG_Request_Free_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Free_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Free_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_Stage_Continue, RmiName_CG_Request_Free_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Free_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Free_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestHawkRunStageStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestHawkRunStageStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestHawkRunStageStart, RmiName_CG_RequestHawkRunStageStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestHawkRunStageStart;
        summary.rmiName = RmiName_CG_RequestHawkRunStageStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestHawkRunStageStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHawkRunStageStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestHawkRunStageStart;
        summary.rmiName = RmiName_CG_RequestHawkRunStageStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestHawkRunStageClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestHawkRunStageClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestHawkRunStageClear, RmiName_CG_RequestHawkRunStageClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestHawkRunStageClear;
        summary.rmiName = RmiName_CG_RequestHawkRunStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestHawkRunStageClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHawkRunStageClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestHawkRunStageClear;
        summary.rmiName = RmiName_CG_RequestHawkRunStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventStageClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventStageClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventStageClear, RmiName_CG_RequestEventStageClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventStageClear;
        summary.rmiName = RmiName_CG_RequestEventStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventStageClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventStageClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventStageClear;
        summary.rmiName = RmiName_CG_RequestEventStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Quest_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Quest_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Quest_Stage_Start, RmiName_CG_Request_Quest_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Quest_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Quest_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Quest_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Quest_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Quest_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Quest_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Quest_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Quest_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Quest_Stage_Clear, RmiName_CG_Request_Quest_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Quest_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Quest_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Quest_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Quest_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Quest_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Quest_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Quest_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Quest_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Quest_Stage_Continue, RmiName_CG_Request_Quest_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Quest_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Quest_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Quest_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Quest_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Quest_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Quest_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_Stage_Start, RmiName_CG_Request_Boss_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Boss_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Boss_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_Stage_Clear, RmiName_CG_Request_Boss_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Boss_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Boss_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_Stage_Continue, RmiName_CG_Request_Boss_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Boss_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Boss_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Memorial_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Memorial_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Memorial_Stage_Start, RmiName_CG_Request_Memorial_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Memorial_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Memorial_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Memorial_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Memorial_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Memorial_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Memorial_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Memorial_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Memorial_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Memorial_Stage_Clear, RmiName_CG_Request_Memorial_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Memorial_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Memorial_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Memorial_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Memorial_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Memorial_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Memorial_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Memorial_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Memorial_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Memorial_Stage_Continue, RmiName_CG_Request_Memorial_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Memorial_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Memorial_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Memorial_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Memorial_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Memorial_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Memorial_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Limited_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_Stage_Start, RmiName_CG_Request_Limited_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Limited_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Limited_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Limited_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Limited_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_Stage_Clear, RmiName_CG_Request_Limited_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Limited_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Limited_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Limited_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Limited_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_Stage_Continue, RmiName_CG_Request_Limited_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Limited_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Limited_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Limited_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_ExtraStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ExtraStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ExtraStage_Start, RmiName_CG_Request_Main_ExtraStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ExtraStage_Start;
        summary.rmiName = RmiName_CG_Request_Main_ExtraStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_ExtraStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ExtraStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ExtraStage_Start;
        summary.rmiName = RmiName_CG_Request_Main_ExtraStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_ExtraStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ExtraStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ExtraStage_Clear, RmiName_CG_Request_Main_ExtraStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ExtraStage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_ExtraStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_ExtraStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ExtraStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ExtraStage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_ExtraStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_ExtraStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ExtraStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ExtraStage_Continue, RmiName_CG_Request_Main_ExtraStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ExtraStage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_ExtraStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_ExtraStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ExtraStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ExtraStage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_ExtraStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_ExtraStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_ExtraStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_ExtraStage_Start, RmiName_CG_Request_Boss_ExtraStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_ExtraStage_Start;
        summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_ExtraStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_ExtraStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_ExtraStage_Start;
        summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_ExtraStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_ExtraStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_ExtraStage_Clear, RmiName_CG_Request_Boss_ExtraStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_ExtraStage_Clear;
        summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_ExtraStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_ExtraStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_ExtraStage_Clear;
        summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_ExtraStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_ExtraStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_ExtraStage_Continue, RmiName_CG_Request_Boss_ExtraStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_ExtraStage_Continue;
        summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_ExtraStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_ExtraStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_ExtraStage_Continue;
        summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRewardStageClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRewardStageClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRewardStageClear, RmiName_CG_RequestRewardStageClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRewardStageClear;
        summary.rmiName = RmiName_CG_RequestRewardStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRewardStageClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRewardStageClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRewardStageClear;
        summary.rmiName = RmiName_CG_RequestRewardStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_SingleSiege_ExtraStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_SingleSiege_ExtraStage_Start, RmiName_CG_Request_SingleSiege_ExtraStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_Start;
        summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_SingleSiege_ExtraStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_SingleSiege_ExtraStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_Start;
        summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_SingleSiege_ExtraStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_SingleSiege_ExtraStage_Clear, RmiName_CG_Request_SingleSiege_ExtraStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_Clear;
        summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_SingleSiege_ExtraStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_SingleSiege_ExtraStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_Clear;
        summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_SingleSiege_ExtraStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_SingleSiege_ExtraStage_Continue, RmiName_CG_Request_SingleSiege_ExtraStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_Continue;
        summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_SingleSiege_ExtraStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_SingleSiege_ExtraStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_Continue;
        summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_FinalBoss_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Stage_Start, RmiName_CG_Request_FinalBoss_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Stage_Start;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_FinalBoss_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Stage_Start;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_FinalBoss_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Stage_Clear, RmiName_CG_Request_FinalBoss_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_FinalBoss_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_FinalBoss_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Stage_Continue, RmiName_CG_Request_FinalBoss_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_FinalBoss_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_FinalBoss_Season_Info(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Season_Info);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Season_Info, RmiName_CG_Request_FinalBoss_Season_Info,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Season_Info;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Season_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_FinalBoss_Season_Info (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Season_Info);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Season_Info;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Season_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Training_Stage_Info(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_Info);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_Info, RmiName_CG_Request_Training_Stage_Info,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Info;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Training_Stage_Info (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_Info);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Info;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Training_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_Start, RmiName_CG_Request_Training_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Training_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Training_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_Clear, RmiName_CG_Request_Training_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Training_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Training_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_Continue, RmiName_CG_Request_Training_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Training_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Training_Stage_Open(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_Open);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_Open, RmiName_CG_Request_Training_Stage_Open,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Open;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Open;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Training_Stage_Open (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_Open);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Open;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Open;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Training_Stage_Refresh(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_Refresh);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_Refresh, RmiName_CG_Request_Training_Stage_Refresh,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Refresh;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Refresh;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Training_Stage_Refresh (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_Refresh);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Training_Stage_Refresh;
        summary.rmiName = RmiName_CG_Request_Training_Stage_Refresh;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildBoss_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Stage_Start, RmiName_CG_Request_GuildBoss_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Stage_Start;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildBoss_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Stage_Start;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildBoss_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Stage_Clear, RmiName_CG_Request_GuildBoss_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildBoss_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildBoss_Lobby_Info(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Lobby_Info);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Lobby_Info, RmiName_CG_Request_GuildBoss_Lobby_Info,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Lobby_Info;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Lobby_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildBoss_Lobby_Info (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Lobby_Info);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Lobby_Info;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Lobby_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildBoss_Rank_Info(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Rank_Info);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Rank_Info, RmiName_CG_Request_GuildBoss_Rank_Info,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Rank_Info;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Rank_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildBoss_Rank_Info (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Rank_Info);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Rank_Info;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Rank_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildBoss_LastWeek_Rank_Info(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_LastWeek_Rank_Info);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_LastWeek_Rank_Info, RmiName_CG_Request_GuildBoss_LastWeek_Rank_Info,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_LastWeek_Rank_Info;
        summary.rmiName = RmiName_CG_Request_GuildBoss_LastWeek_Rank_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildBoss_LastWeek_Rank_Info (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_LastWeek_Rank_Info);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_LastWeek_Rank_Info;
        summary.rmiName = RmiName_CG_Request_GuildBoss_LastWeek_Rank_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildBoss_Time_Refresh(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Time_Refresh);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Time_Refresh, RmiName_CG_Request_GuildBoss_Time_Refresh,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Time_Refresh;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Time_Refresh;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildBoss_Time_Refresh (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Time_Refresh);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildBoss_Time_Refresh;
        summary.rmiName = RmiName_CG_Request_GuildBoss_Time_Refresh;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_AnotherMain_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_AnotherMain_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_AnotherMain_Stage_Start, RmiName_CG_Request_AnotherMain_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_AnotherMain_Stage_Start;
        summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_AnotherMain_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_AnotherMain_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_AnotherMain_Stage_Start;
        summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_AnotherMain_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_AnotherMain_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_AnotherMain_Stage_Clear, RmiName_CG_Request_AnotherMain_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_AnotherMain_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_AnotherMain_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_AnotherMain_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_AnotherMain_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_AnotherMain_Stage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_AnotherMain_Stage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_AnotherMain_Stage_Continue, RmiName_CG_Request_AnotherMain_Stage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_AnotherMain_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_AnotherMain_Stage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_AnotherMain_Stage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_AnotherMain_Stage_Continue;
        summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_FinalBoss_Season_Rank_Info(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Season_Rank_Info);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Season_Rank_Info, RmiName_CG_Request_FinalBoss_Season_Rank_Info,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Season_Rank_Info;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Season_Rank_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_FinalBoss_Season_Rank_Info (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Season_Rank_Info);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_Season_Rank_Info;
        summary.rmiName = RmiName_CG_Request_FinalBoss_Season_Rank_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Reverse_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Reverse_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Reverse_Stage_Start, RmiName_CG_Request_Reverse_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Reverse_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Reverse_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Reverse_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Reverse_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Reverse_Stage_Start;
        summary.rmiName = RmiName_CG_Request_Reverse_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Reverse_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Reverse_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Reverse_Stage_Clear, RmiName_CG_Request_Reverse_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Reverse_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Reverse_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Reverse_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Reverse_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Reverse_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_Reverse_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Reverse_Star_Reward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Reverse_Star_Reward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Reverse_Star_Reward, RmiName_CG_Request_Reverse_Star_Reward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Reverse_Star_Reward;
        summary.rmiName = RmiName_CG_Request_Reverse_Star_Reward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Reverse_Star_Reward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Reverse_Star_Reward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Reverse_Star_Reward;
        summary.rmiName = RmiName_CG_Request_Reverse_Star_Reward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Reverse_Group_Reward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Reverse_Group_Reward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Reverse_Group_Reward, RmiName_CG_Request_Reverse_Group_Reward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Reverse_Group_Reward;
        summary.rmiName = RmiName_CG_Request_Reverse_Group_Reward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Reverse_Group_Reward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Reverse_Group_Reward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Reverse_Group_Reward;
        summary.rmiName = RmiName_CG_Request_Reverse_Group_Reward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_EventAreaStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_EventAreaStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_EventAreaStage_Start, RmiName_CG_Request_Main_EventAreaStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_EventAreaStage_Start;
        summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_EventAreaStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_EventAreaStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_EventAreaStage_Start;
        summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_EventAreaStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_EventAreaStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_EventAreaStage_Clear, RmiName_CG_Request_Main_EventAreaStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_EventAreaStage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_EventAreaStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_EventAreaStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_EventAreaStage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_EventAreaStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_EventAreaStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_EventAreaStage_Continue, RmiName_CG_Request_Main_EventAreaStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_EventAreaStage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_EventAreaStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_EventAreaStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_EventAreaStage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_EventAreaStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventAreaStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventAreaStage_Start, RmiName_CG_Request_Free_EventAreaStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventAreaStage_Start;
        summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_EventAreaStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventAreaStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventAreaStage_Start;
        summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_EventAreaStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventAreaStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventAreaStage_Clear, RmiName_CG_Request_Free_EventAreaStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventAreaStage_Clear;
        summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_EventAreaStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventAreaStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventAreaStage_Clear;
        summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_EventAreaStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventAreaStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventAreaStage_Continue, RmiName_CG_Request_Free_EventAreaStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventAreaStage_Continue;
        summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_EventAreaStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventAreaStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventAreaStage_Continue;
        summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventAreaRewardStageClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventAreaRewardStageClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventAreaRewardStageClear, RmiName_CG_RequestEventAreaRewardStageClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventAreaRewardStageClear;
        summary.rmiName = RmiName_CG_RequestEventAreaRewardStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventAreaRewardStageClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventAreaRewardStageClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventAreaRewardStageClear;
        summary.rmiName = RmiName_CG_RequestEventAreaRewardStageClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_EventStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventStage_Start, RmiName_CG_Request_Free_EventStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_Free_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_EventStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_Free_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_EventStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventStage_Clear, RmiName_CG_Request_Free_EventStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Free_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_EventStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Free_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_EventStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventStage_Continue, RmiName_CG_Request_Free_EventStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Free_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_EventStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Free_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventExchange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchange, RmiName_CG_RequestEventExchange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchange;
        summary.rmiName = RmiName_CG_RequestEventExchange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventExchange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchange;
        summary.rmiName = RmiName_CG_RequestEventExchange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventPlayCountReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPlayCountReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventPlayCountReward, RmiName_CG_RequestEventPlayCountReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventPlayCountReward;
        summary.rmiName = RmiName_CG_RequestEventPlayCountReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventPlayCountReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPlayCountReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventPlayCountReward;
        summary.rmiName = RmiName_CG_RequestEventPlayCountReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_ListEventStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ListEventStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ListEventStage_Start, RmiName_CG_Request_Main_ListEventStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ListEventStage_Start;
        summary.rmiName = RmiName_CG_Request_Main_ListEventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_ListEventStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ListEventStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ListEventStage_Start;
        summary.rmiName = RmiName_CG_Request_Main_ListEventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_ListEventStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ListEventStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ListEventStage_Clear, RmiName_CG_Request_Main_ListEventStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ListEventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_ListEventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_ListEventStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ListEventStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ListEventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_ListEventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_ListEventStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ListEventStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ListEventStage_Continue, RmiName_CG_Request_Main_ListEventStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ListEventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_ListEventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_ListEventStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ListEventStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_ListEventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_ListEventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_ListEventStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_ListEventStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_ListEventStage_Start, RmiName_CG_Request_Free_ListEventStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_ListEventStage_Start;
        summary.rmiName = RmiName_CG_Request_Free_ListEventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_ListEventStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_ListEventStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_ListEventStage_Start;
        summary.rmiName = RmiName_CG_Request_Free_ListEventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_ListEventStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_ListEventStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_ListEventStage_Clear, RmiName_CG_Request_Free_ListEventStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_ListEventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Free_ListEventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_ListEventStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_ListEventStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_ListEventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Free_ListEventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Free_ListEventStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_ListEventStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_ListEventStage_Continue, RmiName_CG_Request_Free_ListEventStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Free_ListEventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Free_ListEventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Free_ListEventStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_ListEventStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Free_ListEventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Free_ListEventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_FinalBossStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_FinalBossStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_FinalBossStage_Start, RmiName_CG_Request_Main_FinalBossStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_FinalBossStage_Start;
        summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_FinalBossStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_FinalBossStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_FinalBossStage_Start;
        summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_FinalBossStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_FinalBossStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_FinalBossStage_Clear, RmiName_CG_Request_Main_FinalBossStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_FinalBossStage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_FinalBossStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_FinalBossStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_FinalBossStage_Clear;
        summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Main_FinalBossStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_FinalBossStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_FinalBossStage_Continue, RmiName_CG_Request_Main_FinalBossStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Main_FinalBossStage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Main_FinalBossStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_FinalBossStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Main_FinalBossStage_Continue;
        summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_EventFreeStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_EventFreeStage_Start, RmiName_CG_Request_FinalBoss_EventFreeStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_Start;
        summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_FinalBoss_EventFreeStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_EventFreeStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_Start;
        summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_EventFreeStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_EventFreeStage_Clear, RmiName_CG_Request_FinalBoss_EventFreeStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_Clear;
        summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_FinalBoss_EventFreeStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_EventFreeStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_Clear;
        summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_EventFreeStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_EventFreeStage_Continue, RmiName_CG_Request_FinalBoss_EventFreeStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_Continue;
        summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_FinalBoss_EventFreeStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_EventFreeStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_Continue;
        summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Limited_EventStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_EventStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_EventStage_Start, RmiName_CG_Request_Limited_EventStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_Limited_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Limited_EventStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_EventStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_Limited_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Limited_EventStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_EventStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_EventStage_Clear, RmiName_CG_Request_Limited_EventStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Limited_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Limited_EventStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_EventStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Limited_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Limited_EventStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_EventStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_EventStage_Continue, RmiName_CG_Request_Limited_EventStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Limited_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Limited_EventStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_EventStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Limited_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Limited_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_EventStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_EventStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_EventStage_Start, RmiName_CG_Request_Boss_EventStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_Boss_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_EventStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_EventStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_Boss_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_EventStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_EventStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_EventStage_Clear, RmiName_CG_Request_Boss_EventStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Boss_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_EventStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_EventStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Boss_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Boss_EventStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_EventStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_EventStage_Continue, RmiName_CG_Request_Boss_EventStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Boss_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Boss_EventStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_EventStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Boss_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Boss_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Monthly_EventStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Monthly_EventStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Monthly_EventStage_Start, RmiName_CG_Request_Monthly_EventStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Monthly_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_Monthly_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Monthly_EventStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Monthly_EventStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Monthly_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_Monthly_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Monthly_EventStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Monthly_EventStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Monthly_EventStage_Clear, RmiName_CG_Request_Monthly_EventStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Monthly_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Monthly_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Monthly_EventStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Monthly_EventStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Monthly_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_Monthly_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_Monthly_EventStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_Monthly_EventStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Monthly_EventStage_Continue, RmiName_CG_Request_Monthly_EventStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_Monthly_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Monthly_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_Monthly_EventStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Monthly_EventStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_Monthly_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_Monthly_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMonthlyStagePointReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMonthlyStagePointReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMonthlyStagePointReward, RmiName_CG_RequestMonthlyStagePointReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMonthlyStagePointReward;
        summary.rmiName = RmiName_CG_RequestMonthlyStagePointReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMonthlyStagePointReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMonthlyStagePointReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMonthlyStagePointReward;
        summary.rmiName = RmiName_CG_RequestMonthlyStagePointReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeekStageGaugeReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeekStageGaugeReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeekStageGaugeReward, RmiName_CG_RequestWeekStageGaugeReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeekStageGaugeReward;
        summary.rmiName = RmiName_CG_RequestWeekStageGaugeReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeekStageGaugeReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeekStageGaugeReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeekStageGaugeReward;
        summary.rmiName = RmiName_CG_RequestWeekStageGaugeReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestIngameBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestIngameBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestIngameBattleStart, RmiName_CG_RequestIngameBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestIngameBattleStart;
        summary.rmiName = RmiName_CG_RequestIngameBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestIngameBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestIngameBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestIngameBattleStart;
        summary.rmiName = RmiName_CG_RequestIngameBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestStageEndLog(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestStageEndLog);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStageEndLog, RmiName_CG_RequestStageEndLog,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestStageEndLog;
        summary.rmiName = RmiName_CG_RequestStageEndLog;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestStageEndLog (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStageEndLog);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestStageEndLog;
        summary.rmiName = RmiName_CG_RequestStageEndLog;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_EventStage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_EventStage_Start, RmiName_CG_Request_ChallengeBoss_EventStage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_ChallengeBoss_EventStage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_EventStage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_Start;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_EventStage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_EventStage_Clear, RmiName_CG_Request_ChallengeBoss_EventStage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_ChallengeBoss_EventStage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_EventStage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_Clear;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_Continue(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_EventStage_Continue);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_EventStage_Continue, RmiName_CG_Request_ChallengeBoss_EventStage_Continue,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_ChallengeBoss_EventStage_Continue (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_EventStage_Continue);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_Continue;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_Continue;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_Info(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_EventStage_Info);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_EventStage_Info, RmiName_CG_Request_ChallengeBoss_EventStage_Info,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_Info;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_ChallengeBoss_EventStage_Info (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_EventStage_Info);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_Info;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_Info;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_ChallengeBoss_Event_Point_Reward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_Event_Point_Reward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_Event_Point_Reward, RmiName_CG_Request_ChallengeBoss_Event_Point_Reward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_Event_Point_Reward;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_Event_Point_Reward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_ChallengeBoss_Event_Point_Reward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_Event_Point_Reward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_ChallengeBoss_Event_Point_Reward;
        summary.rmiName = RmiName_CG_Request_ChallengeBoss_Event_Point_Reward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMailList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        SimpleCSharp.LanguageType languageType; SimpleCSharp.Marshaler.Read(__msg,out languageType);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=languageType.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestMailList, RmiName_CG_RequestMailList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMailList;
        summary.rmiName = RmiName_CG_RequestMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMailList (remote,ctx , languageType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMailList;
        summary.rmiName = RmiName_CG_RequestMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMailConfirm(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailConfirm);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMailConfirm, RmiName_CG_RequestMailConfirm,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMailConfirm;
        summary.rmiName = RmiName_CG_RequestMailConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMailConfirm (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailConfirm);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMailConfirm;
        summary.rmiName = RmiName_CG_RequestMailConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMailConfirmAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailConfirmAll);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMailConfirmAll, RmiName_CG_RequestMailConfirmAll,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMailConfirmAll;
        summary.rmiName = RmiName_CG_RequestMailConfirmAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMailConfirmAll (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailConfirmAll);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMailConfirmAll;
        summary.rmiName = RmiName_CG_RequestMailConfirmAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMailHistoryList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailHistoryList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMailHistoryList, RmiName_CG_RequestMailHistoryList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMailHistoryList;
        summary.rmiName = RmiName_CG_RequestMailHistoryList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMailHistoryList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailHistoryList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMailHistoryList;
        summary.rmiName = RmiName_CG_RequestMailHistoryList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMailRecentlyHistoryList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailRecentlyHistoryList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMailRecentlyHistoryList, RmiName_CG_RequestMailRecentlyHistoryList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMailRecentlyHistoryList;
        summary.rmiName = RmiName_CG_RequestMailRecentlyHistoryList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMailRecentlyHistoryList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailRecentlyHistoryList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMailRecentlyHistoryList;
        summary.rmiName = RmiName_CG_RequestMailRecentlyHistoryList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendMailList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendMailList, RmiName_CG_RequestFriendMailList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendMailList;
        summary.rmiName = RmiName_CG_RequestFriendMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendMailList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendMailList;
        summary.rmiName = RmiName_CG_RequestFriendMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendMailConfirm(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailConfirm);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendMailConfirm, RmiName_CG_RequestFriendMailConfirm,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendMailConfirm;
        summary.rmiName = RmiName_CG_RequestFriendMailConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendMailConfirm (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailConfirm);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendMailConfirm;
        summary.rmiName = RmiName_CG_RequestFriendMailConfirm;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendMailConfirmAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailConfirmAll);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendMailConfirmAll, RmiName_CG_RequestFriendMailConfirmAll,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendMailConfirmAll;
        summary.rmiName = RmiName_CG_RequestFriendMailConfirmAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendMailConfirmAll (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailConfirmAll);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendMailConfirmAll;
        summary.rmiName = RmiName_CG_RequestFriendMailConfirmAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestNoticeMailReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int noticeMailSEQ; SimpleCSharp.Marshaler.Read(__msg,out noticeMailSEQ);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestNoticeMailReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=noticeMailSEQ.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestNoticeMailReward, RmiName_CG_RequestNoticeMailReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestNoticeMailReward;
        summary.rmiName = RmiName_CG_RequestNoticeMailReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestNoticeMailReward (remote,ctx , noticeMailSEQ );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNoticeMailReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestNoticeMailReward;
        summary.rmiName = RmiName_CG_RequestNoticeMailReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPackageMailList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageMailList, RmiName_CG_RequestPackageMailList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPackageMailList;
        summary.rmiName = RmiName_CG_RequestPackageMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPackageMailList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPackageMailList;
        summary.rmiName = RmiName_CG_RequestPackageMailList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPackageMailGet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailGet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageMailGet, RmiName_CG_RequestPackageMailGet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPackageMailGet;
        summary.rmiName = RmiName_CG_RequestPackageMailGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPackageMailGet (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailGet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPackageMailGet;
        summary.rmiName = RmiName_CG_RequestPackageMailGet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPackageMailHistoryList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailHistoryList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageMailHistoryList, RmiName_CG_RequestPackageMailHistoryList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPackageMailHistoryList;
        summary.rmiName = RmiName_CG_RequestPackageMailHistoryList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPackageMailHistoryList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailHistoryList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPackageMailHistoryList;
        summary.rmiName = RmiName_CG_RequestPackageMailHistoryList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLevelUpPackageReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLevelUpPackageReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLevelUpPackageReward, RmiName_CG_RequestLevelUpPackageReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLevelUpPackageReward;
        summary.rmiName = RmiName_CG_RequestLevelUpPackageReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLevelUpPackageReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLevelUpPackageReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLevelUpPackageReward;
        summary.rmiName = RmiName_CG_RequestLevelUpPackageReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLevelUpPackageRewardAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLevelUpPackageRewardAll);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLevelUpPackageRewardAll, RmiName_CG_RequestLevelUpPackageRewardAll,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLevelUpPackageRewardAll;
        summary.rmiName = RmiName_CG_RequestLevelUpPackageRewardAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLevelUpPackageRewardAll (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLevelUpPackageRewardAll);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLevelUpPackageRewardAll;
        summary.rmiName = RmiName_CG_RequestLevelUpPackageRewardAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAttendancePackageReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendancePackageReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAttendancePackageReward, RmiName_CG_RequestAttendancePackageReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAttendancePackageReward;
        summary.rmiName = RmiName_CG_RequestAttendancePackageReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAttendancePackageReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendancePackageReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAttendancePackageReward;
        summary.rmiName = RmiName_CG_RequestAttendancePackageReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAttendancePackageRewardAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendancePackageRewardAll);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAttendancePackageRewardAll, RmiName_CG_RequestAttendancePackageRewardAll,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAttendancePackageRewardAll;
        summary.rmiName = RmiName_CG_RequestAttendancePackageRewardAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAttendancePackageRewardAll (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendancePackageRewardAll);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAttendancePackageRewardAll;
        summary.rmiName = RmiName_CG_RequestAttendancePackageRewardAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMailADReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailADReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMailADReward, RmiName_CG_RequestMailADReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMailADReward;
        summary.rmiName = RmiName_CG_RequestMailADReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMailADReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailADReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMailADReward;
        summary.rmiName = RmiName_CG_RequestMailADReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGambleShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGambleShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGambleShopBuy, RmiName_CG_RequestGambleShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGambleShopBuy;
        summary.rmiName = RmiName_CG_RequestGambleShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGambleShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGambleShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGambleShopBuy;
        summary.rmiName = RmiName_CG_RequestGambleShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestStepupGambleShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestStepupGambleShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStepupGambleShopBuy, RmiName_CG_RequestStepupGambleShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestStepupGambleShopBuy;
        summary.rmiName = RmiName_CG_RequestStepupGambleShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestStepupGambleShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStepupGambleShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestStepupGambleShopBuy;
        summary.rmiName = RmiName_CG_RequestStepupGambleShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestStepupGambleMileageReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestStepupGambleMileageReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStepupGambleMileageReward, RmiName_CG_RequestStepupGambleMileageReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestStepupGambleMileageReward;
        summary.rmiName = RmiName_CG_RequestStepupGambleMileageReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestStepupGambleMileageReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStepupGambleMileageReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestStepupGambleMileageReward;
        summary.rmiName = RmiName_CG_RequestStepupGambleMileageReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemGambleShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemGambleShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemGambleShopInfo, RmiName_CG_RequestItemGambleShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemGambleShopInfo;
        summary.rmiName = RmiName_CG_RequestItemGambleShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemGambleShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemGambleShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemGambleShopInfo;
        summary.rmiName = RmiName_CG_RequestItemGambleShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemGambleShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemGambleShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemGambleShopBuy, RmiName_CG_RequestItemGambleShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemGambleShopBuy;
        summary.rmiName = RmiName_CG_RequestItemGambleShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemGambleShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemGambleShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemGambleShopBuy;
        summary.rmiName = RmiName_CG_RequestItemGambleShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRandomShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopBuy, RmiName_CG_RequestRandomShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopBuy;
        summary.rmiName = RmiName_CG_RequestRandomShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRandomShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopBuy;
        summary.rmiName = RmiName_CG_RequestRandomShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRandomShopRefresh(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopRefresh);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopRefresh, RmiName_CG_RequestRandomShopRefresh,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopRefresh;
        summary.rmiName = RmiName_CG_RequestRandomShopRefresh;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRandomShopRefresh (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopRefresh);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopRefresh;
        summary.rmiName = RmiName_CG_RequestRandomShopRefresh;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRandomShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopInfo, RmiName_CG_RequestRandomShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopInfo;
        summary.rmiName = RmiName_CG_RequestRandomShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRandomShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopInfo;
        summary.rmiName = RmiName_CG_RequestRandomShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointShopInfo, RmiName_CG_RequestBasePointShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointShopInfo;
        summary.rmiName = RmiName_CG_RequestBasePointShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointShopInfo;
        summary.rmiName = RmiName_CG_RequestBasePointShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointShopBuy, RmiName_CG_RequestBasePointShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointShopBuy;
        summary.rmiName = RmiName_CG_RequestBasePointShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointShopBuy;
        summary.rmiName = RmiName_CG_RequestBasePointShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointShopReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointShopReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointShopReset, RmiName_CG_RequestBasePointShopReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointShopReset;
        summary.rmiName = RmiName_CG_RequestBasePointShopReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointShopReset (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointShopReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointShopReset;
        summary.rmiName = RmiName_CG_RequestBasePointShopReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpShopInfo, RmiName_CG_RequestArenaRealTimePvpShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpShopInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpShopInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpShopBuy, RmiName_CG_RequestArenaRealTimePvpShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpShopBuy;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpShopBuy;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpShopReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpShopReset, RmiName_CG_RequestArenaRealTimePvpShopReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpShopReset;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpShopReset (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpShopReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpShopReset;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCoinShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCoinShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCoinShopInfo, RmiName_CG_RequestCoinShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCoinShopInfo;
        summary.rmiName = RmiName_CG_RequestCoinShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCoinShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCoinShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCoinShopInfo;
        summary.rmiName = RmiName_CG_RequestCoinShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCoinShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCoinShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCoinShopBuy, RmiName_CG_RequestCoinShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCoinShopBuy;
        summary.rmiName = RmiName_CG_RequestCoinShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCoinShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCoinShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCoinShopBuy;
        summary.rmiName = RmiName_CG_RequestCoinShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCoinShopDailyBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCoinShopDailyBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCoinShopDailyBuy, RmiName_CG_RequestCoinShopDailyBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCoinShopDailyBuy;
        summary.rmiName = RmiName_CG_RequestCoinShopDailyBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCoinShopDailyBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCoinShopDailyBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCoinShopDailyBuy;
        summary.rmiName = RmiName_CG_RequestCoinShopDailyBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCoinShopOnceBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCoinShopOnceBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCoinShopOnceBuy, RmiName_CG_RequestCoinShopOnceBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCoinShopOnceBuy;
        summary.rmiName = RmiName_CG_RequestCoinShopOnceBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCoinShopOnceBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCoinShopOnceBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCoinShopOnceBuy;
        summary.rmiName = RmiName_CG_RequestCoinShopOnceBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeShopInfo, RmiName_CG_RequestCostumeShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeShopInfo;
        summary.rmiName = RmiName_CG_RequestCostumeShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeShopInfo;
        summary.rmiName = RmiName_CG_RequestCostumeShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeShopBuy, RmiName_CG_RequestCostumeShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeShopBuy;
        summary.rmiName = RmiName_CG_RequestCostumeShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeShopBuy;
        summary.rmiName = RmiName_CG_RequestCostumeShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCostumeShopPackageBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeShopPackageBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeShopPackageBuy, RmiName_CG_RequestCostumeShopPackageBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeShopPackageBuy;
        summary.rmiName = RmiName_CG_RequestCostumeShopPackageBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCostumeShopPackageBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeShopPackageBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCostumeShopPackageBuy;
        summary.rmiName = RmiName_CG_RequestCostumeShopPackageBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendPointShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendPointShopInfo, RmiName_CG_RequestFriendPointShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendPointShopInfo;
        summary.rmiName = RmiName_CG_RequestFriendPointShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendPointShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendPointShopInfo;
        summary.rmiName = RmiName_CG_RequestFriendPointShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendPointShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendPointShopBuy, RmiName_CG_RequestFriendPointShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendPointShopBuy;
        summary.rmiName = RmiName_CG_RequestFriendPointShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendPointShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendPointShopBuy;
        summary.rmiName = RmiName_CG_RequestFriendPointShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDiaShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDiaShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDiaShopInfo, RmiName_CG_RequestDiaShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDiaShopInfo;
        summary.rmiName = RmiName_CG_RequestDiaShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDiaShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDiaShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDiaShopInfo;
        summary.rmiName = RmiName_CG_RequestDiaShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDiaShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDiaShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDiaShopBuy, RmiName_CG_RequestDiaShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDiaShopBuy;
        summary.rmiName = RmiName_CG_RequestDiaShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDiaShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDiaShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDiaShopBuy;
        summary.rmiName = RmiName_CG_RequestDiaShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemInventoryBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemInventoryBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemInventoryBuy, RmiName_CG_RequestItemInventoryBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemInventoryBuy;
        summary.rmiName = RmiName_CG_RequestItemInventoryBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemInventoryBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemInventoryBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemInventoryBuy;
        summary.rmiName = RmiName_CG_RequestItemInventoryBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeaponInventoryBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponInventoryBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponInventoryBuy, RmiName_CG_RequestWeaponInventoryBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponInventoryBuy;
        summary.rmiName = RmiName_CG_RequestWeaponInventoryBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeaponInventoryBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponInventoryBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeaponInventoryBuy;
        summary.rmiName = RmiName_CG_RequestWeaponInventoryBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeekStageKeyBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeekStageKeyBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeekStageKeyBuy, RmiName_CG_RequestWeekStageKeyBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeekStageKeyBuy;
        summary.rmiName = RmiName_CG_RequestWeekStageKeyBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeekStageKeyBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeekStageKeyBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeekStageKeyBuy;
        summary.rmiName = RmiName_CG_RequestWeekStageKeyBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCommonItemSell(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCommonItemSell);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCommonItemSell, RmiName_CG_RequestCommonItemSell,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCommonItemSell;
        summary.rmiName = RmiName_CG_RequestCommonItemSell;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCommonItemSell (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCommonItemSell);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCommonItemSell;
        summary.rmiName = RmiName_CG_RequestCommonItemSell;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCommonItemRemove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCommonItemRemove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCommonItemRemove, RmiName_CG_RequestCommonItemRemove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCommonItemRemove;
        summary.rmiName = RmiName_CG_RequestCommonItemRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCommonItemRemove (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCommonItemRemove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCommonItemRemove;
        summary.rmiName = RmiName_CG_RequestCommonItemRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPackageBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageBuy, RmiName_CG_RequestPackageBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPackageBuy;
        summary.rmiName = RmiName_CG_RequestPackageBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPackageBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPackageBuy;
        summary.rmiName = RmiName_CG_RequestPackageBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBuyDia(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBuyDia);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBuyDia, RmiName_CG_RequestBuyDia,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBuyDia;
        summary.rmiName = RmiName_CG_RequestBuyDia;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBuyDia (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBuyDia);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBuyDia;
        summary.rmiName = RmiName_CG_RequestBuyDia;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBuyGold(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBuyGold);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBuyGold, RmiName_CG_RequestBuyGold,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBuyGold;
        summary.rmiName = RmiName_CG_RequestBuyGold;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBuyGold (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBuyGold);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBuyGold;
        summary.rmiName = RmiName_CG_RequestBuyGold;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBuyStamina(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBuyStamina);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBuyStamina, RmiName_CG_RequestBuyStamina,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBuyStamina;
        summary.rmiName = RmiName_CG_RequestBuyStamina;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBuyStamina (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBuyStamina);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBuyStamina;
        summary.rmiName = RmiName_CG_RequestBuyStamina;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildShopInfo, RmiName_CG_RequestGuildShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildShopInfo;
        summary.rmiName = RmiName_CG_RequestGuildShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildShopInfo;
        summary.rmiName = RmiName_CG_RequestGuildShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildShopBuy, RmiName_CG_RequestGuildShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildShopBuy;
        summary.rmiName = RmiName_CG_RequestGuildShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildShopBuy;
        summary.rmiName = RmiName_CG_RequestGuildShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildShopReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildShopReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildShopReset, RmiName_CG_RequestGuildShopReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildShopReset;
        summary.rmiName = RmiName_CG_RequestGuildShopReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildShopReset (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildShopReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildShopReset;
        summary.rmiName = RmiName_CG_RequestGuildShopReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFinalBossShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFinalBossShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFinalBossShopInfo, RmiName_CG_RequestFinalBossShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFinalBossShopInfo;
        summary.rmiName = RmiName_CG_RequestFinalBossShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFinalBossShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFinalBossShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFinalBossShopInfo;
        summary.rmiName = RmiName_CG_RequestFinalBossShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFinalBossShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFinalBossShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFinalBossShopBuy, RmiName_CG_RequestFinalBossShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFinalBossShopBuy;
        summary.rmiName = RmiName_CG_RequestFinalBossShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFinalBossShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFinalBossShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFinalBossShopBuy;
        summary.rmiName = RmiName_CG_RequestFinalBossShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventCollaborationCoinShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCollaborationCoinShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventCollaborationCoinShopInfo, RmiName_CG_RequestEventCollaborationCoinShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventCollaborationCoinShopInfo;
        summary.rmiName = RmiName_CG_RequestEventCollaborationCoinShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventCollaborationCoinShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCollaborationCoinShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventCollaborationCoinShopInfo;
        summary.rmiName = RmiName_CG_RequestEventCollaborationCoinShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventCollaborationCoinShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCollaborationCoinShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventCollaborationCoinShopBuy, RmiName_CG_RequestEventCollaborationCoinShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventCollaborationCoinShopBuy;
        summary.rmiName = RmiName_CG_RequestEventCollaborationCoinShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventCollaborationCoinShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCollaborationCoinShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventCollaborationCoinShopBuy;
        summary.rmiName = RmiName_CG_RequestEventCollaborationCoinShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBingoGambleShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBingoGambleShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBingoGambleShopInfo, RmiName_CG_RequestBingoGambleShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBingoGambleShopInfo;
        summary.rmiName = RmiName_CG_RequestBingoGambleShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBingoGambleShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBingoGambleShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBingoGambleShopInfo;
        summary.rmiName = RmiName_CG_RequestBingoGambleShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBingoGambleShopReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBingoGambleShopReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBingoGambleShopReset, RmiName_CG_RequestBingoGambleShopReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBingoGambleShopReset;
        summary.rmiName = RmiName_CG_RequestBingoGambleShopReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBingoGambleShopReset (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBingoGambleShopReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBingoGambleShopReset;
        summary.rmiName = RmiName_CG_RequestBingoGambleShopReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBingoGambleShopReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBingoGambleShopReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBingoGambleShopReward, RmiName_CG_RequestBingoGambleShopReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBingoGambleShopReward;
        summary.rmiName = RmiName_CG_RequestBingoGambleShopReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBingoGambleShopReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBingoGambleShopReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBingoGambleShopReward;
        summary.rmiName = RmiName_CG_RequestBingoGambleShopReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDiaShopPackageBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDiaShopPackageBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDiaShopPackageBuy, RmiName_CG_RequestDiaShopPackageBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDiaShopPackageBuy;
        summary.rmiName = RmiName_CG_RequestDiaShopPackageBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDiaShopPackageBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDiaShopPackageBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDiaShopPackageBuy;
        summary.rmiName = RmiName_CG_RequestDiaShopPackageBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRandomShopVisitReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopVisitReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopVisitReward, RmiName_CG_RequestRandomShopVisitReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopVisitReward;
        summary.rmiName = RmiName_CG_RequestRandomShopVisitReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRandomShopVisitReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopVisitReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopVisitReward;
        summary.rmiName = RmiName_CG_RequestRandomShopVisitReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGambleChoiceShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGambleChoiceShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGambleChoiceShopBuy, RmiName_CG_RequestGambleChoiceShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGambleChoiceShopBuy;
        summary.rmiName = RmiName_CG_RequestGambleChoiceShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGambleChoiceShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGambleChoiceShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGambleChoiceShopBuy;
        summary.rmiName = RmiName_CG_RequestGambleChoiceShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRandomShopScheduleInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopScheduleInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopScheduleInfo, RmiName_CG_RequestRandomShopScheduleInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopScheduleInfo;
        summary.rmiName = RmiName_CG_RequestRandomShopScheduleInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRandomShopScheduleInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopScheduleInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRandomShopScheduleInfo;
        summary.rmiName = RmiName_CG_RequestRandomShopScheduleInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPackageShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageShopInfo, RmiName_CG_RequestPackageShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPackageShopInfo;
        summary.rmiName = RmiName_CG_RequestPackageShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPackageShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPackageShopInfo;
        summary.rmiName = RmiName_CG_RequestPackageShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFreePackageReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFreePackageReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFreePackageReward, RmiName_CG_RequestFreePackageReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFreePackageReward;
        summary.rmiName = RmiName_CG_RequestFreePackageReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFreePackageReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFreePackageReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFreePackageReward;
        summary.rmiName = RmiName_CG_RequestFreePackageReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPackageMissionClose(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMissionClose);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageMissionClose, RmiName_CG_RequestPackageMissionClose,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPackageMissionClose;
        summary.rmiName = RmiName_CG_RequestPackageMissionClose;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPackageMissionClose (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMissionClose);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPackageMissionClose;
        summary.rmiName = RmiName_CG_RequestPackageMissionClose;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGambleShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGambleShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGambleShopInfo, RmiName_CG_RequestGambleShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGambleShopInfo;
        summary.rmiName = RmiName_CG_RequestGambleShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGambleShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGambleShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGambleShopInfo;
        summary.rmiName = RmiName_CG_RequestGambleShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestADRouletteReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestADRouletteReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestADRouletteReward, RmiName_CG_RequestADRouletteReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestADRouletteReward;
        summary.rmiName = RmiName_CG_RequestADRouletteReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestADRouletteReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestADRouletteReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestADRouletteReward;
        summary.rmiName = RmiName_CG_RequestADRouletteReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestQuestStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int questID; SimpleCSharp.Marshaler.Read(__msg,out questID);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=questID.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestQuestStart, RmiName_CG_RequestQuestStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestQuestStart;
        summary.rmiName = RmiName_CG_RequestQuestStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestQuestStart (remote,ctx , questID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestQuestStart;
        summary.rmiName = RmiName_CG_RequestQuestStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestQuestProgress(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int questID; SimpleCSharp.Marshaler.Read(__msg,out questID);	
byte propIndex; SimpleCSharp.Marshaler.Read(__msg,out propIndex);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestProgress);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=questID.ToString()+",";
parameterString+=propIndex.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestQuestProgress, RmiName_CG_RequestQuestProgress,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestQuestProgress;
        summary.rmiName = RmiName_CG_RequestQuestProgress;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestQuestProgress (remote,ctx , questID, propIndex );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestProgress);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestQuestProgress;
        summary.rmiName = RmiName_CG_RequestQuestProgress;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestQuestClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int questID; SimpleCSharp.Marshaler.Read(__msg,out questID);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=questID.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestQuestClear, RmiName_CG_RequestQuestClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestQuestClear;
        summary.rmiName = RmiName_CG_RequestQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestQuestClear (remote,ctx , questID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestQuestClear;
        summary.rmiName = RmiName_CG_RequestQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestQuestRemove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestRemove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestQuestRemove, RmiName_CG_RequestQuestRemove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestQuestRemove;
        summary.rmiName = RmiName_CG_RequestQuestRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestQuestRemove (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestRemove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestQuestRemove;
        summary.rmiName = RmiName_CG_RequestQuestRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestNetmarbleQuestAchieve(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestNetmarbleQuestAchieve);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestNetmarbleQuestAchieve, RmiName_CG_RequestNetmarbleQuestAchieve,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestNetmarbleQuestAchieve;
        summary.rmiName = RmiName_CG_RequestNetmarbleQuestAchieve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestNetmarbleQuestAchieve (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNetmarbleQuestAchieve);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestNetmarbleQuestAchieve;
        summary.rmiName = RmiName_CG_RequestNetmarbleQuestAchieve;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestNetmarbleQuestReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestNetmarbleQuestReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestNetmarbleQuestReward, RmiName_CG_RequestNetmarbleQuestReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestNetmarbleQuestReward;
        summary.rmiName = RmiName_CG_RequestNetmarbleQuestReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestNetmarbleQuestReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNetmarbleQuestReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestNetmarbleQuestReward;
        summary.rmiName = RmiName_CG_RequestNetmarbleQuestReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDirectSelectorReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDirectSelectorReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDirectSelectorReward, RmiName_CG_RequestDirectSelectorReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDirectSelectorReward;
        summary.rmiName = RmiName_CG_RequestDirectSelectorReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDirectSelectorReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDirectSelectorReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDirectSelectorReward;
        summary.rmiName = RmiName_CG_RequestDirectSelectorReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMissionProgress(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        SimpleCSharp.MissionType missionType; SimpleCSharp.Marshaler.Read(__msg,out missionType);	
int missionTypeValue; SimpleCSharp.Marshaler.Read(__msg,out missionTypeValue);	
int addValue; SimpleCSharp.Marshaler.Read(__msg,out addValue);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionProgress);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=missionType.ToString()+",";
parameterString+=missionTypeValue.ToString()+",";
parameterString+=addValue.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestMissionProgress, RmiName_CG_RequestMissionProgress,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMissionProgress;
        summary.rmiName = RmiName_CG_RequestMissionProgress;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMissionProgress (remote,ctx , missionType, missionTypeValue, addValue );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionProgress);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMissionProgress;
        summary.rmiName = RmiName_CG_RequestMissionProgress;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMissionClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMissionClear, RmiName_CG_RequestMissionClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMissionClear;
        summary.rmiName = RmiName_CG_RequestMissionClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMissionClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMissionClear;
        summary.rmiName = RmiName_CG_RequestMissionClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMissionEventClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionEventClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMissionEventClear, RmiName_CG_RequestMissionEventClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMissionEventClear;
        summary.rmiName = RmiName_CG_RequestMissionEventClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMissionEventClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionEventClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMissionEventClear;
        summary.rmiName = RmiName_CG_RequestMissionEventClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestMissionGetAchievePointReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionGetAchievePointReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMissionGetAchievePointReward, RmiName_CG_RequestMissionGetAchievePointReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestMissionGetAchievePointReward;
        summary.rmiName = RmiName_CG_RequestMissionGetAchievePointReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestMissionGetAchievePointReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionGetAchievePointReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestMissionGetAchievePointReward;
        summary.rmiName = RmiName_CG_RequestMissionGetAchievePointReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestQuestChapterClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestChapterClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestQuestChapterClear, RmiName_CG_RequestQuestChapterClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestQuestChapterClear;
        summary.rmiName = RmiName_CG_RequestQuestChapterClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestQuestChapterClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestChapterClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestQuestChapterClear;
        summary.rmiName = RmiName_CG_RequestQuestChapterClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventMissionGetAchievePointReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionGetAchievePointReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventMissionGetAchievePointReward, RmiName_CG_RequestEventMissionGetAchievePointReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventMissionGetAchievePointReward;
        summary.rmiName = RmiName_CG_RequestEventMissionGetAchievePointReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventMissionGetAchievePointReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionGetAchievePointReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventMissionGetAchievePointReward;
        summary.rmiName = RmiName_CG_RequestEventMissionGetAchievePointReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventMissionCompleteReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionCompleteReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventMissionCompleteReward, RmiName_CG_RequestEventMissionCompleteReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventMissionCompleteReward;
        summary.rmiName = RmiName_CG_RequestEventMissionCompleteReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventMissionCompleteReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionCompleteReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventMissionCompleteReward;
        summary.rmiName = RmiName_CG_RequestEventMissionCompleteReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventMissionInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventMissionInfo, RmiName_CG_RequestEventMissionInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventMissionInfo;
        summary.rmiName = RmiName_CG_RequestEventMissionInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventMissionInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventMissionInfo;
        summary.rmiName = RmiName_CG_RequestEventMissionInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventQuestClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventQuestClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventQuestClear, RmiName_CG_RequestEventQuestClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventQuestClear;
        summary.rmiName = RmiName_CG_RequestEventQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventQuestClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventQuestClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventQuestClear;
        summary.rmiName = RmiName_CG_RequestEventQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAnotherQuestClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestAnotherQuestClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAnotherQuestClear, RmiName_CG_RequestAnotherQuestClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAnotherQuestClear;
        summary.rmiName = RmiName_CG_RequestAnotherQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAnotherQuestClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAnotherQuestClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAnotherQuestClear;
        summary.rmiName = RmiName_CG_RequestAnotherQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestQuestGuideListAllClearReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestGuideListAllClearReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestQuestGuideListAllClearReward, RmiName_CG_RequestQuestGuideListAllClearReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestQuestGuideListAllClearReward;
        summary.rmiName = RmiName_CG_RequestQuestGuideListAllClearReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestQuestGuideListAllClearReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestGuideListAllClearReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestQuestGuideListAllClearReward;
        summary.rmiName = RmiName_CG_RequestQuestGuideListAllClearReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyVRSearch(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyVRSearch);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyVRSearch, RmiName_CG_RequestLobbyVRSearch,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyVRSearch;
        summary.rmiName = RmiName_CG_RequestLobbyVRSearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyVRSearch (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyVRSearch);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyVRSearch;
        summary.rmiName = RmiName_CG_RequestLobbyVRSearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyVRHelbram(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyVRHelbram);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyVRHelbram, RmiName_CG_RequestLobbyVRHelbram,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyVRHelbram;
        summary.rmiName = RmiName_CG_RequestLobbyVRHelbram;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyVRHelbram (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyVRHelbram);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyVRHelbram;
        summary.rmiName = RmiName_CG_RequestLobbyVRHelbram;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyNpcSkin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int npcID; SimpleCSharp.Marshaler.Read(__msg,out npcID);	
int storyCostumeID; SimpleCSharp.Marshaler.Read(__msg,out storyCostumeID);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcSkin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=npcID.ToString()+",";
parameterString+=storyCostumeID.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestLobbyNpcSkin, RmiName_CG_RequestLobbyNpcSkin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyNpcSkin;
        summary.rmiName = RmiName_CG_RequestLobbyNpcSkin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyNpcSkin (remote,ctx , npcID, storyCostumeID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcSkin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyNpcSkin;
        summary.rmiName = RmiName_CG_RequestLobbyNpcSkin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyNpcGift(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcGift);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyNpcGift, RmiName_CG_RequestLobbyNpcGift,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyNpcGift;
        summary.rmiName = RmiName_CG_RequestLobbyNpcGift;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyNpcGift (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcGift);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyNpcGift;
        summary.rmiName = RmiName_CG_RequestLobbyNpcGift;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyKingAmber(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyKingAmber);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyKingAmber, RmiName_CG_RequestLobbyKingAmber,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyKingAmber;
        summary.rmiName = RmiName_CG_RequestLobbyKingAmber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyKingAmber (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyKingAmber);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyKingAmber;
        summary.rmiName = RmiName_CG_RequestLobbyKingAmber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyDropInteractiveOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyDropInteractiveOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyDropInteractiveOpen, RmiName_CG_RequestLobbyDropInteractiveOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyDropInteractiveOpen;
        summary.rmiName = RmiName_CG_RequestLobbyDropInteractiveOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyDropInteractiveOpen (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyDropInteractiveOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyDropInteractiveOpen;
        summary.rmiName = RmiName_CG_RequestLobbyDropInteractiveOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyUniqueInteractiveOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyUniqueInteractiveOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyUniqueInteractiveOpen, RmiName_CG_RequestLobbyUniqueInteractiveOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyUniqueInteractiveOpen;
        summary.rmiName = RmiName_CG_RequestLobbyUniqueInteractiveOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyUniqueInteractiveOpen (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyUniqueInteractiveOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyUniqueInteractiveOpen;
        summary.rmiName = RmiName_CG_RequestLobbyUniqueInteractiveOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyNpcTalkInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcTalkInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyNpcTalkInfo, RmiName_CG_RequestLobbyNpcTalkInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyNpcTalkInfo;
        summary.rmiName = RmiName_CG_RequestLobbyNpcTalkInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyNpcTalkInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcTalkInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyNpcTalkInfo;
        summary.rmiName = RmiName_CG_RequestLobbyNpcTalkInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyNpcTalkChoice(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcTalkChoice);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyNpcTalkChoice, RmiName_CG_RequestLobbyNpcTalkChoice,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyNpcTalkChoice;
        summary.rmiName = RmiName_CG_RequestLobbyNpcTalkChoice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyNpcTalkChoice (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcTalkChoice);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyNpcTalkChoice;
        summary.rmiName = RmiName_CG_RequestLobbyNpcTalkChoice;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyBarrel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyBarrel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyBarrel, RmiName_CG_RequestLobbyBarrel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyBarrel;
        summary.rmiName = RmiName_CG_RequestLobbyBarrel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyBarrel (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyBarrel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyBarrel;
        summary.rmiName = RmiName_CG_RequestLobbyBarrel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyBarrelRefill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyBarrelRefill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyBarrelRefill, RmiName_CG_RequestLobbyBarrelRefill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyBarrelRefill;
        summary.rmiName = RmiName_CG_RequestLobbyBarrelRefill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyBarrelRefill (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyBarrelRefill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyBarrelRefill;
        summary.rmiName = RmiName_CG_RequestLobbyBarrelRefill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyCleanTable(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyCleanTable);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyCleanTable, RmiName_CG_RequestLobbyCleanTable,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyCleanTable;
        summary.rmiName = RmiName_CG_RequestLobbyCleanTable;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyCleanTable (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyCleanTable);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyCleanTable;
        summary.rmiName = RmiName_CG_RequestLobbyCleanTable;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyServeBeer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyServeBeer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyServeBeer, RmiName_CG_RequestLobbyServeBeer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyServeBeer;
        summary.rmiName = RmiName_CG_RequestLobbyServeBeer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyServeBeer (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyServeBeer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyServeBeer;
        summary.rmiName = RmiName_CG_RequestLobbyServeBeer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyPlayJukebox(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyPlayJukebox);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyPlayJukebox, RmiName_CG_RequestLobbyPlayJukebox,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyPlayJukebox;
        summary.rmiName = RmiName_CG_RequestLobbyPlayJukebox;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyPlayJukebox (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyPlayJukebox);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyPlayJukebox;
        summary.rmiName = RmiName_CG_RequestLobbyPlayJukebox;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyElizabethTouch(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyElizabethTouch);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyElizabethTouch, RmiName_CG_RequestLobbyElizabethTouch,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyElizabethTouch;
        summary.rmiName = RmiName_CG_RequestLobbyElizabethTouch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyElizabethTouch (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyElizabethTouch);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyElizabethTouch;
        summary.rmiName = RmiName_CG_RequestLobbyElizabethTouch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyHawkAnger(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyHawkAnger);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyHawkAnger, RmiName_CG_RequestLobbyHawkAnger,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyHawkAnger;
        summary.rmiName = RmiName_CG_RequestLobbyHawkAnger;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyHawkAnger (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyHawkAnger);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyHawkAnger;
        summary.rmiName = RmiName_CG_RequestLobbyHawkAnger;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAttendanceReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        SimpleCSharp.ClientDeviceType deviceType; SimpleCSharp.Marshaler.Read(__msg,out deviceType);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=deviceType.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestAttendanceReward, RmiName_CG_RequestAttendanceReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAttendanceReward;
        summary.rmiName = RmiName_CG_RequestAttendanceReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAttendanceReward (remote,ctx , deviceType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAttendanceReward;
        summary.rmiName = RmiName_CG_RequestAttendanceReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAttendanceEventReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceEventReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAttendanceEventReward, RmiName_CG_RequestAttendanceEventReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAttendanceEventReward;
        summary.rmiName = RmiName_CG_RequestAttendanceEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAttendanceEventReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceEventReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAttendanceEventReward;
        summary.rmiName = RmiName_CG_RequestAttendanceEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCookingStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingStart, RmiName_CG_RequestCookingStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCookingStart;
        summary.rmiName = RmiName_CG_RequestCookingStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCookingStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCookingStart;
        summary.rmiName = RmiName_CG_RequestCookingStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRecipeActive(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRecipeActive);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRecipeActive, RmiName_CG_RequestRecipeActive,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRecipeActive;
        summary.rmiName = RmiName_CG_RequestRecipeActive;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRecipeActive (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRecipeActive);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRecipeActive;
        summary.rmiName = RmiName_CG_RequestRecipeActive;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCookingRecipeOrderInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeOrderInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeOrderInfo, RmiName_CG_RequestCookingRecipeOrderInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeOrderInfo;
        summary.rmiName = RmiName_CG_RequestCookingRecipeOrderInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCookingRecipeOrderInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeOrderInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeOrderInfo;
        summary.rmiName = RmiName_CG_RequestCookingRecipeOrderInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCookingRecipeOrder(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeOrder);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeOrder, RmiName_CG_RequestCookingRecipeOrder,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeOrder;
        summary.rmiName = RmiName_CG_RequestCookingRecipeOrder;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCookingRecipeOrder (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeOrder);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeOrder;
        summary.rmiName = RmiName_CG_RequestCookingRecipeOrder;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCookingRecipeDisorder(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeDisorder);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeDisorder, RmiName_CG_RequestCookingRecipeDisorder,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeDisorder;
        summary.rmiName = RmiName_CG_RequestCookingRecipeDisorder;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCookingRecipeDisorder (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeDisorder);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeDisorder;
        summary.rmiName = RmiName_CG_RequestCookingRecipeDisorder;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCookingRecipeCollect(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeCollect);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeCollect, RmiName_CG_RequestCookingRecipeCollect,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeCollect;
        summary.rmiName = RmiName_CG_RequestCookingRecipeCollect;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCookingRecipeCollect (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeCollect);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeCollect;
        summary.rmiName = RmiName_CG_RequestCookingRecipeCollect;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCookingRecipeCollectOneSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeCollectOneSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeCollectOneSlot, RmiName_CG_RequestCookingRecipeCollectOneSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeCollectOneSlot;
        summary.rmiName = RmiName_CG_RequestCookingRecipeCollectOneSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCookingRecipeCollectOneSlot (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeCollectOneSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCookingRecipeCollectOneSlot;
        summary.rmiName = RmiName_CG_RequestCookingRecipeCollectOneSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestCookingUseCookingBuff(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingUseCookingBuff);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingUseCookingBuff, RmiName_CG_RequestCookingUseCookingBuff,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestCookingUseCookingBuff;
        summary.rmiName = RmiName_CG_RequestCookingUseCookingBuff;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestCookingUseCookingBuff (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingUseCookingBuff);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestCookingUseCookingBuff;
        summary.rmiName = RmiName_CG_RequestCookingUseCookingBuff;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuestInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestInfo, RmiName_CG_RequestGuestInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuestInfo;
        summary.rmiName = RmiName_CG_RequestGuestInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuestInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuestInfo;
        summary.rmiName = RmiName_CG_RequestGuestInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuestChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestChange, RmiName_CG_RequestGuestChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuestChange;
        summary.rmiName = RmiName_CG_RequestGuestChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuestChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuestChange;
        summary.rmiName = RmiName_CG_RequestGuestChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuestChangeTarget(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestChangeTarget);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestChangeTarget, RmiName_CG_RequestGuestChangeTarget,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuestChangeTarget;
        summary.rmiName = RmiName_CG_RequestGuestChangeTarget;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuestChangeTarget (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestChangeTarget);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuestChangeTarget;
        summary.rmiName = RmiName_CG_RequestGuestChangeTarget;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuestTalk(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestTalk);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestTalk, RmiName_CG_RequestGuestTalk,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuestTalk;
        summary.rmiName = RmiName_CG_RequestGuestTalk;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuestTalk (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestTalk);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuestTalk;
        summary.rmiName = RmiName_CG_RequestGuestTalk;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuestGift(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestGift);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestGift, RmiName_CG_RequestGuestGift,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuestGift;
        summary.rmiName = RmiName_CG_RequestGuestGift;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuestGift (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestGift);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuestGift;
        summary.rmiName = RmiName_CG_RequestGuestGift;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBirthdayNpcInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBirthdayNpcInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBirthdayNpcInfo, RmiName_CG_RequestBirthdayNpcInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBirthdayNpcInfo;
        summary.rmiName = RmiName_CG_RequestBirthdayNpcInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBirthdayNpcInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBirthdayNpcInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBirthdayNpcInfo;
        summary.rmiName = RmiName_CG_RequestBirthdayNpcInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRestReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRestReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRestReward, RmiName_CG_RequestRestReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRestReward;
        summary.rmiName = RmiName_CG_RequestRestReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRestReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRestReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRestReward;
        summary.rmiName = RmiName_CG_RequestRestReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyHousingShopInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyHousingShopInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyHousingShopInfo, RmiName_CG_RequestLobbyHousingShopInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyHousingShopInfo;
        summary.rmiName = RmiName_CG_RequestLobbyHousingShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyHousingShopInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyHousingShopInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyHousingShopInfo;
        summary.rmiName = RmiName_CG_RequestLobbyHousingShopInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyHousingShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyHousingShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyHousingShopBuy, RmiName_CG_RequestLobbyHousingShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyHousingShopBuy;
        summary.rmiName = RmiName_CG_RequestLobbyHousingShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyHousingShopBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyHousingShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyHousingShopBuy;
        summary.rmiName = RmiName_CG_RequestLobbyHousingShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestLobbyFurnitureRegist(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyFurnitureRegist);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyFurnitureRegist, RmiName_CG_RequestLobbyFurnitureRegist,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyFurnitureRegist;
        summary.rmiName = RmiName_CG_RequestLobbyFurnitureRegist;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestLobbyFurnitureRegist (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyFurnitureRegist);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestLobbyFurnitureRegist;
        summary.rmiName = RmiName_CG_RequestLobbyFurnitureRegist;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestUserMusicEdit(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestUserMusicEdit);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestUserMusicEdit, RmiName_CG_RequestUserMusicEdit,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestUserMusicEdit;
        summary.rmiName = RmiName_CG_RequestUserMusicEdit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestUserMusicEdit (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestUserMusicEdit);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestUserMusicEdit;
        summary.rmiName = RmiName_CG_RequestUserMusicEdit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAttendanceFortuneEventReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceFortuneEventReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAttendanceFortuneEventReward, RmiName_CG_RequestAttendanceFortuneEventReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAttendanceFortuneEventReward;
        summary.rmiName = RmiName_CG_RequestAttendanceFortuneEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAttendanceFortuneEventReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceFortuneEventReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAttendanceFortuneEventReward;
        summary.rmiName = RmiName_CG_RequestAttendanceFortuneEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointGoldDonation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointGoldDonation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointGoldDonation, RmiName_CG_RequestBasePointGoldDonation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointGoldDonation;
        summary.rmiName = RmiName_CG_RequestBasePointGoldDonation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointGoldDonation (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointGoldDonation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointGoldDonation;
        summary.rmiName = RmiName_CG_RequestBasePointGoldDonation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointSetTrigger(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointSetTrigger);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointSetTrigger, RmiName_CG_RequestBasePointSetTrigger,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointSetTrigger;
        summary.rmiName = RmiName_CG_RequestBasePointSetTrigger;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointSetTrigger (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointSetTrigger);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointSetTrigger;
        summary.rmiName = RmiName_CG_RequestBasePointSetTrigger;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointDropInteractiveOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDropInteractiveOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointDropInteractiveOpen, RmiName_CG_RequestBasePointDropInteractiveOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointDropInteractiveOpen;
        summary.rmiName = RmiName_CG_RequestBasePointDropInteractiveOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointDropInteractiveOpen (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDropInteractiveOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointDropInteractiveOpen;
        summary.rmiName = RmiName_CG_RequestBasePointDropInteractiveOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointUniqueInteractiveOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointUniqueInteractiveOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointUniqueInteractiveOpen, RmiName_CG_RequestBasePointUniqueInteractiveOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointUniqueInteractiveOpen;
        summary.rmiName = RmiName_CG_RequestBasePointUniqueInteractiveOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointUniqueInteractiveOpen (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointUniqueInteractiveOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointUniqueInteractiveOpen;
        summary.rmiName = RmiName_CG_RequestBasePointUniqueInteractiveOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointDailyReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDailyReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointDailyReward, RmiName_CG_RequestBasePointDailyReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointDailyReward;
        summary.rmiName = RmiName_CG_RequestBasePointDailyReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointDailyReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDailyReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointDailyReward;
        summary.rmiName = RmiName_CG_RequestBasePointDailyReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointDonationEventReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDonationEventReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointDonationEventReward, RmiName_CG_RequestBasePointDonationEventReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointDonationEventReward;
        summary.rmiName = RmiName_CG_RequestBasePointDonationEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointDonationEventReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDonationEventReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointDonationEventReward;
        summary.rmiName = RmiName_CG_RequestBasePointDonationEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointDonationInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDonationInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointDonationInfo, RmiName_CG_RequestBasePointDonationInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointDonationInfo;
        summary.rmiName = RmiName_CG_RequestBasePointDonationInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointDonationInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDonationInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointDonationInfo;
        summary.rmiName = RmiName_CG_RequestBasePointDonationInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBasePointEventGoldDonation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointEventGoldDonation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointEventGoldDonation, RmiName_CG_RequestBasePointEventGoldDonation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointEventGoldDonation;
        summary.rmiName = RmiName_CG_RequestBasePointEventGoldDonation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBasePointEventGoldDonation (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointEventGoldDonation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBasePointEventGoldDonation;
        summary.rmiName = RmiName_CG_RequestBasePointEventGoldDonation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventBasepointInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBasepointInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventBasepointInfo, RmiName_CG_RequestEventBasepointInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventBasepointInfo;
        summary.rmiName = RmiName_CG_RequestEventBasepointInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventBasepointInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBasepointInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventBasepointInfo;
        summary.rmiName = RmiName_CG_RequestEventBasepointInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroySetInviteOption(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroySetInviteOption);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroySetInviteOption, RmiName_CG_RequestDestroySetInviteOption,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroySetInviteOption;
        summary.rmiName = RmiName_CG_RequestDestroySetInviteOption;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroySetInviteOption (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroySetInviteOption);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroySetInviteOption;
        summary.rmiName = RmiName_CG_RequestDestroySetInviteOption;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyGetUserLoginList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetUserLoginList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyGetUserLoginList, RmiName_CG_RequestDestroyGetUserLoginList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyGetUserLoginList;
        summary.rmiName = RmiName_CG_RequestDestroyGetUserLoginList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyGetUserLoginList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetUserLoginList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyGetUserLoginList;
        summary.rmiName = RmiName_CG_RequestDestroyGetUserLoginList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyGetFriendLoginList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetFriendLoginList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyGetFriendLoginList, RmiName_CG_RequestDestroyGetFriendLoginList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyGetFriendLoginList;
        summary.rmiName = RmiName_CG_RequestDestroyGetFriendLoginList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyGetFriendLoginList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetFriendLoginList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyGetFriendLoginList;
        summary.rmiName = RmiName_CG_RequestDestroyGetFriendLoginList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyGetGuildLoginList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetGuildLoginList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyGetGuildLoginList, RmiName_CG_RequestDestroyGetGuildLoginList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyGetGuildLoginList;
        summary.rmiName = RmiName_CG_RequestDestroyGetGuildLoginList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyGetGuildLoginList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetGuildLoginList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyGetGuildLoginList;
        summary.rmiName = RmiName_CG_RequestDestroyGetGuildLoginList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyGetReceivedInvitationList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetReceivedInvitationList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyGetReceivedInvitationList, RmiName_CG_RequestDestroyGetReceivedInvitationList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyGetReceivedInvitationList;
        summary.rmiName = RmiName_CG_RequestDestroyGetReceivedInvitationList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyGetReceivedInvitationList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetReceivedInvitationList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyGetReceivedInvitationList;
        summary.rmiName = RmiName_CG_RequestDestroyGetReceivedInvitationList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyInvite(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyInvite);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyInvite, RmiName_CG_RequestDestroyInvite,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyInvite;
        summary.rmiName = RmiName_CG_RequestDestroyInvite;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyInvite (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyInvite);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyInvite;
        summary.rmiName = RmiName_CG_RequestDestroyInvite;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyRemoveInvitation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemoveInvitation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyRemoveInvitation, RmiName_CG_RequestDestroyRemoveInvitation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyRemoveInvitation;
        summary.rmiName = RmiName_CG_RequestDestroyRemoveInvitation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyRemoveInvitation (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemoveInvitation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyRemoveInvitation;
        summary.rmiName = RmiName_CG_RequestDestroyRemoveInvitation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyRemoveJoinInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemoveJoinInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyRemoveJoinInfo, RmiName_CG_RequestDestroyRemoveJoinInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyRemoveJoinInfo;
        summary.rmiName = RmiName_CG_RequestDestroyRemoveJoinInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyRemoveJoinInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemoveJoinInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyRemoveJoinInfo;
        summary.rmiName = RmiName_CG_RequestDestroyRemoveJoinInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyCreate, RmiName_CG_RequestDestroyCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyCreate;
        summary.rmiName = RmiName_CG_RequestDestroyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyCreate (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyCreate;
        summary.rmiName = RmiName_CG_RequestDestroyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyJoin, RmiName_CG_RequestDestroyJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyJoin;
        summary.rmiName = RmiName_CG_RequestDestroyJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyJoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyJoin;
        summary.rmiName = RmiName_CG_RequestDestroyJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyStart, RmiName_CG_RequestDestroyStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyStart;
        summary.rmiName = RmiName_CG_RequestDestroyStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyStart;
        summary.rmiName = RmiName_CG_RequestDestroyStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyBattleStart, RmiName_CG_RequestDestroyBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyBattleStart;
        summary.rmiName = RmiName_CG_RequestDestroyBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyBattleStart;
        summary.rmiName = RmiName_CG_RequestDestroyBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyClear, RmiName_CG_RequestDestroyClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyClear;
        summary.rmiName = RmiName_CG_RequestDestroyClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyClear;
        summary.rmiName = RmiName_CG_RequestDestroyClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyReJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyReJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyReJoin, RmiName_CG_RequestDestroyReJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyReJoin;
        summary.rmiName = RmiName_CG_RequestDestroyReJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyReJoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyReJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyReJoin;
        summary.rmiName = RmiName_CG_RequestDestroyReJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyRemove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyRemove, RmiName_CG_RequestDestroyRemove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyRemove;
        summary.rmiName = RmiName_CG_RequestDestroyRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyRemove (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyRemove;
        summary.rmiName = RmiName_CG_RequestDestroyRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyBattleEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyBattleEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyBattleEnd, RmiName_CG_RequestDestroyBattleEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyBattleEnd;
        summary.rmiName = RmiName_CG_RequestDestroyBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyBattleEnd (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyBattleEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyBattleEnd;
        summary.rmiName = RmiName_CG_RequestDestroyBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyInviteAI(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyInviteAI);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyInviteAI, RmiName_CG_RequestDestroyInviteAI,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyInviteAI;
        summary.rmiName = RmiName_CG_RequestDestroyInviteAI;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyInviteAI (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyInviteAI);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyInviteAI;
        summary.rmiName = RmiName_CG_RequestDestroyInviteAI;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestDestroyKickOutAI(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyKickOutAI);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyKickOutAI, RmiName_CG_RequestDestroyKickOutAI,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyKickOutAI;
        summary.rmiName = RmiName_CG_RequestDestroyKickOutAI;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestDestroyKickOutAI (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyKickOutAI);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestDestroyKickOutAI;
        summary.rmiName = RmiName_CG_RequestDestroyKickOutAI;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventDestroyCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventDestroyCreate, RmiName_CG_RequestEventDestroyCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventDestroyCreate;
        summary.rmiName = RmiName_CG_RequestEventDestroyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventDestroyCreate (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventDestroyCreate;
        summary.rmiName = RmiName_CG_RequestEventDestroyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventDestroyStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventDestroyStart, RmiName_CG_RequestEventDestroyStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventDestroyStart;
        summary.rmiName = RmiName_CG_RequestEventDestroyStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventDestroyStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventDestroyStart;
        summary.rmiName = RmiName_CG_RequestEventDestroyStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventDestroyClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventDestroyClear, RmiName_CG_RequestEventDestroyClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventDestroyClear;
        summary.rmiName = RmiName_CG_RequestEventDestroyClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventDestroyClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventDestroyClear;
        summary.rmiName = RmiName_CG_RequestEventDestroyClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventDestroyRemove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyRemove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventDestroyRemove, RmiName_CG_RequestEventDestroyRemove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventDestroyRemove;
        summary.rmiName = RmiName_CG_RequestEventDestroyRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventDestroyRemove (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyRemove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventDestroyRemove;
        summary.rmiName = RmiName_CG_RequestEventDestroyRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventChallengeDestroyCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyCreate, RmiName_CG_RequestEventChallengeDestroyCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyCreate;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventChallengeDestroyCreate (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyCreate;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventChallengeDestroyStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyStart, RmiName_CG_RequestEventChallengeDestroyStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyStart;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventChallengeDestroyStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyStart;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventChallengeDestroyClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyClear, RmiName_CG_RequestEventChallengeDestroyClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyClear;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventChallengeDestroyClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyClear;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventChallengeDestroyPointRefresh(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyPointRefresh);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyPointRefresh, RmiName_CG_RequestEventChallengeDestroyPointRefresh,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyPointRefresh;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyPointRefresh;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventChallengeDestroyPointRefresh (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyPointRefresh);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyPointRefresh;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyPointRefresh;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventChallengeDestroyUserReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyUserReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyUserReward, RmiName_CG_RequestEventChallengeDestroyUserReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyUserReward;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyUserReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventChallengeDestroyUserReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyUserReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyUserReward;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyUserReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventChallengeDestroyWorldReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyWorldReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyWorldReward, RmiName_CG_RequestEventChallengeDestroyWorldReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyWorldReward;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyWorldReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventChallengeDestroyWorldReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyWorldReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventChallengeDestroyWorldReward;
        summary.rmiName = RmiName_CG_RequestEventChallengeDestroyWorldReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendList, RmiName_CG_RequestFriendList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendList;
        summary.rmiName = RmiName_CG_RequestFriendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendList;
        summary.rmiName = RmiName_CG_RequestFriendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendGuildInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendGuildInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendGuildInfo, RmiName_CG_RequestFriendGuildInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendGuildInfo;
        summary.rmiName = RmiName_CG_RequestFriendGuildInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendGuildInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendGuildInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendGuildInfo;
        summary.rmiName = RmiName_CG_RequestFriendGuildInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendApplySendList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplySendList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplySendList, RmiName_CG_RequestFriendApplySendList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplySendList;
        summary.rmiName = RmiName_CG_RequestFriendApplySendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendApplySendList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplySendList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplySendList;
        summary.rmiName = RmiName_CG_RequestFriendApplySendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendApplyReceiveList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveList, RmiName_CG_RequestFriendApplyReceiveList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveList;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendApplyReceiveList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveList;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendApplySend(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplySend);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplySend, RmiName_CG_RequestFriendApplySend,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplySend;
        summary.rmiName = RmiName_CG_RequestFriendApplySend;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendApplySend (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplySend);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplySend;
        summary.rmiName = RmiName_CG_RequestFriendApplySend;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendApplyReject(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReject);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReject, RmiName_CG_RequestFriendApplyReject,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReject;
        summary.rmiName = RmiName_CG_RequestFriendApplyReject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendApplyReject (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReject);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReject;
        summary.rmiName = RmiName_CG_RequestFriendApplyReject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendApplyReceiveAccept(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveAccept);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveAccept, RmiName_CG_RequestFriendApplyReceiveAccept,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveAccept;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveAccept;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendApplyReceiveAccept (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveAccept);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveAccept;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveAccept;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveAcceptList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveAcceptList, RmiName_CG_RequestFriendApplyReceiveAcceptList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveAcceptList;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendApplyReceiveAcceptList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveAcceptList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveAcceptList;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuse(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveRefuse);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveRefuse, RmiName_CG_RequestFriendApplyReceiveRefuse,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveRefuse;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveRefuse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendApplyReceiveRefuse (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveRefuse);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveRefuse;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveRefuse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveRefuseList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveRefuseList, RmiName_CG_RequestFriendApplyReceiveRefuseList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveRefuseList;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendApplyReceiveRefuseList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveRefuseList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendApplyReceiveRefuseList;
        summary.rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendRemove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendRemove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendRemove, RmiName_CG_RequestFriendRemove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendRemove;
        summary.rmiName = RmiName_CG_RequestFriendRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendRemove (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendRemove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendRemove;
        summary.rmiName = RmiName_CG_RequestFriendRemove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendSearch(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendSearch);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendSearch, RmiName_CG_RequestFriendSearch,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendSearch;
        summary.rmiName = RmiName_CG_RequestFriendSearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendSearch (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendSearch);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendSearch;
        summary.rmiName = RmiName_CG_RequestFriendSearch;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendVisit(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendVisit);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendVisit, RmiName_CG_RequestFriendVisit,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendVisit;
        summary.rmiName = RmiName_CG_RequestFriendVisit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendVisit (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendVisit);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendVisit;
        summary.rmiName = RmiName_CG_RequestFriendVisit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendPointSend(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointSend);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendPointSend, RmiName_CG_RequestFriendPointSend,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendPointSend;
        summary.rmiName = RmiName_CG_RequestFriendPointSend;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendPointSend (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointSend);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendPointSend;
        summary.rmiName = RmiName_CG_RequestFriendPointSend;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendPointSendAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointSendAll);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendPointSendAll, RmiName_CG_RequestFriendPointSendAll,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendPointSendAll;
        summary.rmiName = RmiName_CG_RequestFriendPointSendAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendPointSendAll (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointSendAll);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendPointSendAll;
        summary.rmiName = RmiName_CG_RequestFriendPointSendAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendLobbyInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendLobbyInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendLobbyInfo, RmiName_CG_RequestFriendLobbyInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendLobbyInfo;
        summary.rmiName = RmiName_CG_RequestFriendLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendLobbyInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendLobbyInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendLobbyInfo;
        summary.rmiName = RmiName_CG_RequestFriendLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendCookingRecipeInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingRecipeInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendCookingRecipeInfo, RmiName_CG_RequestFriendCookingRecipeInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendCookingRecipeInfo;
        summary.rmiName = RmiName_CG_RequestFriendCookingRecipeInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendCookingRecipeInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingRecipeInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendCookingRecipeInfo;
        summary.rmiName = RmiName_CG_RequestFriendCookingRecipeInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendCookingEat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingEat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendCookingEat, RmiName_CG_RequestFriendCookingEat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendCookingEat;
        summary.rmiName = RmiName_CG_RequestFriendCookingEat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendCookingEat (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingEat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendCookingEat;
        summary.rmiName = RmiName_CG_RequestFriendCookingEat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendCookingEatFriendList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingEatFriendList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendCookingEatFriendList, RmiName_CG_RequestFriendCookingEatFriendList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendCookingEatFriendList;
        summary.rmiName = RmiName_CG_RequestFriendCookingEatFriendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendCookingEatFriendList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingEatFriendList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendCookingEatFriendList;
        summary.rmiName = RmiName_CG_RequestFriendCookingEatFriendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildRecommendList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildRecommendList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildRecommendList, RmiName_CG_RequestGuildRecommendList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildRecommendList;
        summary.rmiName = RmiName_CG_RequestGuildRecommendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildRecommendList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildRecommendList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildRecommendList;
        summary.rmiName = RmiName_CG_RequestGuildRecommendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildInfoWithMemberList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildInfoWithMemberList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildInfoWithMemberList, RmiName_CG_RequestGuildInfoWithMemberList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildInfoWithMemberList;
        summary.rmiName = RmiName_CG_RequestGuildInfoWithMemberList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildInfoWithMemberList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildInfoWithMemberList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildInfoWithMemberList;
        summary.rmiName = RmiName_CG_RequestGuildInfoWithMemberList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildSearchByName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSearchByName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSearchByName, RmiName_CG_RequestGuildSearchByName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSearchByName;
        summary.rmiName = RmiName_CG_RequestGuildSearchByName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildSearchByName (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSearchByName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSearchByName;
        summary.rmiName = RmiName_CG_RequestGuildSearchByName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildCreate, RmiName_CG_RequestGuildCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildCreate;
        summary.rmiName = RmiName_CG_RequestGuildCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildCreate (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildCreate;
        summary.rmiName = RmiName_CG_RequestGuildCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildDisband(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildDisband);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildDisband, RmiName_CG_RequestGuildDisband,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildDisband;
        summary.rmiName = RmiName_CG_RequestGuildDisband;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildDisband (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildDisband);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildDisband;
        summary.rmiName = RmiName_CG_RequestGuildDisband;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildApplicantList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildApplicantList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildApplicantList, RmiName_CG_RequestGuildApplicantList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildApplicantList;
        summary.rmiName = RmiName_CG_RequestGuildApplicantList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildApplicantList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildApplicantList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildApplicantList;
        summary.rmiName = RmiName_CG_RequestGuildApplicantList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildApply(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildApply);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildApply, RmiName_CG_RequestGuildApply,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildApply;
        summary.rmiName = RmiName_CG_RequestGuildApply;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildApply (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildApply);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildApply;
        summary.rmiName = RmiName_CG_RequestGuildApply;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildReturnApplication(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildReturnApplication);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildReturnApplication, RmiName_CG_RequestGuildReturnApplication,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildReturnApplication;
        summary.rmiName = RmiName_CG_RequestGuildReturnApplication;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildReturnApplication (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildReturnApplication);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildReturnApplication;
        summary.rmiName = RmiName_CG_RequestGuildReturnApplication;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildAcceptApplicant(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildAcceptApplicant);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildAcceptApplicant, RmiName_CG_RequestGuildAcceptApplicant,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildAcceptApplicant;
        summary.rmiName = RmiName_CG_RequestGuildAcceptApplicant;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildAcceptApplicant (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildAcceptApplicant);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildAcceptApplicant;
        summary.rmiName = RmiName_CG_RequestGuildAcceptApplicant;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildRejectApplicant(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildRejectApplicant);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildRejectApplicant, RmiName_CG_RequestGuildRejectApplicant,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildRejectApplicant;
        summary.rmiName = RmiName_CG_RequestGuildRejectApplicant;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildRejectApplicant (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildRejectApplicant);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildRejectApplicant;
        summary.rmiName = RmiName_CG_RequestGuildRejectApplicant;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildLevelUp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildLevelUp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildLevelUp, RmiName_CG_RequestGuildLevelUp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildLevelUp;
        summary.rmiName = RmiName_CG_RequestGuildLevelUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildLevelUp (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildLevelUp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildLevelUp;
        summary.rmiName = RmiName_CG_RequestGuildLevelUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildChangeName(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildChangeName);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildChangeName, RmiName_CG_RequestGuildChangeName,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildChangeName;
        summary.rmiName = RmiName_CG_RequestGuildChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildChangeName (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildChangeName);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildChangeName;
        summary.rmiName = RmiName_CG_RequestGuildChangeName;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildChangeBoard(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildChangeBoard);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildChangeBoard, RmiName_CG_RequestGuildChangeBoard,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildChangeBoard;
        summary.rmiName = RmiName_CG_RequestGuildChangeBoard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildChangeBoard (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildChangeBoard);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildChangeBoard;
        summary.rmiName = RmiName_CG_RequestGuildChangeBoard;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildChangeMaster(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildChangeMaster);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildChangeMaster, RmiName_CG_RequestGuildChangeMaster,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildChangeMaster;
        summary.rmiName = RmiName_CG_RequestGuildChangeMaster;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildChangeMaster (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildChangeMaster);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildChangeMaster;
        summary.rmiName = RmiName_CG_RequestGuildChangeMaster;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildChangeMemberGrade(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildChangeMemberGrade);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildChangeMemberGrade, RmiName_CG_RequestGuildChangeMemberGrade,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildChangeMemberGrade;
        summary.rmiName = RmiName_CG_RequestGuildChangeMemberGrade;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildChangeMemberGrade (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildChangeMemberGrade);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildChangeMemberGrade;
        summary.rmiName = RmiName_CG_RequestGuildChangeMemberGrade;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildKickOutMember(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildKickOutMember);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildKickOutMember, RmiName_CG_RequestGuildKickOutMember,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildKickOutMember;
        summary.rmiName = RmiName_CG_RequestGuildKickOutMember;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildKickOutMember (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildKickOutMember);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildKickOutMember;
        summary.rmiName = RmiName_CG_RequestGuildKickOutMember;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildLeave, RmiName_CG_RequestGuildLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildLeave;
        summary.rmiName = RmiName_CG_RequestGuildLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildLeave (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildLeave;
        summary.rmiName = RmiName_CG_RequestGuildLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildRoomInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildRoomInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildRoomInfo, RmiName_CG_RequestGuildRoomInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildRoomInfo;
        summary.rmiName = RmiName_CG_RequestGuildRoomInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildRoomInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildRoomInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildRoomInfo;
        summary.rmiName = RmiName_CG_RequestGuildRoomInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildAttendance(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildAttendance);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildAttendance, RmiName_CG_RequestGuildAttendance,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildAttendance;
        summary.rmiName = RmiName_CG_RequestGuildAttendance;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildAttendance (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildAttendance);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildAttendance;
        summary.rmiName = RmiName_CG_RequestGuildAttendance;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildAttendanceReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildAttendanceReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildAttendanceReward, RmiName_CG_RequestGuildAttendanceReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildAttendanceReward;
        summary.rmiName = RmiName_CG_RequestGuildAttendanceReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildAttendanceReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildAttendanceReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildAttendanceReward;
        summary.rmiName = RmiName_CG_RequestGuildAttendanceReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildUserInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildUserInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildUserInfo, RmiName_CG_RequestGuildUserInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildUserInfo;
        summary.rmiName = RmiName_CG_RequestGuildUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildUserInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildUserInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildUserInfo;
        summary.rmiName = RmiName_CG_RequestGuildUserInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildAttendanceStatus(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildAttendanceStatus);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildAttendanceStatus, RmiName_CG_RequestGuildAttendanceStatus,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildAttendanceStatus;
        summary.rmiName = RmiName_CG_RequestGuildAttendanceStatus;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildAttendanceStatus (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildAttendanceStatus);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildAttendanceStatus;
        summary.rmiName = RmiName_CG_RequestGuildAttendanceStatus;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildDonation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildDonation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildDonation, RmiName_CG_RequestGuildDonation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildDonation;
        summary.rmiName = RmiName_CG_RequestGuildDonation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildDonation (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildDonation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildDonation;
        summary.rmiName = RmiName_CG_RequestGuildDonation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildDonationInitialize(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildDonationInitialize);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildDonationInitialize, RmiName_CG_RequestGuildDonationInitialize,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildDonationInitialize;
        summary.rmiName = RmiName_CG_RequestGuildDonationInitialize;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildDonationInitialize (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildDonationInitialize);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildDonationInitialize;
        summary.rmiName = RmiName_CG_RequestGuildDonationInitialize;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildMissionInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildMissionInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildMissionInfo, RmiName_CG_RequestGuildMissionInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildMissionInfo;
        summary.rmiName = RmiName_CG_RequestGuildMissionInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildMissionInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildMissionInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildMissionInfo;
        summary.rmiName = RmiName_CG_RequestGuildMissionInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildMissionReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildMissionReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildMissionReward, RmiName_CG_RequestGuildMissionReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildMissionReward;
        summary.rmiName = RmiName_CG_RequestGuildMissionReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildMissionReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildMissionReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildMissionReward;
        summary.rmiName = RmiName_CG_RequestGuildMissionReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildDonationInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildDonationInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildDonationInfo, RmiName_CG_RequestGuildDonationInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildDonationInfo;
        summary.rmiName = RmiName_CG_RequestGuildDonationInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildDonationInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildDonationInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildDonationInfo;
        summary.rmiName = RmiName_CG_RequestGuildDonationInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildSkillInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillInfo, RmiName_CG_RequestGuildSkillInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillInfo;
        summary.rmiName = RmiName_CG_RequestGuildSkillInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildSkillInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillInfo;
        summary.rmiName = RmiName_CG_RequestGuildSkillInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildSkillLevelUp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillLevelUp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillLevelUp, RmiName_CG_RequestGuildSkillLevelUp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillLevelUp;
        summary.rmiName = RmiName_CG_RequestGuildSkillLevelUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildSkillLevelUp (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillLevelUp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillLevelUp;
        summary.rmiName = RmiName_CG_RequestGuildSkillLevelUp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildSkillUse(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillUse);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillUse, RmiName_CG_RequestGuildSkillUse,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillUse;
        summary.rmiName = RmiName_CG_RequestGuildSkillUse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildSkillUse (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillUse);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillUse;
        summary.rmiName = RmiName_CG_RequestGuildSkillUse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildSkillDisuse(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillDisuse);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillDisuse, RmiName_CG_RequestGuildSkillDisuse,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillDisuse;
        summary.rmiName = RmiName_CG_RequestGuildSkillDisuse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildSkillDisuse (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillDisuse);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillDisuse;
        summary.rmiName = RmiName_CG_RequestGuildSkillDisuse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildSkillUseInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillUseInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillUseInfo, RmiName_CG_RequestGuildSkillUseInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillUseInfo;
        summary.rmiName = RmiName_CG_RequestGuildSkillUseInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildSkillUseInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillUseInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildSkillUseInfo;
        summary.rmiName = RmiName_CG_RequestGuildSkillUseInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildMemberRankPointReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildMemberRankPointReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildMemberRankPointReward, RmiName_CG_RequestGuildMemberRankPointReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildMemberRankPointReward;
        summary.rmiName = RmiName_CG_RequestGuildMemberRankPointReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildMemberRankPointReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildMemberRankPointReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildMemberRankPointReward;
        summary.rmiName = RmiName_CG_RequestGuildMemberRankPointReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildBattlePointRegister(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildBattlePointRegister);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildBattlePointRegister, RmiName_CG_RequestGuildBattlePointRegister,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildBattlePointRegister;
        summary.rmiName = RmiName_CG_RequestGuildBattlePointRegister;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildBattlePointRegister (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildBattlePointRegister);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildBattlePointRegister;
        summary.rmiName = RmiName_CG_RequestGuildBattlePointRegister;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildBattlePointMemeberRankList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildBattlePointMemeberRankList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildBattlePointMemeberRankList, RmiName_CG_RequestGuildBattlePointMemeberRankList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildBattlePointMemeberRankList;
        summary.rmiName = RmiName_CG_RequestGuildBattlePointMemeberRankList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildBattlePointMemeberRankList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildBattlePointMemeberRankList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildBattlePointMemeberRankList;
        summary.rmiName = RmiName_CG_RequestGuildBattlePointMemeberRankList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildBattlePointGuildRankList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildBattlePointGuildRankList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildBattlePointGuildRankList, RmiName_CG_RequestGuildBattlePointGuildRankList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildBattlePointGuildRankList;
        summary.rmiName = RmiName_CG_RequestGuildBattlePointGuildRankList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildBattlePointGuildRankList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildBattlePointGuildRankList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildBattlePointGuildRankList;
        summary.rmiName = RmiName_CG_RequestGuildBattlePointGuildRankList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildBattlePointUserRankList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildBattlePointUserRankList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildBattlePointUserRankList, RmiName_CG_RequestGuildBattlePointUserRankList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildBattlePointUserRankList;
        summary.rmiName = RmiName_CG_RequestGuildBattlePointUserRankList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildBattlePointUserRankList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildBattlePointUserRankList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildBattlePointUserRankList;
        summary.rmiName = RmiName_CG_RequestGuildBattlePointUserRankList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestAPRechargeByUseItem(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestAPRechargeByUseItem);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAPRechargeByUseItem, RmiName_CG_RequestAPRechargeByUseItem,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestAPRechargeByUseItem;
        summary.rmiName = RmiName_CG_RequestAPRechargeByUseItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestAPRechargeByUseItem (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAPRechargeByUseItem);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestAPRechargeByUseItem;
        summary.rmiName = RmiName_CG_RequestAPRechargeByUseItem;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWeekStageKeyOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeekStageKeyOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeekStageKeyOpen, RmiName_CG_RequestWeekStageKeyOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWeekStageKeyOpen;
        summary.rmiName = RmiName_CG_RequestWeekStageKeyOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWeekStageKeyOpen (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeekStageKeyOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWeekStageKeyOpen;
        summary.rmiName = RmiName_CG_RequestWeekStageKeyOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFoodBuffAutoUseOnOff(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFoodBuffAutoUseOnOff);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFoodBuffAutoUseOnOff, RmiName_CG_RequestFoodBuffAutoUseOnOff,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFoodBuffAutoUseOnOff;
        summary.rmiName = RmiName_CG_RequestFoodBuffAutoUseOnOff;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFoodBuffAutoUseOnOff (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFoodBuffAutoUseOnOff);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFoodBuffAutoUseOnOff;
        summary.rmiName = RmiName_CG_RequestFoodBuffAutoUseOnOff;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemUseRankExp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseRankExp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseRankExp, RmiName_CG_RequestItemUseRankExp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseRankExp;
        summary.rmiName = RmiName_CG_RequestItemUseRankExp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemUseRankExp (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseRankExp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseRankExp;
        summary.rmiName = RmiName_CG_RequestItemUseRankExp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemUseBoxOpen(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseBoxOpen);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseBoxOpen, RmiName_CG_RequestItemUseBoxOpen,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseBoxOpen;
        summary.rmiName = RmiName_CG_RequestItemUseBoxOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemUseBoxOpen (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseBoxOpen);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseBoxOpen;
        summary.rmiName = RmiName_CG_RequestItemUseBoxOpen;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemUseRecipeExp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseRecipeExp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseRecipeExp, RmiName_CG_RequestItemUseRecipeExp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseRecipeExp;
        summary.rmiName = RmiName_CG_RequestItemUseRecipeExp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemUseRecipeExp (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseRecipeExp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseRecipeExp;
        summary.rmiName = RmiName_CG_RequestItemUseRecipeExp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemUseWeeklyKeyBox(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseWeeklyKeyBox);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseWeeklyKeyBox, RmiName_CG_RequestItemUseWeeklyKeyBox,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseWeeklyKeyBox;
        summary.rmiName = RmiName_CG_RequestItemUseWeeklyKeyBox;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemUseWeeklyKeyBox (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseWeeklyKeyBox);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseWeeklyKeyBox;
        summary.rmiName = RmiName_CG_RequestItemUseWeeklyKeyBox;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemUseWeaponTicket(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseWeaponTicket);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseWeaponTicket, RmiName_CG_RequestItemUseWeaponTicket,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseWeaponTicket;
        summary.rmiName = RmiName_CG_RequestItemUseWeaponTicket;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemUseWeaponTicket (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseWeaponTicket);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseWeaponTicket;
        summary.rmiName = RmiName_CG_RequestItemUseWeaponTicket;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestItemUseMusic(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseMusic);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseMusic, RmiName_CG_RequestItemUseMusic,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseMusic;
        summary.rmiName = RmiName_CG_RequestItemUseMusic;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestItemUseMusic (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseMusic);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestItemUseMusic;
        summary.rmiName = RmiName_CG_RequestItemUseMusic;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTutorialAddStep(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int tutorialStep; SimpleCSharp.Marshaler.Read(__msg,out tutorialStep);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialAddStep);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=tutorialStep.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestTutorialAddStep, RmiName_CG_RequestTutorialAddStep,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTutorialAddStep;
        summary.rmiName = RmiName_CG_RequestTutorialAddStep;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTutorialAddStep (remote,ctx , tutorialStep );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialAddStep);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTutorialAddStep;
        summary.rmiName = RmiName_CG_RequestTutorialAddStep;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTutorialSetFlag(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        SimpleCSharp.TutorialType tutorialType; SimpleCSharp.Marshaler.Read(__msg,out tutorialType);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialSetFlag);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=tutorialType.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestTutorialSetFlag, RmiName_CG_RequestTutorialSetFlag,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTutorialSetFlag;
        summary.rmiName = RmiName_CG_RequestTutorialSetFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTutorialSetFlag (remote,ctx , tutorialType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialSetFlag);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTutorialSetFlag;
        summary.rmiName = RmiName_CG_RequestTutorialSetFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTutorialHeroFlag(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialHeroFlag);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTutorialHeroFlag, RmiName_CG_RequestTutorialHeroFlag,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTutorialHeroFlag;
        summary.rmiName = RmiName_CG_RequestTutorialHeroFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTutorialHeroFlag (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialHeroFlag);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTutorialHeroFlag;
        summary.rmiName = RmiName_CG_RequestTutorialHeroFlag;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTutorialGambleShopBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int tutorialStep; SimpleCSharp.Marshaler.Read(__msg,out tutorialStep);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialGambleShopBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=tutorialStep.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestTutorialGambleShopBuy, RmiName_CG_RequestTutorialGambleShopBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTutorialGambleShopBuy;
        summary.rmiName = RmiName_CG_RequestTutorialGambleShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTutorialGambleShopBuy (remote,ctx , tutorialStep );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialGambleShopBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTutorialGambleShopBuy;
        summary.rmiName = RmiName_CG_RequestTutorialGambleShopBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBattleTutorialInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBattleTutorialInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBattleTutorialInfo, RmiName_CG_RequestBattleTutorialInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBattleTutorialInfo;
        summary.rmiName = RmiName_CG_RequestBattleTutorialInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBattleTutorialInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBattleTutorialInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBattleTutorialInfo;
        summary.rmiName = RmiName_CG_RequestBattleTutorialInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBattleTutorialSet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBattleTutorialSet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBattleTutorialSet, RmiName_CG_RequestBattleTutorialSet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBattleTutorialSet;
        summary.rmiName = RmiName_CG_RequestBattleTutorialSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBattleTutorialSet (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBattleTutorialSet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBattleTutorialSet;
        summary.rmiName = RmiName_CG_RequestBattleTutorialSet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchCreate, RmiName_CG_RequestFriendlyMatchCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchCreate;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchCreate (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchCreate;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchFriendList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchFriendList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchFriendList, RmiName_CG_RequestFriendlyMatchFriendList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchFriendList;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchFriendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchFriendList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchFriendList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchFriendList;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchFriendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchInvite(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInvite);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchInvite, RmiName_CG_RequestFriendlyMatchInvite,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchInvite;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchInvite;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchInvite (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInvite);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchInvite;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchInvite;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchReceivedInviteList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchReceivedInviteList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchReceivedInviteList, RmiName_CG_RequestFriendlyMatchReceivedInviteList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchReceivedInviteList;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchReceivedInviteList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchReceivedInviteList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchReceivedInviteList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchReceivedInviteList;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchReceivedInviteList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchInviteAccept(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInviteAccept);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchInviteAccept, RmiName_CG_RequestFriendlyMatchInviteAccept,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchInviteAccept;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteAccept;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchInviteAccept (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInviteAccept);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchInviteAccept;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteAccept;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchInviteReject(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInviteReject);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchInviteReject, RmiName_CG_RequestFriendlyMatchInviteReject,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchInviteReject;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteReject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchInviteReject (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInviteReject);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchInviteReject;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteReject;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchStart, RmiName_CG_RequestFriendlyMatchStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchStart;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchStart;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchBattleStart, RmiName_CG_RequestFriendlyMatchBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchBattleStart;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchBattleStart;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchClear, RmiName_CG_RequestFriendlyMatchClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchClear;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchClear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchClear;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchExit(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchExit);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchExit, RmiName_CG_RequestFriendlyMatchExit,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchExit;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchExit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchExit (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchExit);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchExit;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchExit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestFriendlyMatchSetInviteOption(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchSetInviteOption);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchSetInviteOption, RmiName_CG_RequestFriendlyMatchSetInviteOption,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchSetInviteOption;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchSetInviteOption;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestFriendlyMatchSetInviteOption (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchSetInviteOption);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestFriendlyMatchSetInviteOption;
        summary.rmiName = RmiName_CG_RequestFriendlyMatchSetInviteOption;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventSeasonPassInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        byte currentClientSeasonPassWeek; SimpleCSharp.Marshaler.Read(__msg,out currentClientSeasonPassWeek);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=currentClientSeasonPassWeek.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestEventSeasonPassInfo, RmiName_CG_RequestEventSeasonPassInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventSeasonPassInfo;
        summary.rmiName = RmiName_CG_RequestEventSeasonPassInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventSeasonPassInfo (remote,ctx , currentClientSeasonPassWeek );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventSeasonPassInfo;
        summary.rmiName = RmiName_CG_RequestEventSeasonPassInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankUpReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSeasonPassRankUpReward, RmiName_CG_RequestEventSeasonPassRankUpReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventSeasonPassRankUpReward;
        summary.rmiName = RmiName_CG_RequestEventSeasonPassRankUpReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventSeasonPassRankUpReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankUpReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventSeasonPassRankUpReward;
        summary.rmiName = RmiName_CG_RequestEventSeasonPassRankUpReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardAll(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankUpRewardAll);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSeasonPassRankUpRewardAll, RmiName_CG_RequestEventSeasonPassRankUpRewardAll,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventSeasonPassRankUpRewardAll;
        summary.rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventSeasonPassRankUpRewardAll (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankUpRewardAll);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventSeasonPassRankUpRewardAll;
        summary.rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardAll;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventSeasonPassRankBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSeasonPassRankBuy, RmiName_CG_RequestEventSeasonPassRankBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventSeasonPassRankBuy;
        summary.rmiName = RmiName_CG_RequestEventSeasonPassRankBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventSeasonPassRankBuy (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventSeasonPassRankBuy;
        summary.rmiName = RmiName_CG_RequestEventSeasonPassRankBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWestSideServerInfo_Random(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_Random);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSideServerInfo_Random, RmiName_CG_RequestWestSideServerInfo_Random,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWestSideServerInfo_Random;
        summary.rmiName = RmiName_CG_RequestWestSideServerInfo_Random;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWestSideServerInfo_Random (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_Random);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWestSideServerInfo_Random;
        summary.rmiName = RmiName_CG_RequestWestSideServerInfo_Random;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWestSideServerInfo_Fixed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_Fixed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSideServerInfo_Fixed, RmiName_CG_RequestWestSideServerInfo_Fixed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWestSideServerInfo_Fixed;
        summary.rmiName = RmiName_CG_RequestWestSideServerInfo_Fixed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWestSideServerInfo_Fixed (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_Fixed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWestSideServerInfo_Fixed;
        summary.rmiName = RmiName_CG_RequestWestSideServerInfo_Fixed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWestSideServerInfo_Recommand(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_Recommand);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSideServerInfo_Recommand, RmiName_CG_RequestWestSideServerInfo_Recommand,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWestSideServerInfo_Recommand;
        summary.rmiName = RmiName_CG_RequestWestSideServerInfo_Recommand;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWestSideServerInfo_Recommand (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_Recommand);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWestSideServerInfo_Recommand;
        summary.rmiName = RmiName_CG_RequestWestSideServerInfo_Recommand;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWestSide_PlayerInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSide_PlayerInfo, RmiName_CG_RequestWestSide_PlayerInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWestSide_PlayerInfo;
        summary.rmiName = RmiName_CG_RequestWestSide_PlayerInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWestSide_PlayerInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWestSide_PlayerInfo;
        summary.rmiName = RmiName_CG_RequestWestSide_PlayerInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWestSide_PlayerteamInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerteamInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSide_PlayerteamInfo, RmiName_CG_RequestWestSide_PlayerteamInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWestSide_PlayerteamInfo;
        summary.rmiName = RmiName_CG_RequestWestSide_PlayerteamInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWestSide_PlayerteamInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerteamInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWestSide_PlayerteamInfo;
        summary.rmiName = RmiName_CG_RequestWestSide_PlayerteamInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWestSide_PlayerGuildInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerGuildInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSide_PlayerGuildInfo, RmiName_CG_RequestWestSide_PlayerGuildInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWestSide_PlayerGuildInfo;
        summary.rmiName = RmiName_CG_RequestWestSide_PlayerGuildInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWestSide_PlayerGuildInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerGuildInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWestSide_PlayerGuildInfo;
        summary.rmiName = RmiName_CG_RequestWestSide_PlayerGuildInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestWorldChattingChannel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int targetChannelId; SimpleCSharp.Marshaler.Read(__msg,out targetChannelId);	
bool neverFail; SimpleCSharp.Marshaler.Read(__msg,out neverFail);	
core.PostCheckReadMessage(__msg, RmiName_CG_RequestWorldChattingChannel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=targetChannelId.ToString()+",";
parameterString+=neverFail.ToString()+",";
        NotifyCallFromStub(Common.CG_RequestWorldChattingChannel, RmiName_CG_RequestWorldChattingChannel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestWorldChattingChannel;
        summary.rmiName = RmiName_CG_RequestWorldChattingChannel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestWorldChattingChannel (remote,ctx , targetChannelId, neverFail );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWorldChattingChannel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestWorldChattingChannel;
        summary.rmiName = RmiName_CG_RequestWorldChattingChannel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLobbyInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLobbyInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLobbyInfo, RmiName_CG_RequestArenaRealTimePvpLobbyInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLobbyInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLobbyInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLobbyInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLobbyInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpJoin, RmiName_CG_RequestArenaRealTimePvpJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpJoin;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpJoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpJoin;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpTopRankerList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpTopRankerList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpTopRankerList, RmiName_CG_RequestArenaRealTimePvpTopRankerList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpTopRankerList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpTopRankerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpTopRankerList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpTopRankerList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpTopRankerList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpTopRankerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLastRankerList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLastRankerList, RmiName_CG_RequestArenaRealTimePvpLastRankerList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLastRankerList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLastRankerList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpMatching(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpMatching);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpMatching, RmiName_CG_RequestArenaRealTimePvpMatching,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpMatching;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpMatching;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpMatching (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpMatching);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpMatching;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpMatching;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpBattleStart, RmiName_CG_RequestArenaRealTimePvpBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpBattleEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpBattleEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpBattleEnd, RmiName_CG_RequestArenaRealTimePvpBattleEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpBattleEnd;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpBattleEnd (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpBattleEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpBattleEnd;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpRollback(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpRollback);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpRollback, RmiName_CG_RequestArenaRealTimePvpRollback,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpRollback;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpRollback;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpRollback (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpRollback);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpRollback;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpRollback;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpIngameBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpIngameBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpIngameBattleStart, RmiName_CG_RequestArenaRealTimePvpIngameBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpIngameBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpIngameBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpIngameBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpIngameBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpIngameBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpIngameBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerLobbyInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerLobbyInfo, RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerLobbyInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLowerLobbyInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerLobbyInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerJoin, RmiName_CG_RequestArenaRealTimePvpLowerJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerJoin;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLowerJoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerJoin;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerTopRankerList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerTopRankerList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerTopRankerList, RmiName_CG_RequestArenaRealTimePvpLowerTopRankerList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerTopRankerList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerTopRankerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLowerTopRankerList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerTopRankerList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerTopRankerList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerTopRankerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerMatching(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerMatching);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerMatching, RmiName_CG_RequestArenaRealTimePvpLowerMatching,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerMatching;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerMatching;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLowerMatching (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerMatching);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerMatching;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerMatching;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerBattleStart, RmiName_CG_RequestArenaRealTimePvpLowerBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLowerBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerBattleEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerBattleEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerBattleEnd, RmiName_CG_RequestArenaRealTimePvpLowerBattleEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerBattleEnd;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLowerBattleEnd (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerBattleEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerBattleEnd;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpAllInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpAllInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpAllInfo, RmiName_CG_RequestArenaRealTimePvpAllInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpAllInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpAllInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpAllInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpAllInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpAllInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpAllInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerBattleInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLastRankerBattleInfo, RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerBattleInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLastRankerBattleInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerBattleInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLastRankerBattleStart, RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLastRankerBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerRollback(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerRollback);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerRollback, RmiName_CG_RequestArenaRealTimePvpLowerRollback,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerRollback;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerRollback;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLowerRollback (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerRollback);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerRollback;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerRollback;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerIngameBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerIngameBattleStart, RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerIngameBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimePvpLowerIngameBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerIngameBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionLobbyInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionLobbyInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionLobbyInfo, RmiName_CG_RequestArenaRealTimeDecisionLobbyInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionLobbyInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionLobbyInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionLobbyInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionLobbyInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionJoin, RmiName_CG_RequestArenaRealTimeDecisionJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionJoin;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionJoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionJoin;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionTopRankerList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionTopRankerList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionTopRankerList, RmiName_CG_RequestArenaRealTimeDecisionTopRankerList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionTopRankerList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionTopRankerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionTopRankerList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionTopRankerList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionTopRankerList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionTopRankerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionMatching(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionMatching);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionMatching, RmiName_CG_RequestArenaRealTimeDecisionMatching,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionMatching;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionMatching;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionMatching (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionMatching);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionMatching;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionMatching;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionBattleEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionBattleEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionBattleEnd, RmiName_CG_RequestArenaRealTimeDecisionBattleEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionBattleEnd;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionBattleEnd (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionBattleEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionBattleEnd;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionIngameBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionIngameBattleStart, RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionIngameBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionIngameBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionIngameBattleStart;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionHistory(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionHistory);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionHistory, RmiName_CG_RequestArenaRealTimeDecisionHistory,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionHistory;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionHistory;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionHistory (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionHistory);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionHistory;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionHistory;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionChangeMatchingList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionChangeMatchingList, RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionChangeMatchingList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionChangeMatchingList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionChangeMatchingList;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionMatchingSimpleInfo, RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionMatchingSimpleInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestArenaRealTimeDecisionMatchingSimpleInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestArenaRealTimeDecisionMatchingSimpleInfo;
        summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPvpSeasonInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPvpSeasonInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPvpSeasonInfo, RmiName_CG_RequestPvpSeasonInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPvpSeasonInfo;
        summary.rmiName = RmiName_CG_RequestPvpSeasonInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPvpSeasonInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPvpSeasonInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPvpSeasonInfo;
        summary.rmiName = RmiName_CG_RequestPvpSeasonInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPvpSeasonHistory(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPvpSeasonHistory);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPvpSeasonHistory, RmiName_CG_RequestPvpSeasonHistory,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPvpSeasonHistory;
        summary.rmiName = RmiName_CG_RequestPvpSeasonHistory;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPvpSeasonHistory (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPvpSeasonHistory);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPvpSeasonHistory;
        summary.rmiName = RmiName_CG_RequestPvpSeasonHistory;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarCreate, RmiName_CG_RequestBossWarCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarCreate;
        summary.rmiName = RmiName_CG_RequestBossWarCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarCreate (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarCreate;
        summary.rmiName = RmiName_CG_RequestBossWarCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarJoin, RmiName_CG_RequestBossWarJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarJoin;
        summary.rmiName = RmiName_CG_RequestBossWarJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarJoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarJoin;
        summary.rmiName = RmiName_CG_RequestBossWarJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarStart, RmiName_CG_RequestBossWarStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarStart;
        summary.rmiName = RmiName_CG_RequestBossWarStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarStart;
        summary.rmiName = RmiName_CG_RequestBossWarStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarOnlineFriendList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarOnlineFriendList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarOnlineFriendList, RmiName_CG_RequestBossWarOnlineFriendList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarOnlineFriendList;
        summary.rmiName = RmiName_CG_RequestBossWarOnlineFriendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarOnlineFriendList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarOnlineFriendList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarOnlineFriendList;
        summary.rmiName = RmiName_CG_RequestBossWarOnlineFriendList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarOnlineGuildMemberList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarOnlineGuildMemberList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarOnlineGuildMemberList, RmiName_CG_RequestBossWarOnlineGuildMemberList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarOnlineGuildMemberList;
        summary.rmiName = RmiName_CG_RequestBossWarOnlineGuildMemberList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarOnlineGuildMemberList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarOnlineGuildMemberList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarOnlineGuildMemberList;
        summary.rmiName = RmiName_CG_RequestBossWarOnlineGuildMemberList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarOnlineUserRankRangeList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarOnlineUserRankRangeList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarOnlineUserRankRangeList, RmiName_CG_RequestBossWarOnlineUserRankRangeList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarOnlineUserRankRangeList;
        summary.rmiName = RmiName_CG_RequestBossWarOnlineUserRankRangeList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarOnlineUserRankRangeList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarOnlineUserRankRangeList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarOnlineUserRankRangeList;
        summary.rmiName = RmiName_CG_RequestBossWarOnlineUserRankRangeList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarInvitationReceiveList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarInvitationReceiveList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarInvitationReceiveList, RmiName_CG_RequestBossWarInvitationReceiveList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarInvitationReceiveList;
        summary.rmiName = RmiName_CG_RequestBossWarInvitationReceiveList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarInvitationReceiveList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarInvitationReceiveList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarInvitationReceiveList;
        summary.rmiName = RmiName_CG_RequestBossWarInvitationReceiveList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarRemoveInvitation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarRemoveInvitation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarRemoveInvitation, RmiName_CG_RequestBossWarRemoveInvitation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarRemoveInvitation;
        summary.rmiName = RmiName_CG_RequestBossWarRemoveInvitation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarRemoveInvitation (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarRemoveInvitation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarRemoveInvitation;
        summary.rmiName = RmiName_CG_RequestBossWarRemoveInvitation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarInvite(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarInvite);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarInvite, RmiName_CG_RequestBossWarInvite,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarInvite;
        summary.rmiName = RmiName_CG_RequestBossWarInvite;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarInvite (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarInvite);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarInvite;
        summary.rmiName = RmiName_CG_RequestBossWarInvite;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarKickOut(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarKickOut);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarKickOut, RmiName_CG_RequestBossWarKickOut,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarKickOut;
        summary.rmiName = RmiName_CG_RequestBossWarKickOut;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarKickOut (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarKickOut);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarKickOut;
        summary.rmiName = RmiName_CG_RequestBossWarKickOut;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarReady(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarReady);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarReady, RmiName_CG_RequestBossWarReady,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarReady;
        summary.rmiName = RmiName_CG_RequestBossWarReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarReady (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarReady);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarReady;
        summary.rmiName = RmiName_CG_RequestBossWarReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarReturnReady(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarReturnReady);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarReturnReady, RmiName_CG_RequestBossWarReturnReady,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarReturnReady;
        summary.rmiName = RmiName_CG_RequestBossWarReturnReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarReturnReady (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarReturnReady);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarReturnReady;
        summary.rmiName = RmiName_CG_RequestBossWarReturnReady;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarLeave, RmiName_CG_RequestBossWarLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarLeave;
        summary.rmiName = RmiName_CG_RequestBossWarLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarLeave (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarLeave;
        summary.rmiName = RmiName_CG_RequestBossWarLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarBattleStart, RmiName_CG_RequestBossWarBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarBattleStart;
        summary.rmiName = RmiName_CG_RequestBossWarBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarBattleStart;
        summary.rmiName = RmiName_CG_RequestBossWarBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarBattleSync(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarBattleSync);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarBattleSync, RmiName_CG_RequestBossWarBattleSync,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarBattleSync;
        summary.rmiName = RmiName_CG_RequestBossWarBattleSync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarBattleSync (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarBattleSync);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarBattleSync;
        summary.rmiName = RmiName_CG_RequestBossWarBattleSync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarBattleEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarBattleEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarBattleEnd, RmiName_CG_RequestBossWarBattleEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarBattleEnd;
        summary.rmiName = RmiName_CG_RequestBossWarBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarBattleEnd (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarBattleEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarBattleEnd;
        summary.rmiName = RmiName_CG_RequestBossWarBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestBossWarReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarReward, RmiName_CG_RequestBossWarReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarReward;
        summary.rmiName = RmiName_CG_RequestBossWarReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestBossWarReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestBossWarReward;
        summary.rmiName = RmiName_CG_RequestBossWarReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventExchangeInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeInfo, RmiName_CG_RequestEventExchangeInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchangeInfo;
        summary.rmiName = RmiName_CG_RequestEventExchangeInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventExchangeInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchangeInfo;
        summary.rmiName = RmiName_CG_RequestEventExchangeInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeBoxGachaInfo, RmiName_CG_RequestEventExchangeBoxGachaInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchangeBoxGachaInfo;
        summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventExchangeBoxGachaInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchangeBoxGachaInfo;
        summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaPickup(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaPickup);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeBoxGachaPickup, RmiName_CG_RequestEventExchangeBoxGachaPickup,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchangeBoxGachaPickup;
        summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaPickup;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventExchangeBoxGachaPickup (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaPickup);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchangeBoxGachaPickup;
        summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaPickup;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeBoxGachaReset, RmiName_CG_RequestEventExchangeBoxGachaReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchangeBoxGachaReset;
        summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventExchangeBoxGachaReset (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventExchangeBoxGachaReset;
        summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventPaybackReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPaybackReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventPaybackReward, RmiName_CG_RequestEventPaybackReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventPaybackReward;
        summary.rmiName = RmiName_CG_RequestEventPaybackReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventPaybackReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPaybackReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventPaybackReward;
        summary.rmiName = RmiName_CG_RequestEventPaybackReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventSnsShareProgress(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSnsShareProgress);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSnsShareProgress, RmiName_CG_RequestEventSnsShareProgress,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventSnsShareProgress;
        summary.rmiName = RmiName_CG_RequestEventSnsShareProgress;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventSnsShareProgress (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSnsShareProgress);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventSnsShareProgress;
        summary.rmiName = RmiName_CG_RequestEventSnsShareProgress;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventSnsShareReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSnsShareReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSnsShareReward, RmiName_CG_RequestEventSnsShareReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventSnsShareReward;
        summary.rmiName = RmiName_CG_RequestEventSnsShareReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventSnsShareReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSnsShareReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventSnsShareReward;
        summary.rmiName = RmiName_CG_RequestEventSnsShareReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGagueEventInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGagueEventInfo, RmiName_CG_RequestGagueEventInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGagueEventInfo;
        summary.rmiName = RmiName_CG_RequestGagueEventInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGagueEventInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGagueEventInfo;
        summary.rmiName = RmiName_CG_RequestGagueEventInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGagueEventCharge(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventCharge);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGagueEventCharge, RmiName_CG_RequestGagueEventCharge,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGagueEventCharge;
        summary.rmiName = RmiName_CG_RequestGagueEventCharge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGagueEventCharge (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventCharge);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGagueEventCharge;
        summary.rmiName = RmiName_CG_RequestGagueEventCharge;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGagueEventReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGagueEventReward, RmiName_CG_RequestGagueEventReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGagueEventReward;
        summary.rmiName = RmiName_CG_RequestGagueEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGagueEventReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGagueEventReward;
        summary.rmiName = RmiName_CG_RequestGagueEventReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGagueEventReset(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventReset);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGagueEventReset, RmiName_CG_RequestGagueEventReset,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGagueEventReset;
        summary.rmiName = RmiName_CG_RequestGagueEventReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGagueEventReset (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventReset);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGagueEventReset;
        summary.rmiName = RmiName_CG_RequestGagueEventReset;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventLadderReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLadderReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventLadderReward, RmiName_CG_RequestEventLadderReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventLadderReward;
        summary.rmiName = RmiName_CG_RequestEventLadderReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventLadderReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLadderReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventLadderReward;
        summary.rmiName = RmiName_CG_RequestEventLadderReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventLobbyGiftReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLobbyGiftReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventLobbyGiftReward, RmiName_CG_RequestEventLobbyGiftReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventLobbyGiftReward;
        summary.rmiName = RmiName_CG_RequestEventLobbyGiftReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventLobbyGiftReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLobbyGiftReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventLobbyGiftReward;
        summary.rmiName = RmiName_CG_RequestEventLobbyGiftReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventTimeMissionInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTimeMissionInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventTimeMissionInfo, RmiName_CG_RequestEventTimeMissionInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventTimeMissionInfo;
        summary.rmiName = RmiName_CG_RequestEventTimeMissionInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventTimeMissionInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTimeMissionInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventTimeMissionInfo;
        summary.rmiName = RmiName_CG_RequestEventTimeMissionInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventTimeMissionStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTimeMissionStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventTimeMissionStart, RmiName_CG_RequestEventTimeMissionStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventTimeMissionStart;
        summary.rmiName = RmiName_CG_RequestEventTimeMissionStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventTimeMissionStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTimeMissionStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventTimeMissionStart;
        summary.rmiName = RmiName_CG_RequestEventTimeMissionStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestEventLobbyDecorationReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLobbyDecorationReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventLobbyDecorationReward, RmiName_CG_RequestEventLobbyDecorationReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestEventLobbyDecorationReward;
        summary.rmiName = RmiName_CG_RequestEventLobbyDecorationReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestEventLobbyDecorationReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLobbyDecorationReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestEventLobbyDecorationReward;
        summary.rmiName = RmiName_CG_RequestEventLobbyDecorationReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestRegistPlayTitle(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestRegistPlayTitle);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRegistPlayTitle, RmiName_CG_RequestRegistPlayTitle,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestRegistPlayTitle;
        summary.rmiName = RmiName_CG_RequestRegistPlayTitle;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestRegistPlayTitle (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRegistPlayTitle);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestRegistPlayTitle;
        summary.rmiName = RmiName_CG_RequestRegistPlayTitle;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestPlayTitleMissionReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestPlayTitleMissionReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPlayTitleMissionReward, RmiName_CG_RequestPlayTitleMissionReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestPlayTitleMissionReward;
        summary.rmiName = RmiName_CG_RequestPlayTitleMissionReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestPlayTitleMissionReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPlayTitleMissionReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestPlayTitleMissionReward;
        summary.rmiName = RmiName_CG_RequestPlayTitleMissionReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentList, RmiName_CG_RequestTournamentList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentList;
        summary.rmiName = RmiName_CG_RequestTournamentList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentList;
        summary.rmiName = RmiName_CG_RequestTournamentList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentProgressInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentProgressInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentProgressInfo, RmiName_CG_RequestTournamentProgressInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentProgressInfo;
        summary.rmiName = RmiName_CG_RequestTournamentProgressInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentProgressInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentProgressInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentProgressInfo;
        summary.rmiName = RmiName_CG_RequestTournamentProgressInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentResultInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentResultInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentResultInfo, RmiName_CG_RequestTournamentResultInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentResultInfo;
        summary.rmiName = RmiName_CG_RequestTournamentResultInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentResultInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentResultInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentResultInfo;
        summary.rmiName = RmiName_CG_RequestTournamentResultInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentMatchJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchJoin, RmiName_CG_RequestTournamentMatchJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchJoin;
        summary.rmiName = RmiName_CG_RequestTournamentMatchJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentMatchJoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchJoin;
        summary.rmiName = RmiName_CG_RequestTournamentMatchJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentMatchBattleStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchBattleStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchBattleStart, RmiName_CG_RequestTournamentMatchBattleStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchBattleStart;
        summary.rmiName = RmiName_CG_RequestTournamentMatchBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentMatchBattleStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchBattleStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchBattleStart;
        summary.rmiName = RmiName_CG_RequestTournamentMatchBattleStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentMatchBattleEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchBattleEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchBattleEnd, RmiName_CG_RequestTournamentMatchBattleEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchBattleEnd;
        summary.rmiName = RmiName_CG_RequestTournamentMatchBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentMatchBattleEnd (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchBattleEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchBattleEnd;
        summary.rmiName = RmiName_CG_RequestTournamentMatchBattleEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentMatchExit(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchExit);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchExit, RmiName_CG_RequestTournamentMatchExit,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchExit;
        summary.rmiName = RmiName_CG_RequestTournamentMatchExit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentMatchExit (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchExit);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchExit;
        summary.rmiName = RmiName_CG_RequestTournamentMatchExit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentReward(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentReward);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentReward, RmiName_CG_RequestTournamentReward,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentReward;
        summary.rmiName = RmiName_CG_RequestTournamentReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentReward (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentReward);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentReward;
        summary.rmiName = RmiName_CG_RequestTournamentReward;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentPlayerTeamSlotChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentPlayerTeamSlotChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentPlayerTeamSlotChange, RmiName_CG_RequestTournamentPlayerTeamSlotChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentPlayerTeamSlotChange;
        summary.rmiName = RmiName_CG_RequestTournamentPlayerTeamSlotChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentPlayerTeamSlotChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentPlayerTeamSlotChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentPlayerTeamSlotChange;
        summary.rmiName = RmiName_CG_RequestTournamentPlayerTeamSlotChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentPlayerTeamInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentPlayerTeamInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentPlayerTeamInfo, RmiName_CG_RequestTournamentPlayerTeamInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentPlayerTeamInfo;
        summary.rmiName = RmiName_CG_RequestTournamentPlayerTeamInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentPlayerTeamInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentPlayerTeamInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentPlayerTeamInfo;
        summary.rmiName = RmiName_CG_RequestTournamentPlayerTeamInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentCheer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentCheer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentCheer, RmiName_CG_RequestTournamentCheer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentCheer;
        summary.rmiName = RmiName_CG_RequestTournamentCheer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentCheer (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentCheer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentCheer;
        summary.rmiName = RmiName_CG_RequestTournamentCheer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentCheerList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentCheerList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentCheerList, RmiName_CG_RequestTournamentCheerList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentCheerList;
        summary.rmiName = RmiName_CG_RequestTournamentCheerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentCheerList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentCheerList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentCheerList;
        summary.rmiName = RmiName_CG_RequestTournamentCheerList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentWatcherJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentWatcherJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentWatcherJoin, RmiName_CG_RequestTournamentWatcherJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentWatcherJoin;
        summary.rmiName = RmiName_CG_RequestTournamentWatcherJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentWatcherJoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentWatcherJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentWatcherJoin;
        summary.rmiName = RmiName_CG_RequestTournamentWatcherJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentWatcherExit(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentWatcherExit);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentWatcherExit, RmiName_CG_RequestTournamentWatcherExit,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentWatcherExit;
        summary.rmiName = RmiName_CG_RequestTournamentWatcherExit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentWatcherExit (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentWatcherExit);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentWatcherExit;
        summary.rmiName = RmiName_CG_RequestTournamentWatcherExit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentMatchPlayInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchPlayInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchPlayInfo, RmiName_CG_RequestTournamentMatchPlayInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchPlayInfo;
        summary.rmiName = RmiName_CG_RequestTournamentMatchPlayInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentMatchPlayInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchPlayInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentMatchPlayInfo;
        summary.rmiName = RmiName_CG_RequestTournamentMatchPlayInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestTournamentReplayInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentReplayInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentReplayInfo, RmiName_CG_RequestTournamentReplayInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentReplayInfo;
        summary.rmiName = RmiName_CG_RequestTournamentReplayInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestTournamentReplayInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentReplayInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestTournamentReplayInfo;
        summary.rmiName = RmiName_CG_RequestTournamentReplayInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarLobbyInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarLobbyInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarLobbyInfo, RmiName_CG_RequestGuildWarLobbyInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarLobbyInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarLobbyInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarLobbyInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarLobbyInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarLobbyInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarRankInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarRankInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarRankInfo, RmiName_CG_RequestGuildWarRankInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarRankInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarRankInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarRankInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarRankInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarRankInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarRankInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarVersusRecordInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarVersusRecordInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarVersusRecordInfo, RmiName_CG_RequestGuildWarVersusRecordInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarVersusRecordInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarVersusRecordInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarVersusRecordInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarVersusRecordInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarVersusRecordInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarVersusRecordInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarGuildMemberList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarGuildMemberList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarGuildMemberList, RmiName_CG_RequestGuildWarGuildMemberList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarGuildMemberList;
        summary.rmiName = RmiName_CG_RequestGuildWarGuildMemberList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarGuildMemberList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarGuildMemberList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarGuildMemberList;
        summary.rmiName = RmiName_CG_RequestGuildWarGuildMemberList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarWorldMapInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarWorldMapInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarWorldMapInfo, RmiName_CG_RequestGuildWarWorldMapInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarWorldMapInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarWorldMapInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarWorldMapInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarWorldMapInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarWorldMapInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarWorldMapInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarAttackSquadChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarAttackSquadChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarAttackSquadChange, RmiName_CG_RequestGuildWarAttackSquadChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarAttackSquadChange;
        summary.rmiName = RmiName_CG_RequestGuildWarAttackSquadChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarAttackSquadChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarAttackSquadChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarAttackSquadChange;
        summary.rmiName = RmiName_CG_RequestGuildWarAttackSquadChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarDefenceTeamChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarDefenceTeamChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarDefenceTeamChange, RmiName_CG_RequestGuildWarDefenceTeamChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarDefenceTeamChange;
        summary.rmiName = RmiName_CG_RequestGuildWarDefenceTeamChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarDefenceTeamChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarDefenceTeamChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarDefenceTeamChange;
        summary.rmiName = RmiName_CG_RequestGuildWarDefenceTeamChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarRegionBonusScoreChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarRegionBonusScoreChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarRegionBonusScoreChange, RmiName_CG_RequestGuildWarRegionBonusScoreChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarRegionBonusScoreChange;
        summary.rmiName = RmiName_CG_RequestGuildWarRegionBonusScoreChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarRegionBonusScoreChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarRegionBonusScoreChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarRegionBonusScoreChange;
        summary.rmiName = RmiName_CG_RequestGuildWarRegionBonusScoreChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarAreaGuildMemberChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarAreaGuildMemberChange);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarAreaGuildMemberChange, RmiName_CG_RequestGuildWarAreaGuildMemberChange,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarAreaGuildMemberChange;
        summary.rmiName = RmiName_CG_RequestGuildWarAreaGuildMemberChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarAreaGuildMemberChange (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarAreaGuildMemberChange);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarAreaGuildMemberChange;
        summary.rmiName = RmiName_CG_RequestGuildWarAreaGuildMemberChange;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_RequestGuildWarBattleRecordInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarBattleRecordInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarBattleRecordInfo, RmiName_CG_RequestGuildWarBattleRecordInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarBattleRecordInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarBattleRecordInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_RequestGuildWarBattleRecordInfo (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarBattleRecordInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_RequestGuildWarBattleRecordInfo;
        summary.rmiName = RmiName_CG_RequestGuildWarBattleRecordInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildWar_Stage_Start(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildWar_Stage_Start);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildWar_Stage_Start, RmiName_CG_Request_GuildWar_Stage_Start,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildWar_Stage_Start;
        summary.rmiName = RmiName_CG_Request_GuildWar_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildWar_Stage_Start (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildWar_Stage_Start);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildWar_Stage_Start;
        summary.rmiName = RmiName_CG_Request_GuildWar_Stage_Start;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildWar_Stage_Clear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildWar_Stage_Clear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildWar_Stage_Clear, RmiName_CG_Request_GuildWar_Stage_Clear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildWar_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_GuildWar_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildWar_Stage_Clear (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildWar_Stage_Clear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildWar_Stage_Clear;
        summary.rmiName = RmiName_CG_Request_GuildWar_Stage_Clear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildWar_Stage_Rejoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildWar_Stage_Rejoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildWar_Stage_Rejoin, RmiName_CG_Request_GuildWar_Stage_Rejoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildWar_Stage_Rejoin;
        summary.rmiName = RmiName_CG_Request_GuildWar_Stage_Rejoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildWar_Stage_Rejoin (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildWar_Stage_Rejoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildWar_Stage_Rejoin;
        summary.rmiName = RmiName_CG_Request_GuildWar_Stage_Rejoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CG_Request_GuildWar_Stage_HeroStatus_Sync(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildWar_Stage_HeroStatus_Sync);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildWar_Stage_HeroStatus_Sync, RmiName_CG_Request_GuildWar_Stage_HeroStatus_Sync,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CG_Request_GuildWar_Stage_HeroStatus_Sync;
        summary.rmiName = RmiName_CG_Request_GuildWar_Stage_HeroStatus_Sync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CG_Request_GuildWar_Stage_HeroStatus_Sync (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildWar_Stage_HeroStatus_Sync);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CG_Request_GuildWar_Stage_HeroStatus_Sync;
        summary.rmiName = RmiName_CG_Request_GuildWar_Stage_HeroStatus_Sync;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_CG_RequestChannelUserInfo="CG_RequestChannelUserInfo";
public const string RmiName_CG_RequestHeartBeat="CG_RequestHeartBeat";
public const string RmiName_CG_RequestChangeNickname="CG_RequestChangeNickname";
public const string RmiName_CG_RequestChangeWantToSay="CG_RequestChangeWantToSay";
public const string RmiName_CG_RequestTeamInfo="CG_RequestTeamInfo";
public const string RmiName_CG_RequestTeamSlotChange="CG_RequestTeamSlotChange";
public const string RmiName_CG_RequestTeamNameChange="CG_RequestTeamNameChange";
public const string RmiName_CG_RequestLobbyInfo="CG_RequestLobbyInfo";
public const string RmiName_CG_RequestBasePointInfo="CG_RequestBasePointInfo";
public const string RmiName_CG_RequestMercenaryList="CG_RequestMercenaryList";
public const string RmiName_CG_RequestMercenaryInfo="CG_RequestMercenaryInfo";
public const string RmiName_CG_RequestGuildInfo="CG_RequestGuildInfo";
public const string RmiName_CG_RequestChatStampUpdateBookmark="CG_RequestChatStampUpdateBookmark";
public const string RmiName_CG_RequestChatStampUpdateQuickMessage="CG_RequestChatStampUpdateQuickMessage";
public const string RmiName_CG_RequestMainSkinChange="CG_RequestMainSkinChange";
public const string RmiName_CG_RequestEventList="CG_RequestEventList";
public const string RmiName_CG_RequestCheatEnter="CG_RequestCheatEnter";
public const string RmiName_CG_RequestCheatStageClear="CG_RequestCheatStageClear";
public const string RmiName_CG_RequestDllGetItem="CG_RequestDllGetItem";
public const string RmiName_CG_RequestRecommendFriendUSNList="CG_RequestRecommendFriendUSNList";
public const string RmiName_CG_RequestDailyReset="CG_RequestDailyReset";
public const string RmiName_CG_RequestFrozenAssetRedeem="CG_RequestFrozenAssetRedeem";
public const string RmiName_CG_RequestSecurityToken="CG_RequestSecurityToken";
public const string RmiName_CG_RequestNetmarbleAuth="CG_RequestNetmarbleAuth";
public const string RmiName_CG_RequestAuthenticateCreate="CG_RequestAuthenticateCreate";
public const string RmiName_CG_RequestEditorUserInfoByNickName="CG_RequestEditorUserInfoByNickName";
public const string RmiName_CG_RequestLogin="CG_RequestLogin";
public const string RmiName_CG_RequestLoginInstantly="CG_RequestLoginInstantly";
public const string RmiName_CG_RetryRequest="CG_RetryRequest";
public const string RmiName_CG_RequestBillingInitialize="CG_RequestBillingInitialize";
public const string RmiName_CG_RequestBillingVerifyPU="CG_RequestBillingVerifyPU";
public const string RmiName_CG_RequestBillingRemainTR="CG_RequestBillingRemainTR";
public const string RmiName_CG_RequestBillingCouponVerify="CG_RequestBillingCouponVerify";
public const string RmiName_CG_RequestBillingCrossPromotion="CG_RequestBillingCrossPromotion";
public const string RmiName_CG_RequestBillingPackageShop="CG_RequestBillingPackageShop";
public const string RmiName_CG_RequestAgeInput="CG_RequestAgeInput";
public const string RmiName_CG_RequestSDKInfoChange="CG_RequestSDKInfoChange";
public const string RmiName_CG_RequestSkinLevelUpBySkinMaterial="CG_RequestSkinLevelUpBySkinMaterial";
public const string RmiName_CG_RequestSkinResearch="CG_RequestSkinResearch";
public const string RmiName_CG_RequestSkinResearchInit="CG_RequestSkinResearchInit";
public const string RmiName_CG_RequestSkinMaterialGrind="CG_RequestSkinMaterialGrind";
public const string RmiName_CG_RequestSkinAwaken="CG_RequestSkinAwaken";
public const string RmiName_CG_RequestSkinHeadStyleChange="CG_RequestSkinHeadStyleChange";
public const string RmiName_CG_RequestSkinEvolution="CG_RequestSkinEvolution";
public const string RmiName_CG_RequestSkinSkillLevelUp="CG_RequestSkinSkillLevelUp";
public const string RmiName_CG_RequestSkinGiveFellowshipExp="CG_RequestSkinGiveFellowshipExp";
public const string RmiName_CG_RequestSkinFellowshipLevelUpReward="CG_RequestSkinFellowshipLevelUpReward";
public const string RmiName_CG_RequestCostumeEquip="CG_RequestCostumeEquip";
public const string RmiName_CG_RequestCostumeUnEquip="CG_RequestCostumeUnEquip";
public const string RmiName_CG_RequestCostumeUnLock="CG_RequestCostumeUnLock";
public const string RmiName_CG_RequestSkinOverEvolution="CG_RequestSkinOverEvolution";
public const string RmiName_CG_RequestSkinMaxAwakenReward="CG_RequestSkinMaxAwakenReward";
public const string RmiName_CG_RequestCostumeRegister="CG_RequestCostumeRegister";
public const string RmiName_CG_RequestSkinLoveReward="CG_RequestSkinLoveReward";
public const string RmiName_CG_RequestCostumeAutoRegister="CG_RequestCostumeAutoRegister";
public const string RmiName_CG_RequestStoryCostume="CG_RequestStoryCostume";
public const string RmiName_CG_RequestCostumeLevelUp="CG_RequestCostumeLevelUp";
public const string RmiName_CG_RequestSkinMaxAwaken="CG_RequestSkinMaxAwaken";
public const string RmiName_CG_RequestWeaponEquip="CG_RequestWeaponEquip";
public const string RmiName_CG_RequestWeaponUnEquip="CG_RequestWeaponUnEquip";
public const string RmiName_CG_RequestWeaponSell="CG_RequestWeaponSell";
public const string RmiName_CG_RequestWeaponGrind="CG_RequestWeaponGrind";
public const string RmiName_CG_RequestWeaponUpgrade="CG_RequestWeaponUpgrade";
public const string RmiName_CG_RequestWeaponUpgradeRetry="CG_RequestWeaponUpgradeRetry";
public const string RmiName_CG_RequestWeaponEvolution="CG_RequestWeaponEvolution";
public const string RmiName_CG_RequestWeaponEvolutionRetry="CG_RequestWeaponEvolutionRetry";
public const string RmiName_CG_RequestWeaponOptionEnhance="CG_RequestWeaponOptionEnhance";
public const string RmiName_CG_RequestWeaponLock="CG_RequestWeaponLock";
public const string RmiName_CG_RequestWeaponUnLock="CG_RequestWeaponUnLock";
public const string RmiName_CG_RequestWeaponEquipExchange="CG_RequestWeaponEquipExchange";
public const string RmiName_CG_RequestWeaponEquipExchangeAll="CG_RequestWeaponEquipExchangeAll";
public const string RmiName_CG_RequestWeaponEquipRecommand="CG_RequestWeaponEquipRecommand";
public const string RmiName_CG_RequestWeaponCarve="CG_RequestWeaponCarve";
public const string RmiName_CG_RequestWeaponCarveRemove="CG_RequestWeaponCarveRemove";
public const string RmiName_CG_RequestStageInfo="CG_RequestStageInfo";
public const string RmiName_CG_RequestStageRejoin="CG_RequestStageRejoin";
public const string RmiName_CG_Request_Week_Stage_Start="CG_Request_Week_Stage_Start";
public const string RmiName_CG_Request_Week_Stage_Clear="CG_Request_Week_Stage_Clear";
public const string RmiName_CG_Request_Week_Stage_Continue="CG_Request_Week_Stage_Continue";
public const string RmiName_CG_Request_Main_Stage_Start="CG_Request_Main_Stage_Start";
public const string RmiName_CG_Request_Main_Stage_Clear="CG_Request_Main_Stage_Clear";
public const string RmiName_CG_Request_Main_Stage_Continue="CG_Request_Main_Stage_Continue";
public const string RmiName_CG_Request_Free_Stage_Start="CG_Request_Free_Stage_Start";
public const string RmiName_CG_Request_Free_Stage_Clear="CG_Request_Free_Stage_Clear";
public const string RmiName_CG_Request_Free_Stage_Continue="CG_Request_Free_Stage_Continue";
public const string RmiName_CG_RequestHawkRunStageStart="CG_RequestHawkRunStageStart";
public const string RmiName_CG_RequestHawkRunStageClear="CG_RequestHawkRunStageClear";
public const string RmiName_CG_RequestEventStageClear="CG_RequestEventStageClear";
public const string RmiName_CG_Request_Quest_Stage_Start="CG_Request_Quest_Stage_Start";
public const string RmiName_CG_Request_Quest_Stage_Clear="CG_Request_Quest_Stage_Clear";
public const string RmiName_CG_Request_Quest_Stage_Continue="CG_Request_Quest_Stage_Continue";
public const string RmiName_CG_Request_Boss_Stage_Start="CG_Request_Boss_Stage_Start";
public const string RmiName_CG_Request_Boss_Stage_Clear="CG_Request_Boss_Stage_Clear";
public const string RmiName_CG_Request_Boss_Stage_Continue="CG_Request_Boss_Stage_Continue";
public const string RmiName_CG_Request_Memorial_Stage_Start="CG_Request_Memorial_Stage_Start";
public const string RmiName_CG_Request_Memorial_Stage_Clear="CG_Request_Memorial_Stage_Clear";
public const string RmiName_CG_Request_Memorial_Stage_Continue="CG_Request_Memorial_Stage_Continue";
public const string RmiName_CG_Request_Limited_Stage_Start="CG_Request_Limited_Stage_Start";
public const string RmiName_CG_Request_Limited_Stage_Clear="CG_Request_Limited_Stage_Clear";
public const string RmiName_CG_Request_Limited_Stage_Continue="CG_Request_Limited_Stage_Continue";
public const string RmiName_CG_Request_Main_ExtraStage_Start="CG_Request_Main_ExtraStage_Start";
public const string RmiName_CG_Request_Main_ExtraStage_Clear="CG_Request_Main_ExtraStage_Clear";
public const string RmiName_CG_Request_Main_ExtraStage_Continue="CG_Request_Main_ExtraStage_Continue";
public const string RmiName_CG_Request_Boss_ExtraStage_Start="CG_Request_Boss_ExtraStage_Start";
public const string RmiName_CG_Request_Boss_ExtraStage_Clear="CG_Request_Boss_ExtraStage_Clear";
public const string RmiName_CG_Request_Boss_ExtraStage_Continue="CG_Request_Boss_ExtraStage_Continue";
public const string RmiName_CG_RequestRewardStageClear="CG_RequestRewardStageClear";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_Start="CG_Request_SingleSiege_ExtraStage_Start";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_Clear="CG_Request_SingleSiege_ExtraStage_Clear";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_Continue="CG_Request_SingleSiege_ExtraStage_Continue";
public const string RmiName_CG_Request_FinalBoss_Stage_Start="CG_Request_FinalBoss_Stage_Start";
public const string RmiName_CG_Request_FinalBoss_Stage_Clear="CG_Request_FinalBoss_Stage_Clear";
public const string RmiName_CG_Request_FinalBoss_Stage_Continue="CG_Request_FinalBoss_Stage_Continue";
public const string RmiName_CG_Request_FinalBoss_Season_Info="CG_Request_FinalBoss_Season_Info";
public const string RmiName_CG_Request_Training_Stage_Info="CG_Request_Training_Stage_Info";
public const string RmiName_CG_Request_Training_Stage_Start="CG_Request_Training_Stage_Start";
public const string RmiName_CG_Request_Training_Stage_Clear="CG_Request_Training_Stage_Clear";
public const string RmiName_CG_Request_Training_Stage_Continue="CG_Request_Training_Stage_Continue";
public const string RmiName_CG_Request_Training_Stage_Open="CG_Request_Training_Stage_Open";
public const string RmiName_CG_Request_Training_Stage_Refresh="CG_Request_Training_Stage_Refresh";
public const string RmiName_CG_Request_GuildBoss_Stage_Start="CG_Request_GuildBoss_Stage_Start";
public const string RmiName_CG_Request_GuildBoss_Stage_Clear="CG_Request_GuildBoss_Stage_Clear";
public const string RmiName_CG_Request_GuildBoss_Lobby_Info="CG_Request_GuildBoss_Lobby_Info";
public const string RmiName_CG_Request_GuildBoss_Rank_Info="CG_Request_GuildBoss_Rank_Info";
public const string RmiName_CG_Request_GuildBoss_LastWeek_Rank_Info="CG_Request_GuildBoss_LastWeek_Rank_Info";
public const string RmiName_CG_Request_GuildBoss_Time_Refresh="CG_Request_GuildBoss_Time_Refresh";
public const string RmiName_CG_Request_AnotherMain_Stage_Start="CG_Request_AnotherMain_Stage_Start";
public const string RmiName_CG_Request_AnotherMain_Stage_Clear="CG_Request_AnotherMain_Stage_Clear";
public const string RmiName_CG_Request_AnotherMain_Stage_Continue="CG_Request_AnotherMain_Stage_Continue";
public const string RmiName_CG_Request_FinalBoss_Season_Rank_Info="CG_Request_FinalBoss_Season_Rank_Info";
public const string RmiName_CG_Request_Reverse_Stage_Start="CG_Request_Reverse_Stage_Start";
public const string RmiName_CG_Request_Reverse_Stage_Clear="CG_Request_Reverse_Stage_Clear";
public const string RmiName_CG_Request_Reverse_Star_Reward="CG_Request_Reverse_Star_Reward";
public const string RmiName_CG_Request_Reverse_Group_Reward="CG_Request_Reverse_Group_Reward";
public const string RmiName_CG_Request_Main_EventAreaStage_Start="CG_Request_Main_EventAreaStage_Start";
public const string RmiName_CG_Request_Main_EventAreaStage_Clear="CG_Request_Main_EventAreaStage_Clear";
public const string RmiName_CG_Request_Main_EventAreaStage_Continue="CG_Request_Main_EventAreaStage_Continue";
public const string RmiName_CG_Request_Free_EventAreaStage_Start="CG_Request_Free_EventAreaStage_Start";
public const string RmiName_CG_Request_Free_EventAreaStage_Clear="CG_Request_Free_EventAreaStage_Clear";
public const string RmiName_CG_Request_Free_EventAreaStage_Continue="CG_Request_Free_EventAreaStage_Continue";
public const string RmiName_CG_RequestEventAreaRewardStageClear="CG_RequestEventAreaRewardStageClear";
public const string RmiName_CG_Request_Free_EventStage_Start="CG_Request_Free_EventStage_Start";
public const string RmiName_CG_Request_Free_EventStage_Clear="CG_Request_Free_EventStage_Clear";
public const string RmiName_CG_Request_Free_EventStage_Continue="CG_Request_Free_EventStage_Continue";
public const string RmiName_CG_RequestEventExchange="CG_RequestEventExchange";
public const string RmiName_CG_RequestEventPlayCountReward="CG_RequestEventPlayCountReward";
public const string RmiName_CG_Request_Main_ListEventStage_Start="CG_Request_Main_ListEventStage_Start";
public const string RmiName_CG_Request_Main_ListEventStage_Clear="CG_Request_Main_ListEventStage_Clear";
public const string RmiName_CG_Request_Main_ListEventStage_Continue="CG_Request_Main_ListEventStage_Continue";
public const string RmiName_CG_Request_Free_ListEventStage_Start="CG_Request_Free_ListEventStage_Start";
public const string RmiName_CG_Request_Free_ListEventStage_Clear="CG_Request_Free_ListEventStage_Clear";
public const string RmiName_CG_Request_Free_ListEventStage_Continue="CG_Request_Free_ListEventStage_Continue";
public const string RmiName_CG_Request_Main_FinalBossStage_Start="CG_Request_Main_FinalBossStage_Start";
public const string RmiName_CG_Request_Main_FinalBossStage_Clear="CG_Request_Main_FinalBossStage_Clear";
public const string RmiName_CG_Request_Main_FinalBossStage_Continue="CG_Request_Main_FinalBossStage_Continue";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_Start="CG_Request_FinalBoss_EventFreeStage_Start";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_Clear="CG_Request_FinalBoss_EventFreeStage_Clear";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_Continue="CG_Request_FinalBoss_EventFreeStage_Continue";
public const string RmiName_CG_Request_Limited_EventStage_Start="CG_Request_Limited_EventStage_Start";
public const string RmiName_CG_Request_Limited_EventStage_Clear="CG_Request_Limited_EventStage_Clear";
public const string RmiName_CG_Request_Limited_EventStage_Continue="CG_Request_Limited_EventStage_Continue";
public const string RmiName_CG_Request_Boss_EventStage_Start="CG_Request_Boss_EventStage_Start";
public const string RmiName_CG_Request_Boss_EventStage_Clear="CG_Request_Boss_EventStage_Clear";
public const string RmiName_CG_Request_Boss_EventStage_Continue="CG_Request_Boss_EventStage_Continue";
public const string RmiName_CG_Request_Monthly_EventStage_Start="CG_Request_Monthly_EventStage_Start";
public const string RmiName_CG_Request_Monthly_EventStage_Clear="CG_Request_Monthly_EventStage_Clear";
public const string RmiName_CG_Request_Monthly_EventStage_Continue="CG_Request_Monthly_EventStage_Continue";
public const string RmiName_CG_RequestMonthlyStagePointReward="CG_RequestMonthlyStagePointReward";
public const string RmiName_CG_RequestWeekStageGaugeReward="CG_RequestWeekStageGaugeReward";
public const string RmiName_CG_RequestIngameBattleStart="CG_RequestIngameBattleStart";
public const string RmiName_CG_RequestStageEndLog="CG_RequestStageEndLog";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_Start="CG_Request_ChallengeBoss_EventStage_Start";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_Clear="CG_Request_ChallengeBoss_EventStage_Clear";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_Continue="CG_Request_ChallengeBoss_EventStage_Continue";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_Info="CG_Request_ChallengeBoss_EventStage_Info";
public const string RmiName_CG_Request_ChallengeBoss_Event_Point_Reward="CG_Request_ChallengeBoss_Event_Point_Reward";
public const string RmiName_CG_RequestMailList="CG_RequestMailList";
public const string RmiName_CG_RequestMailConfirm="CG_RequestMailConfirm";
public const string RmiName_CG_RequestMailConfirmAll="CG_RequestMailConfirmAll";
public const string RmiName_CG_RequestMailHistoryList="CG_RequestMailHistoryList";
public const string RmiName_CG_RequestMailRecentlyHistoryList="CG_RequestMailRecentlyHistoryList";
public const string RmiName_CG_RequestFriendMailList="CG_RequestFriendMailList";
public const string RmiName_CG_RequestFriendMailConfirm="CG_RequestFriendMailConfirm";
public const string RmiName_CG_RequestFriendMailConfirmAll="CG_RequestFriendMailConfirmAll";
public const string RmiName_CG_RequestNoticeMailReward="CG_RequestNoticeMailReward";
public const string RmiName_CG_RequestPackageMailList="CG_RequestPackageMailList";
public const string RmiName_CG_RequestPackageMailGet="CG_RequestPackageMailGet";
public const string RmiName_CG_RequestPackageMailHistoryList="CG_RequestPackageMailHistoryList";
public const string RmiName_CG_RequestLevelUpPackageReward="CG_RequestLevelUpPackageReward";
public const string RmiName_CG_RequestLevelUpPackageRewardAll="CG_RequestLevelUpPackageRewardAll";
public const string RmiName_CG_RequestAttendancePackageReward="CG_RequestAttendancePackageReward";
public const string RmiName_CG_RequestAttendancePackageRewardAll="CG_RequestAttendancePackageRewardAll";
public const string RmiName_CG_RequestMailADReward="CG_RequestMailADReward";
public const string RmiName_CG_RequestGambleShopBuy="CG_RequestGambleShopBuy";
public const string RmiName_CG_RequestStepupGambleShopBuy="CG_RequestStepupGambleShopBuy";
public const string RmiName_CG_RequestStepupGambleMileageReward="CG_RequestStepupGambleMileageReward";
public const string RmiName_CG_RequestItemGambleShopInfo="CG_RequestItemGambleShopInfo";
public const string RmiName_CG_RequestItemGambleShopBuy="CG_RequestItemGambleShopBuy";
public const string RmiName_CG_RequestRandomShopBuy="CG_RequestRandomShopBuy";
public const string RmiName_CG_RequestRandomShopRefresh="CG_RequestRandomShopRefresh";
public const string RmiName_CG_RequestRandomShopInfo="CG_RequestRandomShopInfo";
public const string RmiName_CG_RequestBasePointShopInfo="CG_RequestBasePointShopInfo";
public const string RmiName_CG_RequestBasePointShopBuy="CG_RequestBasePointShopBuy";
public const string RmiName_CG_RequestBasePointShopReset="CG_RequestBasePointShopReset";
public const string RmiName_CG_RequestArenaRealTimePvpShopInfo="CG_RequestArenaRealTimePvpShopInfo";
public const string RmiName_CG_RequestArenaRealTimePvpShopBuy="CG_RequestArenaRealTimePvpShopBuy";
public const string RmiName_CG_RequestArenaRealTimePvpShopReset="CG_RequestArenaRealTimePvpShopReset";
public const string RmiName_CG_RequestCoinShopInfo="CG_RequestCoinShopInfo";
public const string RmiName_CG_RequestCoinShopBuy="CG_RequestCoinShopBuy";
public const string RmiName_CG_RequestCoinShopDailyBuy="CG_RequestCoinShopDailyBuy";
public const string RmiName_CG_RequestCoinShopOnceBuy="CG_RequestCoinShopOnceBuy";
public const string RmiName_CG_RequestCostumeShopInfo="CG_RequestCostumeShopInfo";
public const string RmiName_CG_RequestCostumeShopBuy="CG_RequestCostumeShopBuy";
public const string RmiName_CG_RequestCostumeShopPackageBuy="CG_RequestCostumeShopPackageBuy";
public const string RmiName_CG_RequestFriendPointShopInfo="CG_RequestFriendPointShopInfo";
public const string RmiName_CG_RequestFriendPointShopBuy="CG_RequestFriendPointShopBuy";
public const string RmiName_CG_RequestDiaShopInfo="CG_RequestDiaShopInfo";
public const string RmiName_CG_RequestDiaShopBuy="CG_RequestDiaShopBuy";
public const string RmiName_CG_RequestItemInventoryBuy="CG_RequestItemInventoryBuy";
public const string RmiName_CG_RequestWeaponInventoryBuy="CG_RequestWeaponInventoryBuy";
public const string RmiName_CG_RequestWeekStageKeyBuy="CG_RequestWeekStageKeyBuy";
public const string RmiName_CG_RequestCommonItemSell="CG_RequestCommonItemSell";
public const string RmiName_CG_RequestCommonItemRemove="CG_RequestCommonItemRemove";
public const string RmiName_CG_RequestPackageBuy="CG_RequestPackageBuy";
public const string RmiName_CG_RequestBuyDia="CG_RequestBuyDia";
public const string RmiName_CG_RequestBuyGold="CG_RequestBuyGold";
public const string RmiName_CG_RequestBuyStamina="CG_RequestBuyStamina";
public const string RmiName_CG_RequestGuildShopInfo="CG_RequestGuildShopInfo";
public const string RmiName_CG_RequestGuildShopBuy="CG_RequestGuildShopBuy";
public const string RmiName_CG_RequestGuildShopReset="CG_RequestGuildShopReset";
public const string RmiName_CG_RequestFinalBossShopInfo="CG_RequestFinalBossShopInfo";
public const string RmiName_CG_RequestFinalBossShopBuy="CG_RequestFinalBossShopBuy";
public const string RmiName_CG_RequestEventCollaborationCoinShopInfo="CG_RequestEventCollaborationCoinShopInfo";
public const string RmiName_CG_RequestEventCollaborationCoinShopBuy="CG_RequestEventCollaborationCoinShopBuy";
public const string RmiName_CG_RequestBingoGambleShopInfo="CG_RequestBingoGambleShopInfo";
public const string RmiName_CG_RequestBingoGambleShopReset="CG_RequestBingoGambleShopReset";
public const string RmiName_CG_RequestBingoGambleShopReward="CG_RequestBingoGambleShopReward";
public const string RmiName_CG_RequestDiaShopPackageBuy="CG_RequestDiaShopPackageBuy";
public const string RmiName_CG_RequestRandomShopVisitReward="CG_RequestRandomShopVisitReward";
public const string RmiName_CG_RequestGambleChoiceShopBuy="CG_RequestGambleChoiceShopBuy";
public const string RmiName_CG_RequestRandomShopScheduleInfo="CG_RequestRandomShopScheduleInfo";
public const string RmiName_CG_RequestPackageShopInfo="CG_RequestPackageShopInfo";
public const string RmiName_CG_RequestFreePackageReward="CG_RequestFreePackageReward";
public const string RmiName_CG_RequestPackageMissionClose="CG_RequestPackageMissionClose";
public const string RmiName_CG_RequestGambleShopInfo="CG_RequestGambleShopInfo";
public const string RmiName_CG_RequestADRouletteReward="CG_RequestADRouletteReward";
public const string RmiName_CG_RequestQuestStart="CG_RequestQuestStart";
public const string RmiName_CG_RequestQuestProgress="CG_RequestQuestProgress";
public const string RmiName_CG_RequestQuestClear="CG_RequestQuestClear";
public const string RmiName_CG_RequestQuestRemove="CG_RequestQuestRemove";
public const string RmiName_CG_RequestNetmarbleQuestAchieve="CG_RequestNetmarbleQuestAchieve";
public const string RmiName_CG_RequestNetmarbleQuestReward="CG_RequestNetmarbleQuestReward";
public const string RmiName_CG_RequestDirectSelectorReward="CG_RequestDirectSelectorReward";
public const string RmiName_CG_RequestMissionProgress="CG_RequestMissionProgress";
public const string RmiName_CG_RequestMissionClear="CG_RequestMissionClear";
public const string RmiName_CG_RequestMissionEventClear="CG_RequestMissionEventClear";
public const string RmiName_CG_RequestMissionGetAchievePointReward="CG_RequestMissionGetAchievePointReward";
public const string RmiName_CG_RequestQuestChapterClear="CG_RequestQuestChapterClear";
public const string RmiName_CG_RequestEventMissionGetAchievePointReward="CG_RequestEventMissionGetAchievePointReward";
public const string RmiName_CG_RequestEventMissionCompleteReward="CG_RequestEventMissionCompleteReward";
public const string RmiName_CG_RequestEventMissionInfo="CG_RequestEventMissionInfo";
public const string RmiName_CG_RequestEventQuestClear="CG_RequestEventQuestClear";
public const string RmiName_CG_RequestAnotherQuestClear="CG_RequestAnotherQuestClear";
public const string RmiName_CG_RequestQuestGuideListAllClearReward="CG_RequestQuestGuideListAllClearReward";
public const string RmiName_CG_RequestLobbyVRSearch="CG_RequestLobbyVRSearch";
public const string RmiName_CG_RequestLobbyVRHelbram="CG_RequestLobbyVRHelbram";
public const string RmiName_CG_RequestLobbyNpcSkin="CG_RequestLobbyNpcSkin";
public const string RmiName_CG_RequestLobbyNpcGift="CG_RequestLobbyNpcGift";
public const string RmiName_CG_RequestLobbyKingAmber="CG_RequestLobbyKingAmber";
public const string RmiName_CG_RequestLobbyDropInteractiveOpen="CG_RequestLobbyDropInteractiveOpen";
public const string RmiName_CG_RequestLobbyUniqueInteractiveOpen="CG_RequestLobbyUniqueInteractiveOpen";
public const string RmiName_CG_RequestLobbyNpcTalkInfo="CG_RequestLobbyNpcTalkInfo";
public const string RmiName_CG_RequestLobbyNpcTalkChoice="CG_RequestLobbyNpcTalkChoice";
public const string RmiName_CG_RequestLobbyBarrel="CG_RequestLobbyBarrel";
public const string RmiName_CG_RequestLobbyBarrelRefill="CG_RequestLobbyBarrelRefill";
public const string RmiName_CG_RequestLobbyCleanTable="CG_RequestLobbyCleanTable";
public const string RmiName_CG_RequestLobbyServeBeer="CG_RequestLobbyServeBeer";
public const string RmiName_CG_RequestLobbyPlayJukebox="CG_RequestLobbyPlayJukebox";
public const string RmiName_CG_RequestLobbyElizabethTouch="CG_RequestLobbyElizabethTouch";
public const string RmiName_CG_RequestLobbyHawkAnger="CG_RequestLobbyHawkAnger";
public const string RmiName_CG_RequestAttendanceReward="CG_RequestAttendanceReward";
public const string RmiName_CG_RequestAttendanceEventReward="CG_RequestAttendanceEventReward";
public const string RmiName_CG_RequestCookingStart="CG_RequestCookingStart";
public const string RmiName_CG_RequestRecipeActive="CG_RequestRecipeActive";
public const string RmiName_CG_RequestCookingRecipeOrderInfo="CG_RequestCookingRecipeOrderInfo";
public const string RmiName_CG_RequestCookingRecipeOrder="CG_RequestCookingRecipeOrder";
public const string RmiName_CG_RequestCookingRecipeDisorder="CG_RequestCookingRecipeDisorder";
public const string RmiName_CG_RequestCookingRecipeCollect="CG_RequestCookingRecipeCollect";
public const string RmiName_CG_RequestCookingRecipeCollectOneSlot="CG_RequestCookingRecipeCollectOneSlot";
public const string RmiName_CG_RequestCookingUseCookingBuff="CG_RequestCookingUseCookingBuff";
public const string RmiName_CG_RequestGuestInfo="CG_RequestGuestInfo";
public const string RmiName_CG_RequestGuestChange="CG_RequestGuestChange";
public const string RmiName_CG_RequestGuestChangeTarget="CG_RequestGuestChangeTarget";
public const string RmiName_CG_RequestGuestTalk="CG_RequestGuestTalk";
public const string RmiName_CG_RequestGuestGift="CG_RequestGuestGift";
public const string RmiName_CG_RequestBirthdayNpcInfo="CG_RequestBirthdayNpcInfo";
public const string RmiName_CG_RequestRestReward="CG_RequestRestReward";
public const string RmiName_CG_RequestLobbyHousingShopInfo="CG_RequestLobbyHousingShopInfo";
public const string RmiName_CG_RequestLobbyHousingShopBuy="CG_RequestLobbyHousingShopBuy";
public const string RmiName_CG_RequestLobbyFurnitureRegist="CG_RequestLobbyFurnitureRegist";
public const string RmiName_CG_RequestUserMusicEdit="CG_RequestUserMusicEdit";
public const string RmiName_CG_RequestAttendanceFortuneEventReward="CG_RequestAttendanceFortuneEventReward";
public const string RmiName_CG_RequestBasePointGoldDonation="CG_RequestBasePointGoldDonation";
public const string RmiName_CG_RequestBasePointSetTrigger="CG_RequestBasePointSetTrigger";
public const string RmiName_CG_RequestBasePointDropInteractiveOpen="CG_RequestBasePointDropInteractiveOpen";
public const string RmiName_CG_RequestBasePointUniqueInteractiveOpen="CG_RequestBasePointUniqueInteractiveOpen";
public const string RmiName_CG_RequestBasePointDailyReward="CG_RequestBasePointDailyReward";
public const string RmiName_CG_RequestBasePointDonationEventReward="CG_RequestBasePointDonationEventReward";
public const string RmiName_CG_RequestBasePointDonationInfo="CG_RequestBasePointDonationInfo";
public const string RmiName_CG_RequestBasePointEventGoldDonation="CG_RequestBasePointEventGoldDonation";
public const string RmiName_CG_RequestEventBasepointInfo="CG_RequestEventBasepointInfo";
public const string RmiName_CG_RequestDestroySetInviteOption="CG_RequestDestroySetInviteOption";
public const string RmiName_CG_RequestDestroyGetUserLoginList="CG_RequestDestroyGetUserLoginList";
public const string RmiName_CG_RequestDestroyGetFriendLoginList="CG_RequestDestroyGetFriendLoginList";
public const string RmiName_CG_RequestDestroyGetGuildLoginList="CG_RequestDestroyGetGuildLoginList";
public const string RmiName_CG_RequestDestroyGetReceivedInvitationList="CG_RequestDestroyGetReceivedInvitationList";
public const string RmiName_CG_RequestDestroyInvite="CG_RequestDestroyInvite";
public const string RmiName_CG_RequestDestroyRemoveInvitation="CG_RequestDestroyRemoveInvitation";
public const string RmiName_CG_RequestDestroyRemoveJoinInfo="CG_RequestDestroyRemoveJoinInfo";
public const string RmiName_CG_RequestDestroyCreate="CG_RequestDestroyCreate";
public const string RmiName_CG_RequestDestroyJoin="CG_RequestDestroyJoin";
public const string RmiName_CG_RequestDestroyStart="CG_RequestDestroyStart";
public const string RmiName_CG_RequestDestroyBattleStart="CG_RequestDestroyBattleStart";
public const string RmiName_CG_RequestDestroyClear="CG_RequestDestroyClear";
public const string RmiName_CG_RequestDestroyReJoin="CG_RequestDestroyReJoin";
public const string RmiName_CG_RequestDestroyRemove="CG_RequestDestroyRemove";
public const string RmiName_CG_RequestDestroyBattleEnd="CG_RequestDestroyBattleEnd";
public const string RmiName_CG_RequestDestroyInviteAI="CG_RequestDestroyInviteAI";
public const string RmiName_CG_RequestDestroyKickOutAI="CG_RequestDestroyKickOutAI";
public const string RmiName_CG_RequestEventDestroyCreate="CG_RequestEventDestroyCreate";
public const string RmiName_CG_RequestEventDestroyStart="CG_RequestEventDestroyStart";
public const string RmiName_CG_RequestEventDestroyClear="CG_RequestEventDestroyClear";
public const string RmiName_CG_RequestEventDestroyRemove="CG_RequestEventDestroyRemove";
public const string RmiName_CG_RequestEventChallengeDestroyCreate="CG_RequestEventChallengeDestroyCreate";
public const string RmiName_CG_RequestEventChallengeDestroyStart="CG_RequestEventChallengeDestroyStart";
public const string RmiName_CG_RequestEventChallengeDestroyClear="CG_RequestEventChallengeDestroyClear";
public const string RmiName_CG_RequestEventChallengeDestroyPointRefresh="CG_RequestEventChallengeDestroyPointRefresh";
public const string RmiName_CG_RequestEventChallengeDestroyUserReward="CG_RequestEventChallengeDestroyUserReward";
public const string RmiName_CG_RequestEventChallengeDestroyWorldReward="CG_RequestEventChallengeDestroyWorldReward";
public const string RmiName_CG_RequestFriendList="CG_RequestFriendList";
public const string RmiName_CG_RequestFriendGuildInfo="CG_RequestFriendGuildInfo";
public const string RmiName_CG_RequestFriendApplySendList="CG_RequestFriendApplySendList";
public const string RmiName_CG_RequestFriendApplyReceiveList="CG_RequestFriendApplyReceiveList";
public const string RmiName_CG_RequestFriendApplySend="CG_RequestFriendApplySend";
public const string RmiName_CG_RequestFriendApplyReject="CG_RequestFriendApplyReject";
public const string RmiName_CG_RequestFriendApplyReceiveAccept="CG_RequestFriendApplyReceiveAccept";
public const string RmiName_CG_RequestFriendApplyReceiveAcceptList="CG_RequestFriendApplyReceiveAcceptList";
public const string RmiName_CG_RequestFriendApplyReceiveRefuse="CG_RequestFriendApplyReceiveRefuse";
public const string RmiName_CG_RequestFriendApplyReceiveRefuseList="CG_RequestFriendApplyReceiveRefuseList";
public const string RmiName_CG_RequestFriendRemove="CG_RequestFriendRemove";
public const string RmiName_CG_RequestFriendSearch="CG_RequestFriendSearch";
public const string RmiName_CG_RequestFriendVisit="CG_RequestFriendVisit";
public const string RmiName_CG_RequestFriendPointSend="CG_RequestFriendPointSend";
public const string RmiName_CG_RequestFriendPointSendAll="CG_RequestFriendPointSendAll";
public const string RmiName_CG_RequestFriendLobbyInfo="CG_RequestFriendLobbyInfo";
public const string RmiName_CG_RequestFriendCookingRecipeInfo="CG_RequestFriendCookingRecipeInfo";
public const string RmiName_CG_RequestFriendCookingEat="CG_RequestFriendCookingEat";
public const string RmiName_CG_RequestFriendCookingEatFriendList="CG_RequestFriendCookingEatFriendList";
public const string RmiName_CG_RequestGuildRecommendList="CG_RequestGuildRecommendList";
public const string RmiName_CG_RequestGuildInfoWithMemberList="CG_RequestGuildInfoWithMemberList";
public const string RmiName_CG_RequestGuildSearchByName="CG_RequestGuildSearchByName";
public const string RmiName_CG_RequestGuildCreate="CG_RequestGuildCreate";
public const string RmiName_CG_RequestGuildDisband="CG_RequestGuildDisband";
public const string RmiName_CG_RequestGuildApplicantList="CG_RequestGuildApplicantList";
public const string RmiName_CG_RequestGuildApply="CG_RequestGuildApply";
public const string RmiName_CG_RequestGuildReturnApplication="CG_RequestGuildReturnApplication";
public const string RmiName_CG_RequestGuildAcceptApplicant="CG_RequestGuildAcceptApplicant";
public const string RmiName_CG_RequestGuildRejectApplicant="CG_RequestGuildRejectApplicant";
public const string RmiName_CG_RequestGuildLevelUp="CG_RequestGuildLevelUp";
public const string RmiName_CG_RequestGuildChangeName="CG_RequestGuildChangeName";
public const string RmiName_CG_RequestGuildChangeBoard="CG_RequestGuildChangeBoard";
public const string RmiName_CG_RequestGuildChangeMaster="CG_RequestGuildChangeMaster";
public const string RmiName_CG_RequestGuildChangeMemberGrade="CG_RequestGuildChangeMemberGrade";
public const string RmiName_CG_RequestGuildKickOutMember="CG_RequestGuildKickOutMember";
public const string RmiName_CG_RequestGuildLeave="CG_RequestGuildLeave";
public const string RmiName_CG_RequestGuildRoomInfo="CG_RequestGuildRoomInfo";
public const string RmiName_CG_RequestGuildAttendance="CG_RequestGuildAttendance";
public const string RmiName_CG_RequestGuildAttendanceReward="CG_RequestGuildAttendanceReward";
public const string RmiName_CG_RequestGuildUserInfo="CG_RequestGuildUserInfo";
public const string RmiName_CG_RequestGuildAttendanceStatus="CG_RequestGuildAttendanceStatus";
public const string RmiName_CG_RequestGuildDonation="CG_RequestGuildDonation";
public const string RmiName_CG_RequestGuildDonationInitialize="CG_RequestGuildDonationInitialize";
public const string RmiName_CG_RequestGuildMissionInfo="CG_RequestGuildMissionInfo";
public const string RmiName_CG_RequestGuildMissionReward="CG_RequestGuildMissionReward";
public const string RmiName_CG_RequestGuildDonationInfo="CG_RequestGuildDonationInfo";
public const string RmiName_CG_RequestGuildSkillInfo="CG_RequestGuildSkillInfo";
public const string RmiName_CG_RequestGuildSkillLevelUp="CG_RequestGuildSkillLevelUp";
public const string RmiName_CG_RequestGuildSkillUse="CG_RequestGuildSkillUse";
public const string RmiName_CG_RequestGuildSkillDisuse="CG_RequestGuildSkillDisuse";
public const string RmiName_CG_RequestGuildSkillUseInfo="CG_RequestGuildSkillUseInfo";
public const string RmiName_CG_RequestGuildMemberRankPointReward="CG_RequestGuildMemberRankPointReward";
public const string RmiName_CG_RequestGuildBattlePointRegister="CG_RequestGuildBattlePointRegister";
public const string RmiName_CG_RequestGuildBattlePointMemeberRankList="CG_RequestGuildBattlePointMemeberRankList";
public const string RmiName_CG_RequestGuildBattlePointGuildRankList="CG_RequestGuildBattlePointGuildRankList";
public const string RmiName_CG_RequestGuildBattlePointUserRankList="CG_RequestGuildBattlePointUserRankList";
public const string RmiName_CG_RequestAPRechargeByUseItem="CG_RequestAPRechargeByUseItem";
public const string RmiName_CG_RequestWeekStageKeyOpen="CG_RequestWeekStageKeyOpen";
public const string RmiName_CG_RequestFoodBuffAutoUseOnOff="CG_RequestFoodBuffAutoUseOnOff";
public const string RmiName_CG_RequestItemUseRankExp="CG_RequestItemUseRankExp";
public const string RmiName_CG_RequestItemUseBoxOpen="CG_RequestItemUseBoxOpen";
public const string RmiName_CG_RequestItemUseRecipeExp="CG_RequestItemUseRecipeExp";
public const string RmiName_CG_RequestItemUseWeeklyKeyBox="CG_RequestItemUseWeeklyKeyBox";
public const string RmiName_CG_RequestItemUseWeaponTicket="CG_RequestItemUseWeaponTicket";
public const string RmiName_CG_RequestItemUseMusic="CG_RequestItemUseMusic";
public const string RmiName_CG_RequestTutorialAddStep="CG_RequestTutorialAddStep";
public const string RmiName_CG_RequestTutorialSetFlag="CG_RequestTutorialSetFlag";
public const string RmiName_CG_RequestTutorialHeroFlag="CG_RequestTutorialHeroFlag";
public const string RmiName_CG_RequestTutorialGambleShopBuy="CG_RequestTutorialGambleShopBuy";
public const string RmiName_CG_RequestBattleTutorialInfo="CG_RequestBattleTutorialInfo";
public const string RmiName_CG_RequestBattleTutorialSet="CG_RequestBattleTutorialSet";
public const string RmiName_CG_RequestFriendlyMatchCreate="CG_RequestFriendlyMatchCreate";
public const string RmiName_CG_RequestFriendlyMatchFriendList="CG_RequestFriendlyMatchFriendList";
public const string RmiName_CG_RequestFriendlyMatchInvite="CG_RequestFriendlyMatchInvite";
public const string RmiName_CG_RequestFriendlyMatchReceivedInviteList="CG_RequestFriendlyMatchReceivedInviteList";
public const string RmiName_CG_RequestFriendlyMatchInviteAccept="CG_RequestFriendlyMatchInviteAccept";
public const string RmiName_CG_RequestFriendlyMatchInviteReject="CG_RequestFriendlyMatchInviteReject";
public const string RmiName_CG_RequestFriendlyMatchStart="CG_RequestFriendlyMatchStart";
public const string RmiName_CG_RequestFriendlyMatchBattleStart="CG_RequestFriendlyMatchBattleStart";
public const string RmiName_CG_RequestFriendlyMatchClear="CG_RequestFriendlyMatchClear";
public const string RmiName_CG_RequestFriendlyMatchExit="CG_RequestFriendlyMatchExit";
public const string RmiName_CG_RequestFriendlyMatchSetInviteOption="CG_RequestFriendlyMatchSetInviteOption";
public const string RmiName_CG_RequestEventSeasonPassInfo="CG_RequestEventSeasonPassInfo";
public const string RmiName_CG_RequestEventSeasonPassRankUpReward="CG_RequestEventSeasonPassRankUpReward";
public const string RmiName_CG_RequestEventSeasonPassRankUpRewardAll="CG_RequestEventSeasonPassRankUpRewardAll";
public const string RmiName_CG_RequestEventSeasonPassRankBuy="CG_RequestEventSeasonPassRankBuy";
public const string RmiName_CG_RequestWestSideServerInfo_Random="CG_RequestWestSideServerInfo_Random";
public const string RmiName_CG_RequestWestSideServerInfo_Fixed="CG_RequestWestSideServerInfo_Fixed";
public const string RmiName_CG_RequestWestSideServerInfo_Recommand="CG_RequestWestSideServerInfo_Recommand";
public const string RmiName_CG_RequestWestSide_PlayerInfo="CG_RequestWestSide_PlayerInfo";
public const string RmiName_CG_RequestWestSide_PlayerteamInfo="CG_RequestWestSide_PlayerteamInfo";
public const string RmiName_CG_RequestWestSide_PlayerGuildInfo="CG_RequestWestSide_PlayerGuildInfo";
public const string RmiName_CG_RequestWorldChattingChannel="CG_RequestWorldChattingChannel";
public const string RmiName_CG_RequestArenaRealTimePvpLobbyInfo="CG_RequestArenaRealTimePvpLobbyInfo";
public const string RmiName_CG_RequestArenaRealTimePvpJoin="CG_RequestArenaRealTimePvpJoin";
public const string RmiName_CG_RequestArenaRealTimePvpTopRankerList="CG_RequestArenaRealTimePvpTopRankerList";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerList="CG_RequestArenaRealTimePvpLastRankerList";
public const string RmiName_CG_RequestArenaRealTimePvpMatching="CG_RequestArenaRealTimePvpMatching";
public const string RmiName_CG_RequestArenaRealTimePvpBattleStart="CG_RequestArenaRealTimePvpBattleStart";
public const string RmiName_CG_RequestArenaRealTimePvpBattleEnd="CG_RequestArenaRealTimePvpBattleEnd";
public const string RmiName_CG_RequestArenaRealTimePvpRollback="CG_RequestArenaRealTimePvpRollback";
public const string RmiName_CG_RequestArenaRealTimePvpIngameBattleStart="CG_RequestArenaRealTimePvpIngameBattleStart";
public const string RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfo="CG_RequestArenaRealTimePvpLowerLobbyInfo";
public const string RmiName_CG_RequestArenaRealTimePvpLowerJoin="CG_RequestArenaRealTimePvpLowerJoin";
public const string RmiName_CG_RequestArenaRealTimePvpLowerTopRankerList="CG_RequestArenaRealTimePvpLowerTopRankerList";
public const string RmiName_CG_RequestArenaRealTimePvpLowerMatching="CG_RequestArenaRealTimePvpLowerMatching";
public const string RmiName_CG_RequestArenaRealTimePvpLowerBattleStart="CG_RequestArenaRealTimePvpLowerBattleStart";
public const string RmiName_CG_RequestArenaRealTimePvpLowerBattleEnd="CG_RequestArenaRealTimePvpLowerBattleEnd";
public const string RmiName_CG_RequestArenaRealTimePvpAllInfo="CG_RequestArenaRealTimePvpAllInfo";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfo="CG_RequestArenaRealTimePvpLastRankerBattleInfo";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStart="CG_RequestArenaRealTimePvpLastRankerBattleStart";
public const string RmiName_CG_RequestArenaRealTimePvpLowerRollback="CG_RequestArenaRealTimePvpLowerRollback";
public const string RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStart="CG_RequestArenaRealTimePvpLowerIngameBattleStart";
public const string RmiName_CG_RequestArenaRealTimeDecisionLobbyInfo="CG_RequestArenaRealTimeDecisionLobbyInfo";
public const string RmiName_CG_RequestArenaRealTimeDecisionJoin="CG_RequestArenaRealTimeDecisionJoin";
public const string RmiName_CG_RequestArenaRealTimeDecisionTopRankerList="CG_RequestArenaRealTimeDecisionTopRankerList";
public const string RmiName_CG_RequestArenaRealTimeDecisionMatching="CG_RequestArenaRealTimeDecisionMatching";
public const string RmiName_CG_RequestArenaRealTimeDecisionBattleEnd="CG_RequestArenaRealTimeDecisionBattleEnd";
public const string RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStart="CG_RequestArenaRealTimeDecisionIngameBattleStart";
public const string RmiName_CG_RequestArenaRealTimeDecisionHistory="CG_RequestArenaRealTimeDecisionHistory";
public const string RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingList="CG_RequestArenaRealTimeDecisionChangeMatchingList";
public const string RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo="CG_RequestArenaRealTimeDecisionMatchingSimpleInfo";
public const string RmiName_CG_RequestPvpSeasonInfo="CG_RequestPvpSeasonInfo";
public const string RmiName_CG_RequestPvpSeasonHistory="CG_RequestPvpSeasonHistory";
public const string RmiName_CG_RequestBossWarCreate="CG_RequestBossWarCreate";
public const string RmiName_CG_RequestBossWarJoin="CG_RequestBossWarJoin";
public const string RmiName_CG_RequestBossWarStart="CG_RequestBossWarStart";
public const string RmiName_CG_RequestBossWarOnlineFriendList="CG_RequestBossWarOnlineFriendList";
public const string RmiName_CG_RequestBossWarOnlineGuildMemberList="CG_RequestBossWarOnlineGuildMemberList";
public const string RmiName_CG_RequestBossWarOnlineUserRankRangeList="CG_RequestBossWarOnlineUserRankRangeList";
public const string RmiName_CG_RequestBossWarInvitationReceiveList="CG_RequestBossWarInvitationReceiveList";
public const string RmiName_CG_RequestBossWarRemoveInvitation="CG_RequestBossWarRemoveInvitation";
public const string RmiName_CG_RequestBossWarInvite="CG_RequestBossWarInvite";
public const string RmiName_CG_RequestBossWarKickOut="CG_RequestBossWarKickOut";
public const string RmiName_CG_RequestBossWarReady="CG_RequestBossWarReady";
public const string RmiName_CG_RequestBossWarReturnReady="CG_RequestBossWarReturnReady";
public const string RmiName_CG_RequestBossWarLeave="CG_RequestBossWarLeave";
public const string RmiName_CG_RequestBossWarBattleStart="CG_RequestBossWarBattleStart";
public const string RmiName_CG_RequestBossWarBattleSync="CG_RequestBossWarBattleSync";
public const string RmiName_CG_RequestBossWarBattleEnd="CG_RequestBossWarBattleEnd";
public const string RmiName_CG_RequestBossWarReward="CG_RequestBossWarReward";
public const string RmiName_CG_RequestEventExchangeInfo="CG_RequestEventExchangeInfo";
public const string RmiName_CG_RequestEventExchangeBoxGachaInfo="CG_RequestEventExchangeBoxGachaInfo";
public const string RmiName_CG_RequestEventExchangeBoxGachaPickup="CG_RequestEventExchangeBoxGachaPickup";
public const string RmiName_CG_RequestEventExchangeBoxGachaReset="CG_RequestEventExchangeBoxGachaReset";
public const string RmiName_CG_RequestEventPaybackReward="CG_RequestEventPaybackReward";
public const string RmiName_CG_RequestEventSnsShareProgress="CG_RequestEventSnsShareProgress";
public const string RmiName_CG_RequestEventSnsShareReward="CG_RequestEventSnsShareReward";
public const string RmiName_CG_RequestGagueEventInfo="CG_RequestGagueEventInfo";
public const string RmiName_CG_RequestGagueEventCharge="CG_RequestGagueEventCharge";
public const string RmiName_CG_RequestGagueEventReward="CG_RequestGagueEventReward";
public const string RmiName_CG_RequestGagueEventReset="CG_RequestGagueEventReset";
public const string RmiName_CG_RequestEventLadderReward="CG_RequestEventLadderReward";
public const string RmiName_CG_RequestEventLobbyGiftReward="CG_RequestEventLobbyGiftReward";
public const string RmiName_CG_RequestEventTimeMissionInfo="CG_RequestEventTimeMissionInfo";
public const string RmiName_CG_RequestEventTimeMissionStart="CG_RequestEventTimeMissionStart";
public const string RmiName_CG_RequestEventLobbyDecorationReward="CG_RequestEventLobbyDecorationReward";
public const string RmiName_CG_RequestRegistPlayTitle="CG_RequestRegistPlayTitle";
public const string RmiName_CG_RequestPlayTitleMissionReward="CG_RequestPlayTitleMissionReward";
public const string RmiName_CG_RequestTournamentList="CG_RequestTournamentList";
public const string RmiName_CG_RequestTournamentProgressInfo="CG_RequestTournamentProgressInfo";
public const string RmiName_CG_RequestTournamentResultInfo="CG_RequestTournamentResultInfo";
public const string RmiName_CG_RequestTournamentMatchJoin="CG_RequestTournamentMatchJoin";
public const string RmiName_CG_RequestTournamentMatchBattleStart="CG_RequestTournamentMatchBattleStart";
public const string RmiName_CG_RequestTournamentMatchBattleEnd="CG_RequestTournamentMatchBattleEnd";
public const string RmiName_CG_RequestTournamentMatchExit="CG_RequestTournamentMatchExit";
public const string RmiName_CG_RequestTournamentReward="CG_RequestTournamentReward";
public const string RmiName_CG_RequestTournamentPlayerTeamSlotChange="CG_RequestTournamentPlayerTeamSlotChange";
public const string RmiName_CG_RequestTournamentPlayerTeamInfo="CG_RequestTournamentPlayerTeamInfo";
public const string RmiName_CG_RequestTournamentCheer="CG_RequestTournamentCheer";
public const string RmiName_CG_RequestTournamentCheerList="CG_RequestTournamentCheerList";
public const string RmiName_CG_RequestTournamentWatcherJoin="CG_RequestTournamentWatcherJoin";
public const string RmiName_CG_RequestTournamentWatcherExit="CG_RequestTournamentWatcherExit";
public const string RmiName_CG_RequestTournamentMatchPlayInfo="CG_RequestTournamentMatchPlayInfo";
public const string RmiName_CG_RequestTournamentReplayInfo="CG_RequestTournamentReplayInfo";
public const string RmiName_CG_RequestGuildWarLobbyInfo="CG_RequestGuildWarLobbyInfo";
public const string RmiName_CG_RequestGuildWarRankInfo="CG_RequestGuildWarRankInfo";
public const string RmiName_CG_RequestGuildWarVersusRecordInfo="CG_RequestGuildWarVersusRecordInfo";
public const string RmiName_CG_RequestGuildWarGuildMemberList="CG_RequestGuildWarGuildMemberList";
public const string RmiName_CG_RequestGuildWarWorldMapInfo="CG_RequestGuildWarWorldMapInfo";
public const string RmiName_CG_RequestGuildWarAttackSquadChange="CG_RequestGuildWarAttackSquadChange";
public const string RmiName_CG_RequestGuildWarDefenceTeamChange="CG_RequestGuildWarDefenceTeamChange";
public const string RmiName_CG_RequestGuildWarRegionBonusScoreChange="CG_RequestGuildWarRegionBonusScoreChange";
public const string RmiName_CG_RequestGuildWarAreaGuildMemberChange="CG_RequestGuildWarAreaGuildMemberChange";
public const string RmiName_CG_RequestGuildWarBattleRecordInfo="CG_RequestGuildWarBattleRecordInfo";
public const string RmiName_CG_Request_GuildWar_Stage_Start="CG_Request_GuildWar_Stage_Start";
public const string RmiName_CG_Request_GuildWar_Stage_Clear="CG_Request_GuildWar_Stage_Clear";
public const string RmiName_CG_Request_GuildWar_Stage_Rejoin="CG_Request_GuildWar_Stage_Rejoin";
public const string RmiName_CG_Request_GuildWar_Stage_HeroStatus_Sync="CG_Request_GuildWar_Stage_HeroStatus_Sync";
       
public const string RmiName_First = RmiName_CG_RequestChannelUserInfo;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_CG_RequestChannelUserInfo="";
public const string RmiName_CG_RequestHeartBeat="";
public const string RmiName_CG_RequestChangeNickname="";
public const string RmiName_CG_RequestChangeWantToSay="";
public const string RmiName_CG_RequestTeamInfo="";
public const string RmiName_CG_RequestTeamSlotChange="";
public const string RmiName_CG_RequestTeamNameChange="";
public const string RmiName_CG_RequestLobbyInfo="";
public const string RmiName_CG_RequestBasePointInfo="";
public const string RmiName_CG_RequestMercenaryList="";
public const string RmiName_CG_RequestMercenaryInfo="";
public const string RmiName_CG_RequestGuildInfo="";
public const string RmiName_CG_RequestChatStampUpdateBookmark="";
public const string RmiName_CG_RequestChatStampUpdateQuickMessage="";
public const string RmiName_CG_RequestMainSkinChange="";
public const string RmiName_CG_RequestEventList="";
public const string RmiName_CG_RequestCheatEnter="";
public const string RmiName_CG_RequestCheatStageClear="";
public const string RmiName_CG_RequestDllGetItem="";
public const string RmiName_CG_RequestRecommendFriendUSNList="";
public const string RmiName_CG_RequestDailyReset="";
public const string RmiName_CG_RequestFrozenAssetRedeem="";
public const string RmiName_CG_RequestSecurityToken="";
public const string RmiName_CG_RequestNetmarbleAuth="";
public const string RmiName_CG_RequestAuthenticateCreate="";
public const string RmiName_CG_RequestEditorUserInfoByNickName="";
public const string RmiName_CG_RequestLogin="";
public const string RmiName_CG_RequestLoginInstantly="";
public const string RmiName_CG_RetryRequest="";
public const string RmiName_CG_RequestBillingInitialize="";
public const string RmiName_CG_RequestBillingVerifyPU="";
public const string RmiName_CG_RequestBillingRemainTR="";
public const string RmiName_CG_RequestBillingCouponVerify="";
public const string RmiName_CG_RequestBillingCrossPromotion="";
public const string RmiName_CG_RequestBillingPackageShop="";
public const string RmiName_CG_RequestAgeInput="";
public const string RmiName_CG_RequestSDKInfoChange="";
public const string RmiName_CG_RequestSkinLevelUpBySkinMaterial="";
public const string RmiName_CG_RequestSkinResearch="";
public const string RmiName_CG_RequestSkinResearchInit="";
public const string RmiName_CG_RequestSkinMaterialGrind="";
public const string RmiName_CG_RequestSkinAwaken="";
public const string RmiName_CG_RequestSkinHeadStyleChange="";
public const string RmiName_CG_RequestSkinEvolution="";
public const string RmiName_CG_RequestSkinSkillLevelUp="";
public const string RmiName_CG_RequestSkinGiveFellowshipExp="";
public const string RmiName_CG_RequestSkinFellowshipLevelUpReward="";
public const string RmiName_CG_RequestCostumeEquip="";
public const string RmiName_CG_RequestCostumeUnEquip="";
public const string RmiName_CG_RequestCostumeUnLock="";
public const string RmiName_CG_RequestSkinOverEvolution="";
public const string RmiName_CG_RequestSkinMaxAwakenReward="";
public const string RmiName_CG_RequestCostumeRegister="";
public const string RmiName_CG_RequestSkinLoveReward="";
public const string RmiName_CG_RequestCostumeAutoRegister="";
public const string RmiName_CG_RequestStoryCostume="";
public const string RmiName_CG_RequestCostumeLevelUp="";
public const string RmiName_CG_RequestSkinMaxAwaken="";
public const string RmiName_CG_RequestWeaponEquip="";
public const string RmiName_CG_RequestWeaponUnEquip="";
public const string RmiName_CG_RequestWeaponSell="";
public const string RmiName_CG_RequestWeaponGrind="";
public const string RmiName_CG_RequestWeaponUpgrade="";
public const string RmiName_CG_RequestWeaponUpgradeRetry="";
public const string RmiName_CG_RequestWeaponEvolution="";
public const string RmiName_CG_RequestWeaponEvolutionRetry="";
public const string RmiName_CG_RequestWeaponOptionEnhance="";
public const string RmiName_CG_RequestWeaponLock="";
public const string RmiName_CG_RequestWeaponUnLock="";
public const string RmiName_CG_RequestWeaponEquipExchange="";
public const string RmiName_CG_RequestWeaponEquipExchangeAll="";
public const string RmiName_CG_RequestWeaponEquipRecommand="";
public const string RmiName_CG_RequestWeaponCarve="";
public const string RmiName_CG_RequestWeaponCarveRemove="";
public const string RmiName_CG_RequestStageInfo="";
public const string RmiName_CG_RequestStageRejoin="";
public const string RmiName_CG_Request_Week_Stage_Start="";
public const string RmiName_CG_Request_Week_Stage_Clear="";
public const string RmiName_CG_Request_Week_Stage_Continue="";
public const string RmiName_CG_Request_Main_Stage_Start="";
public const string RmiName_CG_Request_Main_Stage_Clear="";
public const string RmiName_CG_Request_Main_Stage_Continue="";
public const string RmiName_CG_Request_Free_Stage_Start="";
public const string RmiName_CG_Request_Free_Stage_Clear="";
public const string RmiName_CG_Request_Free_Stage_Continue="";
public const string RmiName_CG_RequestHawkRunStageStart="";
public const string RmiName_CG_RequestHawkRunStageClear="";
public const string RmiName_CG_RequestEventStageClear="";
public const string RmiName_CG_Request_Quest_Stage_Start="";
public const string RmiName_CG_Request_Quest_Stage_Clear="";
public const string RmiName_CG_Request_Quest_Stage_Continue="";
public const string RmiName_CG_Request_Boss_Stage_Start="";
public const string RmiName_CG_Request_Boss_Stage_Clear="";
public const string RmiName_CG_Request_Boss_Stage_Continue="";
public const string RmiName_CG_Request_Memorial_Stage_Start="";
public const string RmiName_CG_Request_Memorial_Stage_Clear="";
public const string RmiName_CG_Request_Memorial_Stage_Continue="";
public const string RmiName_CG_Request_Limited_Stage_Start="";
public const string RmiName_CG_Request_Limited_Stage_Clear="";
public const string RmiName_CG_Request_Limited_Stage_Continue="";
public const string RmiName_CG_Request_Main_ExtraStage_Start="";
public const string RmiName_CG_Request_Main_ExtraStage_Clear="";
public const string RmiName_CG_Request_Main_ExtraStage_Continue="";
public const string RmiName_CG_Request_Boss_ExtraStage_Start="";
public const string RmiName_CG_Request_Boss_ExtraStage_Clear="";
public const string RmiName_CG_Request_Boss_ExtraStage_Continue="";
public const string RmiName_CG_RequestRewardStageClear="";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_Start="";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_Clear="";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_Continue="";
public const string RmiName_CG_Request_FinalBoss_Stage_Start="";
public const string RmiName_CG_Request_FinalBoss_Stage_Clear="";
public const string RmiName_CG_Request_FinalBoss_Stage_Continue="";
public const string RmiName_CG_Request_FinalBoss_Season_Info="";
public const string RmiName_CG_Request_Training_Stage_Info="";
public const string RmiName_CG_Request_Training_Stage_Start="";
public const string RmiName_CG_Request_Training_Stage_Clear="";
public const string RmiName_CG_Request_Training_Stage_Continue="";
public const string RmiName_CG_Request_Training_Stage_Open="";
public const string RmiName_CG_Request_Training_Stage_Refresh="";
public const string RmiName_CG_Request_GuildBoss_Stage_Start="";
public const string RmiName_CG_Request_GuildBoss_Stage_Clear="";
public const string RmiName_CG_Request_GuildBoss_Lobby_Info="";
public const string RmiName_CG_Request_GuildBoss_Rank_Info="";
public const string RmiName_CG_Request_GuildBoss_LastWeek_Rank_Info="";
public const string RmiName_CG_Request_GuildBoss_Time_Refresh="";
public const string RmiName_CG_Request_AnotherMain_Stage_Start="";
public const string RmiName_CG_Request_AnotherMain_Stage_Clear="";
public const string RmiName_CG_Request_AnotherMain_Stage_Continue="";
public const string RmiName_CG_Request_FinalBoss_Season_Rank_Info="";
public const string RmiName_CG_Request_Reverse_Stage_Start="";
public const string RmiName_CG_Request_Reverse_Stage_Clear="";
public const string RmiName_CG_Request_Reverse_Star_Reward="";
public const string RmiName_CG_Request_Reverse_Group_Reward="";
public const string RmiName_CG_Request_Main_EventAreaStage_Start="";
public const string RmiName_CG_Request_Main_EventAreaStage_Clear="";
public const string RmiName_CG_Request_Main_EventAreaStage_Continue="";
public const string RmiName_CG_Request_Free_EventAreaStage_Start="";
public const string RmiName_CG_Request_Free_EventAreaStage_Clear="";
public const string RmiName_CG_Request_Free_EventAreaStage_Continue="";
public const string RmiName_CG_RequestEventAreaRewardStageClear="";
public const string RmiName_CG_Request_Free_EventStage_Start="";
public const string RmiName_CG_Request_Free_EventStage_Clear="";
public const string RmiName_CG_Request_Free_EventStage_Continue="";
public const string RmiName_CG_RequestEventExchange="";
public const string RmiName_CG_RequestEventPlayCountReward="";
public const string RmiName_CG_Request_Main_ListEventStage_Start="";
public const string RmiName_CG_Request_Main_ListEventStage_Clear="";
public const string RmiName_CG_Request_Main_ListEventStage_Continue="";
public const string RmiName_CG_Request_Free_ListEventStage_Start="";
public const string RmiName_CG_Request_Free_ListEventStage_Clear="";
public const string RmiName_CG_Request_Free_ListEventStage_Continue="";
public const string RmiName_CG_Request_Main_FinalBossStage_Start="";
public const string RmiName_CG_Request_Main_FinalBossStage_Clear="";
public const string RmiName_CG_Request_Main_FinalBossStage_Continue="";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_Start="";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_Clear="";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_Continue="";
public const string RmiName_CG_Request_Limited_EventStage_Start="";
public const string RmiName_CG_Request_Limited_EventStage_Clear="";
public const string RmiName_CG_Request_Limited_EventStage_Continue="";
public const string RmiName_CG_Request_Boss_EventStage_Start="";
public const string RmiName_CG_Request_Boss_EventStage_Clear="";
public const string RmiName_CG_Request_Boss_EventStage_Continue="";
public const string RmiName_CG_Request_Monthly_EventStage_Start="";
public const string RmiName_CG_Request_Monthly_EventStage_Clear="";
public const string RmiName_CG_Request_Monthly_EventStage_Continue="";
public const string RmiName_CG_RequestMonthlyStagePointReward="";
public const string RmiName_CG_RequestWeekStageGaugeReward="";
public const string RmiName_CG_RequestIngameBattleStart="";
public const string RmiName_CG_RequestStageEndLog="";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_Start="";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_Clear="";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_Continue="";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_Info="";
public const string RmiName_CG_Request_ChallengeBoss_Event_Point_Reward="";
public const string RmiName_CG_RequestMailList="";
public const string RmiName_CG_RequestMailConfirm="";
public const string RmiName_CG_RequestMailConfirmAll="";
public const string RmiName_CG_RequestMailHistoryList="";
public const string RmiName_CG_RequestMailRecentlyHistoryList="";
public const string RmiName_CG_RequestFriendMailList="";
public const string RmiName_CG_RequestFriendMailConfirm="";
public const string RmiName_CG_RequestFriendMailConfirmAll="";
public const string RmiName_CG_RequestNoticeMailReward="";
public const string RmiName_CG_RequestPackageMailList="";
public const string RmiName_CG_RequestPackageMailGet="";
public const string RmiName_CG_RequestPackageMailHistoryList="";
public const string RmiName_CG_RequestLevelUpPackageReward="";
public const string RmiName_CG_RequestLevelUpPackageRewardAll="";
public const string RmiName_CG_RequestAttendancePackageReward="";
public const string RmiName_CG_RequestAttendancePackageRewardAll="";
public const string RmiName_CG_RequestMailADReward="";
public const string RmiName_CG_RequestGambleShopBuy="";
public const string RmiName_CG_RequestStepupGambleShopBuy="";
public const string RmiName_CG_RequestStepupGambleMileageReward="";
public const string RmiName_CG_RequestItemGambleShopInfo="";
public const string RmiName_CG_RequestItemGambleShopBuy="";
public const string RmiName_CG_RequestRandomShopBuy="";
public const string RmiName_CG_RequestRandomShopRefresh="";
public const string RmiName_CG_RequestRandomShopInfo="";
public const string RmiName_CG_RequestBasePointShopInfo="";
public const string RmiName_CG_RequestBasePointShopBuy="";
public const string RmiName_CG_RequestBasePointShopReset="";
public const string RmiName_CG_RequestArenaRealTimePvpShopInfo="";
public const string RmiName_CG_RequestArenaRealTimePvpShopBuy="";
public const string RmiName_CG_RequestArenaRealTimePvpShopReset="";
public const string RmiName_CG_RequestCoinShopInfo="";
public const string RmiName_CG_RequestCoinShopBuy="";
public const string RmiName_CG_RequestCoinShopDailyBuy="";
public const string RmiName_CG_RequestCoinShopOnceBuy="";
public const string RmiName_CG_RequestCostumeShopInfo="";
public const string RmiName_CG_RequestCostumeShopBuy="";
public const string RmiName_CG_RequestCostumeShopPackageBuy="";
public const string RmiName_CG_RequestFriendPointShopInfo="";
public const string RmiName_CG_RequestFriendPointShopBuy="";
public const string RmiName_CG_RequestDiaShopInfo="";
public const string RmiName_CG_RequestDiaShopBuy="";
public const string RmiName_CG_RequestItemInventoryBuy="";
public const string RmiName_CG_RequestWeaponInventoryBuy="";
public const string RmiName_CG_RequestWeekStageKeyBuy="";
public const string RmiName_CG_RequestCommonItemSell="";
public const string RmiName_CG_RequestCommonItemRemove="";
public const string RmiName_CG_RequestPackageBuy="";
public const string RmiName_CG_RequestBuyDia="";
public const string RmiName_CG_RequestBuyGold="";
public const string RmiName_CG_RequestBuyStamina="";
public const string RmiName_CG_RequestGuildShopInfo="";
public const string RmiName_CG_RequestGuildShopBuy="";
public const string RmiName_CG_RequestGuildShopReset="";
public const string RmiName_CG_RequestFinalBossShopInfo="";
public const string RmiName_CG_RequestFinalBossShopBuy="";
public const string RmiName_CG_RequestEventCollaborationCoinShopInfo="";
public const string RmiName_CG_RequestEventCollaborationCoinShopBuy="";
public const string RmiName_CG_RequestBingoGambleShopInfo="";
public const string RmiName_CG_RequestBingoGambleShopReset="";
public const string RmiName_CG_RequestBingoGambleShopReward="";
public const string RmiName_CG_RequestDiaShopPackageBuy="";
public const string RmiName_CG_RequestRandomShopVisitReward="";
public const string RmiName_CG_RequestGambleChoiceShopBuy="";
public const string RmiName_CG_RequestRandomShopScheduleInfo="";
public const string RmiName_CG_RequestPackageShopInfo="";
public const string RmiName_CG_RequestFreePackageReward="";
public const string RmiName_CG_RequestPackageMissionClose="";
public const string RmiName_CG_RequestGambleShopInfo="";
public const string RmiName_CG_RequestADRouletteReward="";
public const string RmiName_CG_RequestQuestStart="";
public const string RmiName_CG_RequestQuestProgress="";
public const string RmiName_CG_RequestQuestClear="";
public const string RmiName_CG_RequestQuestRemove="";
public const string RmiName_CG_RequestNetmarbleQuestAchieve="";
public const string RmiName_CG_RequestNetmarbleQuestReward="";
public const string RmiName_CG_RequestDirectSelectorReward="";
public const string RmiName_CG_RequestMissionProgress="";
public const string RmiName_CG_RequestMissionClear="";
public const string RmiName_CG_RequestMissionEventClear="";
public const string RmiName_CG_RequestMissionGetAchievePointReward="";
public const string RmiName_CG_RequestQuestChapterClear="";
public const string RmiName_CG_RequestEventMissionGetAchievePointReward="";
public const string RmiName_CG_RequestEventMissionCompleteReward="";
public const string RmiName_CG_RequestEventMissionInfo="";
public const string RmiName_CG_RequestEventQuestClear="";
public const string RmiName_CG_RequestAnotherQuestClear="";
public const string RmiName_CG_RequestQuestGuideListAllClearReward="";
public const string RmiName_CG_RequestLobbyVRSearch="";
public const string RmiName_CG_RequestLobbyVRHelbram="";
public const string RmiName_CG_RequestLobbyNpcSkin="";
public const string RmiName_CG_RequestLobbyNpcGift="";
public const string RmiName_CG_RequestLobbyKingAmber="";
public const string RmiName_CG_RequestLobbyDropInteractiveOpen="";
public const string RmiName_CG_RequestLobbyUniqueInteractiveOpen="";
public const string RmiName_CG_RequestLobbyNpcTalkInfo="";
public const string RmiName_CG_RequestLobbyNpcTalkChoice="";
public const string RmiName_CG_RequestLobbyBarrel="";
public const string RmiName_CG_RequestLobbyBarrelRefill="";
public const string RmiName_CG_RequestLobbyCleanTable="";
public const string RmiName_CG_RequestLobbyServeBeer="";
public const string RmiName_CG_RequestLobbyPlayJukebox="";
public const string RmiName_CG_RequestLobbyElizabethTouch="";
public const string RmiName_CG_RequestLobbyHawkAnger="";
public const string RmiName_CG_RequestAttendanceReward="";
public const string RmiName_CG_RequestAttendanceEventReward="";
public const string RmiName_CG_RequestCookingStart="";
public const string RmiName_CG_RequestRecipeActive="";
public const string RmiName_CG_RequestCookingRecipeOrderInfo="";
public const string RmiName_CG_RequestCookingRecipeOrder="";
public const string RmiName_CG_RequestCookingRecipeDisorder="";
public const string RmiName_CG_RequestCookingRecipeCollect="";
public const string RmiName_CG_RequestCookingRecipeCollectOneSlot="";
public const string RmiName_CG_RequestCookingUseCookingBuff="";
public const string RmiName_CG_RequestGuestInfo="";
public const string RmiName_CG_RequestGuestChange="";
public const string RmiName_CG_RequestGuestChangeTarget="";
public const string RmiName_CG_RequestGuestTalk="";
public const string RmiName_CG_RequestGuestGift="";
public const string RmiName_CG_RequestBirthdayNpcInfo="";
public const string RmiName_CG_RequestRestReward="";
public const string RmiName_CG_RequestLobbyHousingShopInfo="";
public const string RmiName_CG_RequestLobbyHousingShopBuy="";
public const string RmiName_CG_RequestLobbyFurnitureRegist="";
public const string RmiName_CG_RequestUserMusicEdit="";
public const string RmiName_CG_RequestAttendanceFortuneEventReward="";
public const string RmiName_CG_RequestBasePointGoldDonation="";
public const string RmiName_CG_RequestBasePointSetTrigger="";
public const string RmiName_CG_RequestBasePointDropInteractiveOpen="";
public const string RmiName_CG_RequestBasePointUniqueInteractiveOpen="";
public const string RmiName_CG_RequestBasePointDailyReward="";
public const string RmiName_CG_RequestBasePointDonationEventReward="";
public const string RmiName_CG_RequestBasePointDonationInfo="";
public const string RmiName_CG_RequestBasePointEventGoldDonation="";
public const string RmiName_CG_RequestEventBasepointInfo="";
public const string RmiName_CG_RequestDestroySetInviteOption="";
public const string RmiName_CG_RequestDestroyGetUserLoginList="";
public const string RmiName_CG_RequestDestroyGetFriendLoginList="";
public const string RmiName_CG_RequestDestroyGetGuildLoginList="";
public const string RmiName_CG_RequestDestroyGetReceivedInvitationList="";
public const string RmiName_CG_RequestDestroyInvite="";
public const string RmiName_CG_RequestDestroyRemoveInvitation="";
public const string RmiName_CG_RequestDestroyRemoveJoinInfo="";
public const string RmiName_CG_RequestDestroyCreate="";
public const string RmiName_CG_RequestDestroyJoin="";
public const string RmiName_CG_RequestDestroyStart="";
public const string RmiName_CG_RequestDestroyBattleStart="";
public const string RmiName_CG_RequestDestroyClear="";
public const string RmiName_CG_RequestDestroyReJoin="";
public const string RmiName_CG_RequestDestroyRemove="";
public const string RmiName_CG_RequestDestroyBattleEnd="";
public const string RmiName_CG_RequestDestroyInviteAI="";
public const string RmiName_CG_RequestDestroyKickOutAI="";
public const string RmiName_CG_RequestEventDestroyCreate="";
public const string RmiName_CG_RequestEventDestroyStart="";
public const string RmiName_CG_RequestEventDestroyClear="";
public const string RmiName_CG_RequestEventDestroyRemove="";
public const string RmiName_CG_RequestEventChallengeDestroyCreate="";
public const string RmiName_CG_RequestEventChallengeDestroyStart="";
public const string RmiName_CG_RequestEventChallengeDestroyClear="";
public const string RmiName_CG_RequestEventChallengeDestroyPointRefresh="";
public const string RmiName_CG_RequestEventChallengeDestroyUserReward="";
public const string RmiName_CG_RequestEventChallengeDestroyWorldReward="";
public const string RmiName_CG_RequestFriendList="";
public const string RmiName_CG_RequestFriendGuildInfo="";
public const string RmiName_CG_RequestFriendApplySendList="";
public const string RmiName_CG_RequestFriendApplyReceiveList="";
public const string RmiName_CG_RequestFriendApplySend="";
public const string RmiName_CG_RequestFriendApplyReject="";
public const string RmiName_CG_RequestFriendApplyReceiveAccept="";
public const string RmiName_CG_RequestFriendApplyReceiveAcceptList="";
public const string RmiName_CG_RequestFriendApplyReceiveRefuse="";
public const string RmiName_CG_RequestFriendApplyReceiveRefuseList="";
public const string RmiName_CG_RequestFriendRemove="";
public const string RmiName_CG_RequestFriendSearch="";
public const string RmiName_CG_RequestFriendVisit="";
public const string RmiName_CG_RequestFriendPointSend="";
public const string RmiName_CG_RequestFriendPointSendAll="";
public const string RmiName_CG_RequestFriendLobbyInfo="";
public const string RmiName_CG_RequestFriendCookingRecipeInfo="";
public const string RmiName_CG_RequestFriendCookingEat="";
public const string RmiName_CG_RequestFriendCookingEatFriendList="";
public const string RmiName_CG_RequestGuildRecommendList="";
public const string RmiName_CG_RequestGuildInfoWithMemberList="";
public const string RmiName_CG_RequestGuildSearchByName="";
public const string RmiName_CG_RequestGuildCreate="";
public const string RmiName_CG_RequestGuildDisband="";
public const string RmiName_CG_RequestGuildApplicantList="";
public const string RmiName_CG_RequestGuildApply="";
public const string RmiName_CG_RequestGuildReturnApplication="";
public const string RmiName_CG_RequestGuildAcceptApplicant="";
public const string RmiName_CG_RequestGuildRejectApplicant="";
public const string RmiName_CG_RequestGuildLevelUp="";
public const string RmiName_CG_RequestGuildChangeName="";
public const string RmiName_CG_RequestGuildChangeBoard="";
public const string RmiName_CG_RequestGuildChangeMaster="";
public const string RmiName_CG_RequestGuildChangeMemberGrade="";
public const string RmiName_CG_RequestGuildKickOutMember="";
public const string RmiName_CG_RequestGuildLeave="";
public const string RmiName_CG_RequestGuildRoomInfo="";
public const string RmiName_CG_RequestGuildAttendance="";
public const string RmiName_CG_RequestGuildAttendanceReward="";
public const string RmiName_CG_RequestGuildUserInfo="";
public const string RmiName_CG_RequestGuildAttendanceStatus="";
public const string RmiName_CG_RequestGuildDonation="";
public const string RmiName_CG_RequestGuildDonationInitialize="";
public const string RmiName_CG_RequestGuildMissionInfo="";
public const string RmiName_CG_RequestGuildMissionReward="";
public const string RmiName_CG_RequestGuildDonationInfo="";
public const string RmiName_CG_RequestGuildSkillInfo="";
public const string RmiName_CG_RequestGuildSkillLevelUp="";
public const string RmiName_CG_RequestGuildSkillUse="";
public const string RmiName_CG_RequestGuildSkillDisuse="";
public const string RmiName_CG_RequestGuildSkillUseInfo="";
public const string RmiName_CG_RequestGuildMemberRankPointReward="";
public const string RmiName_CG_RequestGuildBattlePointRegister="";
public const string RmiName_CG_RequestGuildBattlePointMemeberRankList="";
public const string RmiName_CG_RequestGuildBattlePointGuildRankList="";
public const string RmiName_CG_RequestGuildBattlePointUserRankList="";
public const string RmiName_CG_RequestAPRechargeByUseItem="";
public const string RmiName_CG_RequestWeekStageKeyOpen="";
public const string RmiName_CG_RequestFoodBuffAutoUseOnOff="";
public const string RmiName_CG_RequestItemUseRankExp="";
public const string RmiName_CG_RequestItemUseBoxOpen="";
public const string RmiName_CG_RequestItemUseRecipeExp="";
public const string RmiName_CG_RequestItemUseWeeklyKeyBox="";
public const string RmiName_CG_RequestItemUseWeaponTicket="";
public const string RmiName_CG_RequestItemUseMusic="";
public const string RmiName_CG_RequestTutorialAddStep="";
public const string RmiName_CG_RequestTutorialSetFlag="";
public const string RmiName_CG_RequestTutorialHeroFlag="";
public const string RmiName_CG_RequestTutorialGambleShopBuy="";
public const string RmiName_CG_RequestBattleTutorialInfo="";
public const string RmiName_CG_RequestBattleTutorialSet="";
public const string RmiName_CG_RequestFriendlyMatchCreate="";
public const string RmiName_CG_RequestFriendlyMatchFriendList="";
public const string RmiName_CG_RequestFriendlyMatchInvite="";
public const string RmiName_CG_RequestFriendlyMatchReceivedInviteList="";
public const string RmiName_CG_RequestFriendlyMatchInviteAccept="";
public const string RmiName_CG_RequestFriendlyMatchInviteReject="";
public const string RmiName_CG_RequestFriendlyMatchStart="";
public const string RmiName_CG_RequestFriendlyMatchBattleStart="";
public const string RmiName_CG_RequestFriendlyMatchClear="";
public const string RmiName_CG_RequestFriendlyMatchExit="";
public const string RmiName_CG_RequestFriendlyMatchSetInviteOption="";
public const string RmiName_CG_RequestEventSeasonPassInfo="";
public const string RmiName_CG_RequestEventSeasonPassRankUpReward="";
public const string RmiName_CG_RequestEventSeasonPassRankUpRewardAll="";
public const string RmiName_CG_RequestEventSeasonPassRankBuy="";
public const string RmiName_CG_RequestWestSideServerInfo_Random="";
public const string RmiName_CG_RequestWestSideServerInfo_Fixed="";
public const string RmiName_CG_RequestWestSideServerInfo_Recommand="";
public const string RmiName_CG_RequestWestSide_PlayerInfo="";
public const string RmiName_CG_RequestWestSide_PlayerteamInfo="";
public const string RmiName_CG_RequestWestSide_PlayerGuildInfo="";
public const string RmiName_CG_RequestWorldChattingChannel="";
public const string RmiName_CG_RequestArenaRealTimePvpLobbyInfo="";
public const string RmiName_CG_RequestArenaRealTimePvpJoin="";
public const string RmiName_CG_RequestArenaRealTimePvpTopRankerList="";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerList="";
public const string RmiName_CG_RequestArenaRealTimePvpMatching="";
public const string RmiName_CG_RequestArenaRealTimePvpBattleStart="";
public const string RmiName_CG_RequestArenaRealTimePvpBattleEnd="";
public const string RmiName_CG_RequestArenaRealTimePvpRollback="";
public const string RmiName_CG_RequestArenaRealTimePvpIngameBattleStart="";
public const string RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfo="";
public const string RmiName_CG_RequestArenaRealTimePvpLowerJoin="";
public const string RmiName_CG_RequestArenaRealTimePvpLowerTopRankerList="";
public const string RmiName_CG_RequestArenaRealTimePvpLowerMatching="";
public const string RmiName_CG_RequestArenaRealTimePvpLowerBattleStart="";
public const string RmiName_CG_RequestArenaRealTimePvpLowerBattleEnd="";
public const string RmiName_CG_RequestArenaRealTimePvpAllInfo="";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfo="";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStart="";
public const string RmiName_CG_RequestArenaRealTimePvpLowerRollback="";
public const string RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStart="";
public const string RmiName_CG_RequestArenaRealTimeDecisionLobbyInfo="";
public const string RmiName_CG_RequestArenaRealTimeDecisionJoin="";
public const string RmiName_CG_RequestArenaRealTimeDecisionTopRankerList="";
public const string RmiName_CG_RequestArenaRealTimeDecisionMatching="";
public const string RmiName_CG_RequestArenaRealTimeDecisionBattleEnd="";
public const string RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStart="";
public const string RmiName_CG_RequestArenaRealTimeDecisionHistory="";
public const string RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingList="";
public const string RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfo="";
public const string RmiName_CG_RequestPvpSeasonInfo="";
public const string RmiName_CG_RequestPvpSeasonHistory="";
public const string RmiName_CG_RequestBossWarCreate="";
public const string RmiName_CG_RequestBossWarJoin="";
public const string RmiName_CG_RequestBossWarStart="";
public const string RmiName_CG_RequestBossWarOnlineFriendList="";
public const string RmiName_CG_RequestBossWarOnlineGuildMemberList="";
public const string RmiName_CG_RequestBossWarOnlineUserRankRangeList="";
public const string RmiName_CG_RequestBossWarInvitationReceiveList="";
public const string RmiName_CG_RequestBossWarRemoveInvitation="";
public const string RmiName_CG_RequestBossWarInvite="";
public const string RmiName_CG_RequestBossWarKickOut="";
public const string RmiName_CG_RequestBossWarReady="";
public const string RmiName_CG_RequestBossWarReturnReady="";
public const string RmiName_CG_RequestBossWarLeave="";
public const string RmiName_CG_RequestBossWarBattleStart="";
public const string RmiName_CG_RequestBossWarBattleSync="";
public const string RmiName_CG_RequestBossWarBattleEnd="";
public const string RmiName_CG_RequestBossWarReward="";
public const string RmiName_CG_RequestEventExchangeInfo="";
public const string RmiName_CG_RequestEventExchangeBoxGachaInfo="";
public const string RmiName_CG_RequestEventExchangeBoxGachaPickup="";
public const string RmiName_CG_RequestEventExchangeBoxGachaReset="";
public const string RmiName_CG_RequestEventPaybackReward="";
public const string RmiName_CG_RequestEventSnsShareProgress="";
public const string RmiName_CG_RequestEventSnsShareReward="";
public const string RmiName_CG_RequestGagueEventInfo="";
public const string RmiName_CG_RequestGagueEventCharge="";
public const string RmiName_CG_RequestGagueEventReward="";
public const string RmiName_CG_RequestGagueEventReset="";
public const string RmiName_CG_RequestEventLadderReward="";
public const string RmiName_CG_RequestEventLobbyGiftReward="";
public const string RmiName_CG_RequestEventTimeMissionInfo="";
public const string RmiName_CG_RequestEventTimeMissionStart="";
public const string RmiName_CG_RequestEventLobbyDecorationReward="";
public const string RmiName_CG_RequestRegistPlayTitle="";
public const string RmiName_CG_RequestPlayTitleMissionReward="";
public const string RmiName_CG_RequestTournamentList="";
public const string RmiName_CG_RequestTournamentProgressInfo="";
public const string RmiName_CG_RequestTournamentResultInfo="";
public const string RmiName_CG_RequestTournamentMatchJoin="";
public const string RmiName_CG_RequestTournamentMatchBattleStart="";
public const string RmiName_CG_RequestTournamentMatchBattleEnd="";
public const string RmiName_CG_RequestTournamentMatchExit="";
public const string RmiName_CG_RequestTournamentReward="";
public const string RmiName_CG_RequestTournamentPlayerTeamSlotChange="";
public const string RmiName_CG_RequestTournamentPlayerTeamInfo="";
public const string RmiName_CG_RequestTournamentCheer="";
public const string RmiName_CG_RequestTournamentCheerList="";
public const string RmiName_CG_RequestTournamentWatcherJoin="";
public const string RmiName_CG_RequestTournamentWatcherExit="";
public const string RmiName_CG_RequestTournamentMatchPlayInfo="";
public const string RmiName_CG_RequestTournamentReplayInfo="";
public const string RmiName_CG_RequestGuildWarLobbyInfo="";
public const string RmiName_CG_RequestGuildWarRankInfo="";
public const string RmiName_CG_RequestGuildWarVersusRecordInfo="";
public const string RmiName_CG_RequestGuildWarGuildMemberList="";
public const string RmiName_CG_RequestGuildWarWorldMapInfo="";
public const string RmiName_CG_RequestGuildWarAttackSquadChange="";
public const string RmiName_CG_RequestGuildWarDefenceTeamChange="";
public const string RmiName_CG_RequestGuildWarRegionBonusScoreChange="";
public const string RmiName_CG_RequestGuildWarAreaGuildMemberChange="";
public const string RmiName_CG_RequestGuildWarBattleRecordInfo="";
public const string RmiName_CG_Request_GuildWar_Stage_Start="";
public const string RmiName_CG_Request_GuildWar_Stage_Clear="";
public const string RmiName_CG_Request_GuildWar_Stage_Rejoin="";
public const string RmiName_CG_Request_GuildWar_Stage_HeroStatus_Sync="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

