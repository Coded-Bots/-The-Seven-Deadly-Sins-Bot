




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Collections.Generic;
using System.Net;

namespace SevenDSGameS2C
{
    internal class Stub : Nettention.Proud.RmiStub
    {
        public AfterRmiInvocationDelegate AfterRmiInvocation = delegate (Nettention.Proud.AfterRmiSummary summary) { };
        public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate (Nettention.Proud.BeforeRmiSummary summary) { };

        public delegate bool CG_CommonCancelDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string rmiName, SimpleCSharp.PacketError error, SimpleCSharp.InvalidRequestType invalidRequestType);
        public CG_CommonCancelDelegate CG_CommonCancel = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string rmiName, SimpleCSharp.PacketError error, SimpleCSharp.InvalidRequestType invalidRequestType)
        {
            return false;
        };
        public delegate bool GC_NotifyUserLevelUpDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyUserLevelUpDelegate GC_NotifyUserLevelUp = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_FrozenAssetCancelDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_FrozenAssetCancelDelegate CG_FrozenAssetCancel = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestChannelUserInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.ChannelUserInfo channelUserInfo);
        public CG_RequestChannelUserInfoOKDelegate CG_RequestChannelUserInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.ChannelUserInfo channelUserInfo)
        {
            return false;
        };
        public delegate bool CG_RequestHeartBeatOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestHeartBeatOKDelegate CG_RequestHeartBeatOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestChangeNicknameOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string userNickname, int nicknameChangeCount, int changeAvailableDateRemainSec);
        public CG_RequestChangeNicknameOKDelegate CG_RequestChangeNicknameOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string userNickname, int nicknameChangeCount, int changeAvailableDateRemainSec)
        {
            return false;
        };
        public delegate bool CG_RequestChangeWantToSayOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestChangeWantToSayOKDelegate CG_RequestChangeWantToSayOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestStageInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestStageInfoOKDelegate CG_RequestStageInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTeamInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTeamInfoOKDelegate CG_RequestTeamInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTeamSlotChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTeamSlotChangeOKDelegate CG_RequestTeamSlotChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTeamNameChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTeamNameChangeOKDelegate CG_RequestTeamNameChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.LobbyInfo lobbyInfo, SimpleCSharp.MissionResult missionResult, List<SimpleCSharp.ItemResultInfo> deleteItemResultInfoList, int remainResetTimeSEC);
        public CG_RequestLobbyInfoOKDelegate CG_RequestLobbyInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.LobbyInfo lobbyInfo, SimpleCSharp.MissionResult missionResult, List<SimpleCSharp.ItemResultInfo> deleteItemResultInfoList, int remainResetTimeSEC)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.BasePointInfo basePointInfo, SimpleCSharp.BasePointRefreshInfo basePointRefreshInfo, List<SimpleCSharp.QuestProgressInfo> questProgressInfoList, List<SimpleCSharp.ArenaRealTimePvpLastRankerStatueInfo> pvpRankerStatueInfoList, SimpleCSharp.PvpSeasonHistoryInfo pvpSeasonStatusInfo);
        public CG_RequestBasePointInfoOKDelegate CG_RequestBasePointInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.BasePointInfo basePointInfo, SimpleCSharp.BasePointRefreshInfo basePointRefreshInfo, List<SimpleCSharp.QuestProgressInfo> questProgressInfoList, List<SimpleCSharp.ArenaRealTimePvpLastRankerStatueInfo> pvpRankerStatueInfoList, SimpleCSharp.PvpSeasonHistoryInfo pvpSeasonStatusInfo)
        {
            return false;
        };
        public delegate bool CG_RequestMercenaryListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.MercenaryInfo> mercenaryInfoList);
        public CG_RequestMercenaryListOKDelegate CG_RequestMercenaryListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.MercenaryInfo> mercenaryInfoList)
        {
            return false;
        };
        public delegate bool CG_RequestMercenaryInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestMercenaryInfoOKDelegate CG_RequestMercenaryInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildInfoOKDelegate CG_RequestGuildInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestChatStampUpdateBookmarkOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestChatStampUpdateBookmarkOKDelegate CG_RequestChatStampUpdateBookmarkOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestChatStampUpdateQuickMessageOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestChatStampUpdateQuickMessageOKDelegate CG_RequestChatStampUpdateQuickMessageOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestMainSkinChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestMainSkinChangeOKDelegate CG_RequestMainSkinChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventListOKDelegate CG_RequestEventListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCheatEnterOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCheatEnterOKDelegate CG_RequestCheatEnterOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCheatStageClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCheatStageClearOKDelegate CG_RequestCheatStageClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDllGetItemOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDllGetItemOKDelegate CG_RequestDllGetItemOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRecommendFriendUSNListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRecommendFriendUSNListOKDelegate CG_RequestRecommendFriendUSNListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDailyResetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDailyResetOKDelegate CG_RequestDailyResetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_NotifyMaintenanceDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_NotifyMaintenanceDelegate CG_NotifyMaintenance = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFrozenAssetRedeemOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFrozenAssetRedeemOKDelegate CG_RequestFrozenAssetRedeemOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSecurityTokenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string securityToken);
        public CG_RequestSecurityTokenOKDelegate CG_RequestSecurityTokenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, string securityToken)
        {
            return false;
        };
        public delegate bool CG_RequestNetmarbleAuthOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.NetmarbleAccountInfo accountInfo);
        public CG_RequestNetmarbleAuthOKDelegate CG_RequestNetmarbleAuthOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.NetmarbleAccountInfo accountInfo)
        {
            return false;
        };
        public delegate bool CG_RequestAuthenticateCreateOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.NetmarbleAccountInfo info);
        public CG_RequestAuthenticateCreateOKDelegate CG_RequestAuthenticateCreateOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.NetmarbleAccountInfo info)
        {
            return false;
        };
        public delegate bool CG_RequestEditorUserInfoByNickNameOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEditorUserInfoByNickNameOKDelegate CG_RequestEditorUserInfoByNickNameOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLoginOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.LoginUserResultInfo userInfo, DateTime serverTime, string serviceName, SimpleCSharp.MaintenanceInfo maintenanceInfo, int remainResetTimeSEC);
        public CG_RequestLoginOKDelegate CG_RequestLoginOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.LoginUserResultInfo userInfo, DateTime serverTime, string serviceName, SimpleCSharp.MaintenanceInfo maintenanceInfo, int remainResetTimeSEC)
        {
            return false;
        };
        public delegate bool CG_RequestLoginInstantlyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLoginInstantlyOKDelegate CG_RequestLoginInstantlyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestForceLogoutOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestForceLogoutOKDelegate CG_RequestForceLogoutOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RetryRequestOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RetryRequestOKDelegate CG_RetryRequestOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBillingInitializeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBillingInitializeOKDelegate CG_RequestBillingInitializeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBillingVerifyPUOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBillingVerifyPUOKDelegate CG_RequestBillingVerifyPUOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBillingRemainTROKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBillingRemainTROKDelegate CG_RequestBillingRemainTROK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBillingCouponVerifyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.BillingVerifyResultInfo verifyResultInfo, string netmarble_reward_id);
        public CG_RequestBillingCouponVerifyOKDelegate CG_RequestBillingCouponVerifyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.BillingVerifyResultInfo verifyResultInfo, string netmarble_reward_id)
        {
            return false;
        };
        public delegate bool CG_RequestBillingCrossPromotionOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBillingCrossPromotionOKDelegate CG_RequestBillingCrossPromotionOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBillingPackageShopOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBillingPackageShopOKDelegate CG_RequestBillingPackageShopOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestAgeInputOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestAgeInputOKDelegate CG_RequestAgeInputOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Notify_WolverineOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Notify_WolverineOKDelegate CG_Notify_WolverineOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSDKInfoChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSDKInfoChangeOKDelegate CG_RequestSDKInfoChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinLevelUpBySkinMaterialOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinLevelUpBySkinMaterialOKDelegate CG_RequestSkinLevelUpBySkinMaterialOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinResearchOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinResearchOKDelegate CG_RequestSkinResearchOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinResearchInitOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinResearchInitOKDelegate CG_RequestSkinResearchInitOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinMaterialGrindOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinMaterialGrindOKDelegate CG_RequestSkinMaterialGrindOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinAwakenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinAwakenOKDelegate CG_RequestSkinAwakenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinHeadStyleChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinHeadStyleChangeOKDelegate CG_RequestSkinHeadStyleChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinEvolutionOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinEvolutionOKDelegate CG_RequestSkinEvolutionOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinSkillLevelUpOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinSkillLevelUpOKDelegate CG_RequestSkinSkillLevelUpOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinGiveFellowshipExpOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinGiveFellowshipExpOKDelegate CG_RequestSkinGiveFellowshipExpOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinFellowshipLevelUpRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinFellowshipLevelUpRewardOKDelegate CG_RequestSkinFellowshipLevelUpRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeEquipOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCostumeEquipOKDelegate CG_RequestCostumeEquipOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeUnEquipOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCostumeUnEquipOKDelegate CG_RequestCostumeUnEquipOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeUnLockOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.ItemResultInfo> getItemResultInfoList, List<SimpleCSharp.UserSkin> updateSkinList, List<SimpleCSharp.UserSkin> equipSkinList, SimpleCSharp.MissionResult missionResult);
        public CG_RequestCostumeUnLockOKDelegate CG_RequestCostumeUnLockOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.ItemResultInfo> getItemResultInfoList, List<SimpleCSharp.UserSkin> updateSkinList, List<SimpleCSharp.UserSkin> equipSkinList, SimpleCSharp.MissionResult missionResult)
        {
            return false;
        };
        public delegate bool CG_RequestSkinOverEvolutionOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinOverEvolutionOKDelegate CG_RequestSkinOverEvolutionOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinMaxAwakenRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinMaxAwakenRewardOKDelegate CG_RequestSkinMaxAwakenRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeRegisterOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCostumeRegisterOKDelegate CG_RequestCostumeRegisterOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinLoveRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinLoveRewardOKDelegate CG_RequestSkinLoveRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeAutoRegisterOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.UserSkin> targetSkinList);
        public CG_RequestCostumeAutoRegisterOKDelegate CG_RequestCostumeAutoRegisterOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.UserSkin> targetSkinList)
        {
            return false;
        };
        public delegate bool CG_RequestStoryCostumeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.ItemResultInfo> getItemResultInfoList, List<SimpleCSharp.UserCommonItem> userStoryCostumeItemList);
        public CG_RequestStoryCostumeOKDelegate CG_RequestStoryCostumeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.ItemResultInfo> getItemResultInfoList, List<SimpleCSharp.UserCommonItem> userStoryCostumeItemList)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeLevelUpOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCostumeLevelUpOKDelegate CG_RequestCostumeLevelUpOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestSkinMaxAwakenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestSkinMaxAwakenOKDelegate CG_RequestSkinMaxAwakenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponEquipOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponEquipOKDelegate CG_RequestWeaponEquipOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponUnEquipOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponUnEquipOKDelegate CG_RequestWeaponUnEquipOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponSellOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponSellOKDelegate CG_RequestWeaponSellOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponGrindOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponGrindOKDelegate CG_RequestWeaponGrindOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponUpgradeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponUpgradeOKDelegate CG_RequestWeaponUpgradeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponUpgradeRetryOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponUpgradeRetryOKDelegate CG_RequestWeaponUpgradeRetryOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponEvolutionOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponEvolutionOKDelegate CG_RequestWeaponEvolutionOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponEvolutionRetryOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponEvolutionRetryOKDelegate CG_RequestWeaponEvolutionRetryOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponOptionEnhanceOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponOptionEnhanceOKDelegate CG_RequestWeaponOptionEnhanceOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponLockOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponLockOKDelegate CG_RequestWeaponLockOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponUnLockOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponUnLockOKDelegate CG_RequestWeaponUnLockOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponEquipExchangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponEquipExchangeOKDelegate CG_RequestWeaponEquipExchangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponEquipExchangeAllOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponEquipExchangeAllOKDelegate CG_RequestWeaponEquipExchangeAllOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponEquipRecommandOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponEquipRecommandOKDelegate CG_RequestWeaponEquipRecommandOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponCarveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponCarveOKDelegate CG_RequestWeaponCarveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponCarveRemoveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponCarveRemoveOKDelegate CG_RequestWeaponCarveRemoveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestStageRejoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestStageRejoinOKDelegate CG_RequestStageRejoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.StageStartResultInfo adventureStageResultInfo, SimpleCSharp.PaybackEventResultInfo paybackEventResultInfo);
        public CG_Request_Main_Stage_StartOKDelegate CG_Request_Main_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.StageStartResultInfo adventureStageResultInfo, SimpleCSharp.PaybackEventResultInfo paybackEventResultInfo)
        {
            return false;
        };
        public delegate bool CG_Request_Main_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.StageClearResultInfo adventureClearResultInfo, bool isFirstMainStageClear, List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList);
        public CG_Request_Main_Stage_ClearOKDelegate CG_Request_Main_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.StageClearResultInfo adventureClearResultInfo, bool isFirstMainStageClear, List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList)
        {
            return false;
        };
        public delegate bool CG_Request_Main_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_Stage_ContinueOKDelegate CG_Request_Main_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_Stage_StartOKDelegate CG_Request_Free_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_Stage_ClearOKDelegate CG_Request_Free_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_Stage_ContinueOKDelegate CG_Request_Free_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestHawkRunStageStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestHawkRunStageStartOKDelegate CG_RequestHawkRunStageStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestHawkRunStageClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestHawkRunStageClearOKDelegate CG_RequestHawkRunStageClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventStageClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventStageClearOKDelegate CG_RequestEventStageClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Quest_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Quest_Stage_StartOKDelegate CG_Request_Quest_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Quest_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Quest_Stage_ClearOKDelegate CG_Request_Quest_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Quest_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Quest_Stage_ContinueOKDelegate CG_Request_Quest_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Week_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Week_Stage_StartOKDelegate CG_Request_Week_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Week_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Week_Stage_ClearOKDelegate CG_Request_Week_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Week_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Week_Stage_ContinueOKDelegate CG_Request_Week_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_Stage_StartOKDelegate CG_Request_Boss_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_Stage_ClearOKDelegate CG_Request_Boss_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_Stage_ContinueOKDelegate CG_Request_Boss_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Memorial_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Memorial_Stage_StartOKDelegate CG_Request_Memorial_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Memorial_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Memorial_Stage_ClearOKDelegate CG_Request_Memorial_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Memorial_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Memorial_Stage_ContinueOKDelegate CG_Request_Memorial_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Limited_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Limited_Stage_StartOKDelegate CG_Request_Limited_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Limited_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Limited_Stage_ClearOKDelegate CG_Request_Limited_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Limited_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Limited_Stage_ContinueOKDelegate CG_Request_Limited_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_ExtraStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_ExtraStage_StartOKDelegate CG_Request_Main_ExtraStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_ExtraStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_ExtraStage_ClearOKDelegate CG_Request_Main_ExtraStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_ExtraStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_ExtraStage_ContinueOKDelegate CG_Request_Main_ExtraStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_ExtraStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_ExtraStage_StartOKDelegate CG_Request_Boss_ExtraStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_ExtraStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_ExtraStage_ClearOKDelegate CG_Request_Boss_ExtraStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_ExtraStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_ExtraStage_ContinueOKDelegate CG_Request_Boss_ExtraStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRewardStageClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRewardStageClearOKDelegate CG_RequestRewardStageClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_AnotherMain_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_AnotherMain_Stage_StartOKDelegate CG_Request_AnotherMain_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_AnotherMain_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_AnotherMain_Stage_ClearOKDelegate CG_Request_AnotherMain_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_AnotherMain_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_AnotherMain_Stage_ContinueOKDelegate CG_Request_AnotherMain_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Reverse_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Reverse_Stage_StartOKDelegate CG_Request_Reverse_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Reverse_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Reverse_Stage_ClearOKDelegate CG_Request_Reverse_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Reverse_Star_RewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Reverse_Star_RewardOKDelegate CG_Request_Reverse_Star_RewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Reverse_Group_RewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Reverse_Group_RewardOKDelegate CG_Request_Reverse_Group_RewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_EventAreaStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_EventAreaStage_StartOKDelegate CG_Request_Main_EventAreaStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_EventAreaStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_EventAreaStage_ClearOKDelegate CG_Request_Main_EventAreaStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_EventAreaStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_EventAreaStage_ContinueOKDelegate CG_Request_Main_EventAreaStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_EventAreaStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_EventAreaStage_StartOKDelegate CG_Request_Free_EventAreaStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_EventAreaStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_EventAreaStage_ClearOKDelegate CG_Request_Free_EventAreaStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_EventAreaStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_EventAreaStage_ContinueOKDelegate CG_Request_Free_EventAreaStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventAreaRewardStageClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventAreaRewardStageClearOKDelegate CG_RequestEventAreaRewardStageClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_EventStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_EventStage_StartOKDelegate CG_Request_Free_EventStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_EventStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_EventStage_ClearOKDelegate CG_Request_Free_EventStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_EventStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_EventStage_ContinueOKDelegate CG_Request_Free_EventStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventExchangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventExchangeOKDelegate CG_RequestEventExchangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventPlayCountRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventPlayCountRewardOKDelegate CG_RequestEventPlayCountRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_ListEventStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_ListEventStage_StartOKDelegate CG_Request_Main_ListEventStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_ListEventStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_ListEventStage_ClearOKDelegate CG_Request_Main_ListEventStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_ListEventStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_ListEventStage_ContinueOKDelegate CG_Request_Main_ListEventStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_ListEventStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_ListEventStage_StartOKDelegate CG_Request_Free_ListEventStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_ListEventStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_ListEventStage_ClearOKDelegate CG_Request_Free_ListEventStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Free_ListEventStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Free_ListEventStage_ContinueOKDelegate CG_Request_Free_ListEventStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_FinalBossStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_FinalBossStage_StartOKDelegate CG_Request_Main_FinalBossStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_FinalBossStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_FinalBossStage_ClearOKDelegate CG_Request_Main_FinalBossStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Main_FinalBossStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Main_FinalBossStage_ContinueOKDelegate CG_Request_Main_FinalBossStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_FinalBoss_EventFreeStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_FinalBoss_EventFreeStage_StartOKDelegate CG_Request_FinalBoss_EventFreeStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_FinalBoss_EventFreeStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_FinalBoss_EventFreeStage_ClearOKDelegate CG_Request_FinalBoss_EventFreeStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_FinalBoss_EventFreeStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_FinalBoss_EventFreeStage_ContinueOKDelegate CG_Request_FinalBoss_EventFreeStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Limited_EventStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Limited_EventStage_StartOKDelegate CG_Request_Limited_EventStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Limited_EventStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Limited_EventStage_ClearOKDelegate CG_Request_Limited_EventStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Limited_EventStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Limited_EventStage_ContinueOKDelegate CG_Request_Limited_EventStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_EventStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_EventStage_StartOKDelegate CG_Request_Boss_EventStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_EventStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_EventStage_ClearOKDelegate CG_Request_Boss_EventStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Boss_EventStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Boss_EventStage_ContinueOKDelegate CG_Request_Boss_EventStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Monthly_EventStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Monthly_EventStage_StartOKDelegate CG_Request_Monthly_EventStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Monthly_EventStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Monthly_EventStage_ClearOKDelegate CG_Request_Monthly_EventStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Monthly_EventStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Monthly_EventStage_ContinueOKDelegate CG_Request_Monthly_EventStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestMonthlyStagePointRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestMonthlyStagePointRewardOKDelegate CG_RequestMonthlyStagePointRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_ChallengeBoss_EventStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_ChallengeBoss_EventStage_StartOKDelegate CG_Request_ChallengeBoss_EventStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_ChallengeBoss_EventStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_ChallengeBoss_EventStage_ClearOKDelegate CG_Request_ChallengeBoss_EventStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_ChallengeBoss_EventStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_ChallengeBoss_EventStage_ContinueOKDelegate CG_Request_ChallengeBoss_EventStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_ChallengeBoss_EventStage_InfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_ChallengeBoss_EventStage_InfoOKDelegate CG_Request_ChallengeBoss_EventStage_InfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_ChallengeBoss_Event_Point_RewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_ChallengeBoss_Event_Point_RewardOKDelegate CG_Request_ChallengeBoss_Event_Point_RewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Training_Stage_InfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Training_Stage_InfoOKDelegate CG_Request_Training_Stage_InfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Training_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Training_Stage_StartOKDelegate CG_Request_Training_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Training_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Training_Stage_ClearOKDelegate CG_Request_Training_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Training_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Training_Stage_ContinueOKDelegate CG_Request_Training_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Training_Stage_OpenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Training_Stage_OpenOKDelegate CG_Request_Training_Stage_OpenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_Training_Stage_RefreshOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_Training_Stage_RefreshOKDelegate CG_Request_Training_Stage_RefreshOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeekStageGaugeRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeekStageGaugeRewardOKDelegate CG_RequestWeekStageGaugeRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestIngameBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestIngameBattleStartOKDelegate CG_RequestIngameBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestStageEndLogOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestStageEndLogOKDelegate CG_RequestStageEndLogOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_SingleSiege_ExtraStage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_SingleSiege_ExtraStage_StartOKDelegate CG_Request_SingleSiege_ExtraStage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_SingleSiege_ExtraStage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_SingleSiege_ExtraStage_ClearOKDelegate CG_Request_SingleSiege_ExtraStage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_SingleSiege_ExtraStage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_SingleSiege_ExtraStage_ContinueOKDelegate CG_Request_SingleSiege_ExtraStage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_FinalBoss_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_FinalBoss_Stage_StartOKDelegate CG_Request_FinalBoss_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_FinalBoss_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_FinalBoss_Stage_ClearOKDelegate CG_Request_FinalBoss_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_FinalBoss_Stage_ContinueOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_FinalBoss_Stage_ContinueOKDelegate CG_Request_FinalBoss_Stage_ContinueOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_FinalBoss_Season_InfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_FinalBoss_Season_InfoOKDelegate CG_Request_FinalBoss_Season_InfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_FinalBoss_Season_Rank_InfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_FinalBoss_Season_Rank_InfoOKDelegate CG_Request_FinalBoss_Season_Rank_InfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildBoss_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildBoss_Stage_StartOKDelegate CG_Request_GuildBoss_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildBoss_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildBoss_Stage_ClearOKDelegate CG_Request_GuildBoss_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildBoss_Lobby_InfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildBoss_Lobby_InfoOKDelegate CG_Request_GuildBoss_Lobby_InfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildBoss_Rank_InfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildBoss_Rank_InfoOKDelegate CG_Request_GuildBoss_Rank_InfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildBoss_LastWeek_Rank_InfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildBoss_LastWeek_Rank_InfoOKDelegate CG_Request_GuildBoss_LastWeek_Rank_InfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildBoss_Time_RefreshOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildBoss_Time_RefreshOKDelegate CG_Request_GuildBoss_Time_RefreshOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestMailListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.MailInfo> mailList, List<SimpleCSharp.NoticeMailInfo> noticeMailInfoList);
        public CG_RequestMailListOKDelegate CG_RequestMailListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.MailInfo> mailList, List<SimpleCSharp.NoticeMailInfo> noticeMailInfoList)
        {
            return false;
        };
        public delegate bool CG_RequestMailConfirmOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, int mailSN, SimpleCSharp.MailHistoryInfo mailHistoryInfo, SimpleCSharp.ItemResultInfo itemResultInfo, SimpleCSharp.ApRewardInfo apRewardInfo, SimpleCSharp.MissionResult missionResult);
        public CG_RequestMailConfirmOKDelegate CG_RequestMailConfirmOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, int mailSN, SimpleCSharp.MailHistoryInfo mailHistoryInfo, SimpleCSharp.ItemResultInfo itemResultInfo, SimpleCSharp.ApRewardInfo apRewardInfo, SimpleCSharp.MissionResult missionResult)
        {
            return false;
        };
        public delegate bool CG_RequestMailConfirmAllOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<int> mailSNList, List<SimpleCSharp.ItemResultInfo> itemResultInfoList, List<SimpleCSharp.ApRewardInfo> apRewardInfoList);
        public CG_RequestMailConfirmAllOKDelegate CG_RequestMailConfirmAllOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<int> mailSNList, List<SimpleCSharp.ItemResultInfo> itemResultInfoList, List<SimpleCSharp.ApRewardInfo> apRewardInfoList)
        {
            return false;
        };
        public delegate bool CG_RequestMailHistoryListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestMailHistoryListOKDelegate CG_RequestMailHistoryListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestMailRecentlyHistoryListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestMailRecentlyHistoryListOKDelegate CG_RequestMailRecentlyHistoryListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendMailListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendMailListOKDelegate CG_RequestFriendMailListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendMailConfirmOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendMailConfirmOKDelegate CG_RequestFriendMailConfirmOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendMailConfirmAllOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendMailConfirmAllOKDelegate CG_RequestFriendMailConfirmAllOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestNoticeMailRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, int noticeMailSEQ, List<SimpleCSharp.ItemResultInfo> getItemResultInfoList, List<SimpleCSharp.ApRewardInfo> apRewardInfoList);
        public CG_RequestNoticeMailRewardOKDelegate CG_RequestNoticeMailRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, int noticeMailSEQ, List<SimpleCSharp.ItemResultInfo> getItemResultInfoList, List<SimpleCSharp.ApRewardInfo> apRewardInfoList)
        {
            return false;
        };
        public delegate bool CG_RequestPackageMailListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPackageMailListOKDelegate CG_RequestPackageMailListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestPackageMailGetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPackageMailGetOKDelegate CG_RequestPackageMailGetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestPackageMailHistoryListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPackageMailHistoryListOKDelegate CG_RequestPackageMailHistoryListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLevelUpPackageRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLevelUpPackageRewardOKDelegate CG_RequestLevelUpPackageRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLevelUpPackageRewardAllOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLevelUpPackageRewardAllOKDelegate CG_RequestLevelUpPackageRewardAllOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestAttendancePackageRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestAttendancePackageRewardOKDelegate CG_RequestAttendancePackageRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestAttendancePackageRewardAllOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestAttendancePackageRewardAllOKDelegate CG_RequestAttendancePackageRewardAllOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestMailADRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestMailADRewardOKDelegate CG_RequestMailADRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemInventoryBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemInventoryBuyOKDelegate CG_RequestItemInventoryBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeaponInventoryBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeaponInventoryBuyOKDelegate CG_RequestWeaponInventoryBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeekStageKeyBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeekStageKeyBuyOKDelegate CG_RequestWeekStageKeyBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDiaShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDiaShopInfoOKDelegate CG_RequestDiaShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDiaShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDiaShopBuyOKDelegate CG_RequestDiaShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGambleShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGambleShopBuyOKDelegate CG_RequestGambleShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemGambleShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemGambleShopInfoOKDelegate CG_RequestItemGambleShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemGambleShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemGambleShopBuyOKDelegate CG_RequestItemGambleShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRandomShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRandomShopBuyOKDelegate CG_RequestRandomShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRandomShopRefreshOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRandomShopRefreshOKDelegate CG_RequestRandomShopRefreshOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRandomShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRandomShopInfoOKDelegate CG_RequestRandomShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointShopInfoOKDelegate CG_RequestBasePointShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointShopBuyOKDelegate CG_RequestBasePointShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpShopInfoOKDelegate CG_RequestArenaRealTimePvpShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpShopBuyOKDelegate CG_RequestArenaRealTimePvpShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCoinShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCoinShopInfoOKDelegate CG_RequestCoinShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCoinShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCoinShopBuyOKDelegate CG_RequestCoinShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCoinShopDailyBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCoinShopDailyBuyOKDelegate CG_RequestCoinShopDailyBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCostumeShopInfoOKDelegate CG_RequestCostumeShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCostumeShopBuyOKDelegate CG_RequestCostumeShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendPointShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendPointShopInfoOKDelegate CG_RequestFriendPointShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendPointShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendPointShopBuyOKDelegate CG_RequestFriendPointShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCommonItemSellOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCommonItemSellOKDelegate CG_RequestCommonItemSellOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCommonItemRemoveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCommonItemRemoveOKDelegate CG_RequestCommonItemRemoveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestPackageShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPackageShopInfoOKDelegate CG_RequestPackageShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGambleShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGambleShopInfoOKDelegate CG_RequestGambleShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestADRouletteRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestADRouletteRewardOKDelegate CG_RequestADRouletteRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRandomShopVisitRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRandomShopVisitRewardOKDelegate CG_RequestRandomShopVisitRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRandomShopScheduleInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRandomShopScheduleInfoOKDelegate CG_RequestRandomShopScheduleInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestPackageBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPackageBuyOKDelegate CG_RequestPackageBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBuyDiaOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBuyDiaOKDelegate CG_RequestBuyDiaOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBuyGoldOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBuyGoldOKDelegate CG_RequestBuyGoldOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBuyStaminaOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBuyStaminaOKDelegate CG_RequestBuyStaminaOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildShopInfoOKDelegate CG_RequestGuildShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildShopBuyOKDelegate CG_RequestGuildShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointShopResetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointShopResetOKDelegate CG_RequestBasePointShopResetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpShopResetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpShopResetOKDelegate CG_RequestArenaRealTimePvpShopResetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCostumeShopPackageBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCostumeShopPackageBuyOKDelegate CG_RequestCostumeShopPackageBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFinalBossShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFinalBossShopInfoOKDelegate CG_RequestFinalBossShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFinalBossShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFinalBossShopBuyOKDelegate CG_RequestFinalBossShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventCollaborationCoinShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventCollaborationCoinShopInfoOKDelegate CG_RequestEventCollaborationCoinShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventCollaborationCoinShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventCollaborationCoinShopBuyOKDelegate CG_RequestEventCollaborationCoinShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildShopResetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildShopResetOKDelegate CG_RequestGuildShopResetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCoinShopOnceBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCoinShopOnceBuyOKDelegate CG_RequestCoinShopOnceBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBingoGambleShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBingoGambleShopInfoOKDelegate CG_RequestBingoGambleShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBingoGambleShopResetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBingoGambleShopResetOKDelegate CG_RequestBingoGambleShopResetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBingoGambleShopRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBingoGambleShopRewardOKDelegate CG_RequestBingoGambleShopRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDiaShopPackageBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDiaShopPackageBuyOKDelegate CG_RequestDiaShopPackageBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGambleChoiceShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGambleChoiceShopBuyOKDelegate CG_RequestGambleChoiceShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFreePackageRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFreePackageRewardOKDelegate CG_RequestFreePackageRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestPackageMissionCloseOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPackageMissionCloseOKDelegate CG_RequestPackageMissionCloseOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestMissionProgressOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.MissionResult missionResult);
        public CG_RequestMissionProgressOKDelegate CG_RequestMissionProgressOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.MissionResult missionResult)
        {
            return false;
        };
        public delegate bool CG_RequestMissionClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.MissionClearResultInfo missionClearResultInfo);
        public CG_RequestMissionClearOKDelegate CG_RequestMissionClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.MissionClearResultInfo missionClearResultInfo)
        {
            return false;
        };
        public delegate bool CG_RequestMissionEventClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.MissionClearResultInfo missionClearResultInfo, List<SimpleCSharp.EventMissionClearRequestInfo> eventMissionClearRequestInfoList);
        public CG_RequestMissionEventClearOKDelegate CG_RequestMissionEventClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.MissionClearResultInfo missionClearResultInfo, List<SimpleCSharp.EventMissionClearRequestInfo> eventMissionClearRequestInfoList)
        {
            return false;
        };
        public delegate bool CG_RequestMissionGetAchievePointRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestMissionGetAchievePointRewardOKDelegate CG_RequestMissionGetAchievePointRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestQuestStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.QuestProgressInfo progressInfo, SimpleCSharp.ItemResultInfo questItemInfo);
        public CG_RequestQuestStartOKDelegate CG_RequestQuestStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.QuestProgressInfo progressInfo, SimpleCSharp.ItemResultInfo questItemInfo)
        {
            return false;
        };
        public delegate bool CG_RequestQuestProgressOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.QuestProgressInfo progressInfo, List<SimpleCSharp.ItemResultInfo> getItemInfolist, SimpleCSharp.MissionResult missionResult);
        public CG_RequestQuestProgressOKDelegate CG_RequestQuestProgressOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.QuestProgressInfo progressInfo, List<SimpleCSharp.ItemResultInfo> getItemInfolist, SimpleCSharp.MissionResult missionResult)
        {
            return false;
        };
        public delegate bool CG_RequestQuestClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.QuestClearResultInfo clearResultInfo, List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList);
        public CG_RequestQuestClearOKDelegate CG_RequestQuestClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.QuestClearResultInfo clearResultInfo, List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList)
        {
            return false;
        };
        public delegate bool CG_RequestQuestRemoveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestQuestRemoveOKDelegate CG_RequestQuestRemoveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestNetmarbleQuestAchieveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestNetmarbleQuestAchieveOKDelegate CG_RequestNetmarbleQuestAchieveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestNetmarbleQuestRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestNetmarbleQuestRewardOKDelegate CG_RequestNetmarbleQuestRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDirectSelectorRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDirectSelectorRewardOKDelegate CG_RequestDirectSelectorRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestQuestChapterClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestQuestChapterClearOKDelegate CG_RequestQuestChapterClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventQuestClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventQuestClearOKDelegate CG_RequestEventQuestClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestAnotherQuestClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestAnotherQuestClearOKDelegate CG_RequestAnotherQuestClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestQuestGuideListAllClearRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestQuestGuideListAllClearRewardOKDelegate CG_RequestQuestGuideListAllClearRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyVRSearchOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyVRSearchOKDelegate CG_RequestLobbyVRSearchOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyVRHelbramOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyVRHelbramOKDelegate CG_RequestLobbyVRHelbramOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyNpcSkinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.UserNpc userNpcInfo, SimpleCSharp.MissionResult missionResult);
        public CG_RequestLobbyNpcSkinOKDelegate CG_RequestLobbyNpcSkinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.UserNpc userNpcInfo, SimpleCSharp.MissionResult missionResult)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyNpcGiftOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyNpcGiftOKDelegate CG_RequestLobbyNpcGiftOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyKingAmberOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyKingAmberOKDelegate CG_RequestLobbyKingAmberOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyDropInteractiveOpenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyDropInteractiveOpenOKDelegate CG_RequestLobbyDropInteractiveOpenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyUniqueInteractiveOpenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyUniqueInteractiveOpenOKDelegate CG_RequestLobbyUniqueInteractiveOpenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyNpcTalkInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyNpcTalkInfoOKDelegate CG_RequestLobbyNpcTalkInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyNpcTalkChoiceOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyNpcTalkChoiceOKDelegate CG_RequestLobbyNpcTalkChoiceOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyBarrelOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyBarrelOKDelegate CG_RequestLobbyBarrelOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyBarrelRefillOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyBarrelRefillOKDelegate CG_RequestLobbyBarrelRefillOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyCleanTableOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyCleanTableOKDelegate CG_RequestLobbyCleanTableOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyServeBeerOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyServeBeerOKDelegate CG_RequestLobbyServeBeerOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyPlayJukeboxOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyPlayJukeboxOKDelegate CG_RequestLobbyPlayJukeboxOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyElizabethTouchOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyElizabethTouchOKDelegate CG_RequestLobbyElizabethTouchOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyHawkAngerOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyHawkAngerOKDelegate CG_RequestLobbyHawkAngerOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestAttendanceRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.AttendanceResult attendanceResult, List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList);
        public CG_RequestAttendanceRewardOKDelegate CG_RequestAttendanceRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.AttendanceResult attendanceResult, List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList)
        {
            return false;
        };
        public delegate bool CG_RequestAttendanceEventRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestAttendanceEventRewardOKDelegate CG_RequestAttendanceEventRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCookingStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCookingStartOKDelegate CG_RequestCookingStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRecipeActiveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRecipeActiveOKDelegate CG_RequestRecipeActiveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCookingRecipeOrderInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCookingRecipeOrderInfoOKDelegate CG_RequestCookingRecipeOrderInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCookingRecipeOrderOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCookingRecipeOrderOKDelegate CG_RequestCookingRecipeOrderOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCookingRecipeDisorderOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCookingRecipeDisorderOKDelegate CG_RequestCookingRecipeDisorderOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCookingRecipeCollectOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCookingRecipeCollectOKDelegate CG_RequestCookingRecipeCollectOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCookingRecipeCollectOneSlotOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCookingRecipeCollectOneSlotOKDelegate CG_RequestCookingRecipeCollectOneSlotOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestCookingUseCookingBuffOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestCookingUseCookingBuffOKDelegate CG_RequestCookingUseCookingBuffOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuestInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuestInfoOKDelegate CG_RequestGuestInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuestChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuestChangeOKDelegate CG_RequestGuestChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuestChangeTargetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuestChangeTargetOKDelegate CG_RequestGuestChangeTargetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuestTalkOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuestTalkOKDelegate CG_RequestGuestTalkOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuestGiftOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuestGiftOKDelegate CG_RequestGuestGiftOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBirthdayNpcInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBirthdayNpcInfoOKDelegate CG_RequestBirthdayNpcInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRestRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRestRewardOKDelegate CG_RequestRestRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestAttendanceFortuneEventRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestAttendanceFortuneEventRewardOKDelegate CG_RequestAttendanceFortuneEventRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointGoldDonationOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointGoldDonationOKDelegate CG_RequestBasePointGoldDonationOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointSetTriggerOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointSetTriggerOKDelegate CG_RequestBasePointSetTriggerOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointDropInteractiveOpenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointDropInteractiveOpenOKDelegate CG_RequestBasePointDropInteractiveOpenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointUniqueInteractiveOpenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointUniqueInteractiveOpenOKDelegate CG_RequestBasePointUniqueInteractiveOpenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointDailyRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointDailyRewardOKDelegate CG_RequestBasePointDailyRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointDonationEventRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointDonationEventRewardOKDelegate CG_RequestBasePointDonationEventRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointDonationInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointDonationInfoOKDelegate CG_RequestBasePointDonationInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBasePointEventGoldDonationOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBasePointEventGoldDonationOKDelegate CG_RequestBasePointEventGoldDonationOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventBasepointInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventBasepointInfoOKDelegate CG_RequestEventBasepointInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyDestroyInviteDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyDestroyInviteDelegate GC_NotifyDestroyInvite = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroySetInviteOptionOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroySetInviteOptionOKDelegate CG_RequestDestroySetInviteOptionOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyGetUserLoginListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyGetUserLoginListOKDelegate CG_RequestDestroyGetUserLoginListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyGetFriendLoginListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyGetFriendLoginListOKDelegate CG_RequestDestroyGetFriendLoginListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyGetGuildLoginListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyGetGuildLoginListOKDelegate CG_RequestDestroyGetGuildLoginListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyGetReceivedInvitationListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyGetReceivedInvitationListOKDelegate CG_RequestDestroyGetReceivedInvitationListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyInviteOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyInviteOKDelegate CG_RequestDestroyInviteOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyRemoveInvitationOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyRemoveInvitationOKDelegate CG_RequestDestroyRemoveInvitationOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyRemoveJoinInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyRemoveJoinInfoOKDelegate CG_RequestDestroyRemoveJoinInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyCreateOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyCreateOKDelegate CG_RequestDestroyCreateOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyStartOKDelegate CG_RequestDestroyStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyBattleStartOKDelegate CG_RequestDestroyBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyJoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyJoinOKDelegate CG_RequestDestroyJoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyClearOKDelegate CG_RequestDestroyClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyReJoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyReJoinOKDelegate CG_RequestDestroyReJoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyRemoveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyRemoveOKDelegate CG_RequestDestroyRemoveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyBattleEndOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyBattleEndOKDelegate CG_RequestDestroyBattleEndOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyInviteAIOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyInviteAIOKDelegate CG_RequestDestroyInviteAIOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestDestroyKickOutAIOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestDestroyKickOutAIOKDelegate CG_RequestDestroyKickOutAIOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventDestroyCreateOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventDestroyCreateOKDelegate CG_RequestEventDestroyCreateOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventDestroyClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventDestroyClearOKDelegate CG_RequestEventDestroyClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventDestroyStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventDestroyStartOKDelegate CG_RequestEventDestroyStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventDestroyRemoveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventDestroyRemoveOKDelegate CG_RequestEventDestroyRemoveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventChallengeDestroyCreateOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventChallengeDestroyCreateOKDelegate CG_RequestEventChallengeDestroyCreateOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventChallengeDestroyStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventChallengeDestroyStartOKDelegate CG_RequestEventChallengeDestroyStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventChallengeDestroyClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventChallengeDestroyClearOKDelegate CG_RequestEventChallengeDestroyClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventChallengeDestroyPointRefreshOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventChallengeDestroyPointRefreshOKDelegate CG_RequestEventChallengeDestroyPointRefreshOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventChallengeDestroyUserRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventChallengeDestroyUserRewardOKDelegate CG_RequestEventChallengeDestroyUserRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventChallengeDestroyWorldRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventChallengeDestroyWorldRewardOKDelegate CG_RequestEventChallengeDestroyWorldRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendListOKDelegate CG_RequestFriendListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendGuildInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendGuildInfoOKDelegate CG_RequestFriendGuildInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendApplySendListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendApplySendListOKDelegate CG_RequestFriendApplySendListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendApplyReceiveListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendApplyReceiveListOKDelegate CG_RequestFriendApplyReceiveListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendApplySendOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendApplySendOKDelegate CG_RequestFriendApplySendOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendApplyRejectOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendApplyRejectOKDelegate CG_RequestFriendApplyRejectOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendApplyReceiveAcceptOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendApplyReceiveAcceptOKDelegate CG_RequestFriendApplyReceiveAcceptOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendApplyReceiveAcceptListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendApplyReceiveAcceptListOKDelegate CG_RequestFriendApplyReceiveAcceptListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendApplyReceiveRefuseOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendApplyReceiveRefuseOKDelegate CG_RequestFriendApplyReceiveRefuseOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendApplyReceiveRefuseListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendApplyReceiveRefuseListOKDelegate CG_RequestFriendApplyReceiveRefuseListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendRemoveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendRemoveOKDelegate CG_RequestFriendRemoveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendSearchOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendSearchOKDelegate CG_RequestFriendSearchOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendVisitOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendVisitOKDelegate CG_RequestFriendVisitOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendPointSendOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendPointSendOKDelegate CG_RequestFriendPointSendOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendPointSendAllOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendPointSendAllOKDelegate CG_RequestFriendPointSendAllOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendLobbyInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendLobbyInfoOKDelegate CG_RequestFriendLobbyInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendCookingRecipeInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendCookingRecipeInfoOKDelegate CG_RequestFriendCookingRecipeInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendCookingEatOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendCookingEatOKDelegate CG_RequestFriendCookingEatOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendCookingEatFriendListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendCookingEatFriendListOKDelegate CG_RequestFriendCookingEatFriendListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildRecommendListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildRecommendListOKDelegate CG_RequestGuildRecommendListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildInfoWithMemberListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildInfoWithMemberListOKDelegate CG_RequestGuildInfoWithMemberListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildSearchByNameOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildSearchByNameOKDelegate CG_RequestGuildSearchByNameOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildCreateOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildCreateOKDelegate CG_RequestGuildCreateOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildDisbandOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildDisbandOKDelegate CG_RequestGuildDisbandOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildApplicantListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildApplicantListOKDelegate CG_RequestGuildApplicantListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildApplyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildApplyOKDelegate CG_RequestGuildApplyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildReturnApplicationOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildReturnApplicationOKDelegate CG_RequestGuildReturnApplicationOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildAcceptApplicantOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildAcceptApplicantOKDelegate CG_RequestGuildAcceptApplicantOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildRejectApplicantOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildRejectApplicantOKDelegate CG_RequestGuildRejectApplicantOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildLevelUpOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildLevelUpOKDelegate CG_RequestGuildLevelUpOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildChangeNameOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildChangeNameOKDelegate CG_RequestGuildChangeNameOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildChangeBoardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildChangeBoardOKDelegate CG_RequestGuildChangeBoardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildChangeMasterOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildChangeMasterOKDelegate CG_RequestGuildChangeMasterOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildChangeMemberGradeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildChangeMemberGradeOKDelegate CG_RequestGuildChangeMemberGradeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildKickOutMemberOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildKickOutMemberOKDelegate CG_RequestGuildKickOutMemberOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildLeaveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildLeaveOKDelegate CG_RequestGuildLeaveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildRoomInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildRoomInfoOKDelegate CG_RequestGuildRoomInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildAttendanceOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildAttendanceOKDelegate CG_RequestGuildAttendanceOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildAttendanceRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildAttendanceRewardOKDelegate CG_RequestGuildAttendanceRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildUserInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildUserInfoOKDelegate CG_RequestGuildUserInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildAttendanceStatusOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildAttendanceStatusOKDelegate CG_RequestGuildAttendanceStatusOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyGuildKickoutDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyGuildKickoutDelegate GC_NotifyGuildKickout = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildDonationOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildDonationOKDelegate CG_RequestGuildDonationOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildDonationInitializeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildDonationInitializeOKDelegate CG_RequestGuildDonationInitializeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildMissionInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildMissionInfoOKDelegate CG_RequestGuildMissionInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildMissionRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildMissionRewardOKDelegate CG_RequestGuildMissionRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyGuildAcceptApplicantOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyGuildAcceptApplicantOKDelegate GC_NotifyGuildAcceptApplicantOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildDonationInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildDonationInfoOKDelegate CG_RequestGuildDonationInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildSkillInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildSkillInfoOKDelegate CG_RequestGuildSkillInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildSkillLevelUpOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildSkillLevelUpOKDelegate CG_RequestGuildSkillLevelUpOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildSkillUseOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildSkillUseOKDelegate CG_RequestGuildSkillUseOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildSkillDisuseOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildSkillDisuseOKDelegate CG_RequestGuildSkillDisuseOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildSkillUseInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildSkillUseInfoOKDelegate CG_RequestGuildSkillUseInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildMemberRankPointRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildMemberRankPointRewardOKDelegate CG_RequestGuildMemberRankPointRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildBattlePointRegisterOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildBattlePointRegisterOKDelegate CG_RequestGuildBattlePointRegisterOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildBattlePointMemeberRankListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildBattlePointMemeberRankListOKDelegate CG_RequestGuildBattlePointMemeberRankListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildBattlePointGuildRankListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildBattlePointGuildRankListOKDelegate CG_RequestGuildBattlePointGuildRankListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildBattlePointUserRankListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildBattlePointUserRankListOKDelegate CG_RequestGuildBattlePointUserRankListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestAPRechargeByUseItemOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestAPRechargeByUseItemOKDelegate CG_RequestAPRechargeByUseItemOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWeekStageKeyOpenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWeekStageKeyOpenOKDelegate CG_RequestWeekStageKeyOpenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFoodBuffAutoUseOnOffOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFoodBuffAutoUseOnOffOKDelegate CG_RequestFoodBuffAutoUseOnOffOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemUseRankExpOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemUseRankExpOKDelegate CG_RequestItemUseRankExpOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemUseBoxOpenOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemUseBoxOpenOKDelegate CG_RequestItemUseBoxOpenOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemUseRecipeExpOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemUseRecipeExpOKDelegate CG_RequestItemUseRecipeExpOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemUseWeeklyKeyBoxOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemUseWeeklyKeyBoxOKDelegate CG_RequestItemUseWeeklyKeyBoxOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemUseWeaponTicketOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemUseWeaponTicketOKDelegate CG_RequestItemUseWeaponTicketOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestItemUseMusicOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestItemUseMusicOKDelegate CG_RequestItemUseMusicOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTutorialAddStepOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.UserTutorialInfo tutorialInfo, List<SimpleCSharp.ItemResultInfo> itemResultInfoList, SimpleCSharp.MissionResult missionResult);
        public CG_RequestTutorialAddStepOKDelegate CG_RequestTutorialAddStepOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.UserTutorialInfo tutorialInfo, List<SimpleCSharp.ItemResultInfo> itemResultInfoList, SimpleCSharp.MissionResult missionResult)
        {
            return false;
        };
        public delegate bool CG_RequestTutorialSetFlagOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.UserTutorialInfo tutorialInfo, List<SimpleCSharp.ItemResultInfo> itemResultInfoList, SimpleCSharp.MissionResult missionResult);
        public CG_RequestTutorialSetFlagOKDelegate CG_RequestTutorialSetFlagOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.UserTutorialInfo tutorialInfo, List<SimpleCSharp.ItemResultInfo> itemResultInfoList, SimpleCSharp.MissionResult missionResult)
        {
            return false;
        };
        public delegate bool CG_RequestTutorialHeroFlagOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTutorialHeroFlagOKDelegate CG_RequestTutorialHeroFlagOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTutorialGambleShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.UserTutorialInfo tutorialInfo, List<SimpleCSharp.ItemResultInfo> useItemResultinfoList, List<SimpleCSharp.ItemResultInfo> gambleItemResultInfoList, SimpleCSharp.MissionResult missionResult, SimpleCSharp.UserBingoGachaEventInfo userBingoGachaEventInfo, SimpleCSharp.PaybackEventResultInfo paybackEventResultInfo);
        public CG_RequestTutorialGambleShopBuyOKDelegate CG_RequestTutorialGambleShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, SimpleCSharp.UserTutorialInfo tutorialInfo, List<SimpleCSharp.ItemResultInfo> useItemResultinfoList, List<SimpleCSharp.ItemResultInfo> gambleItemResultInfoList, SimpleCSharp.MissionResult missionResult, SimpleCSharp.UserBingoGachaEventInfo userBingoGachaEventInfo, SimpleCSharp.PaybackEventResultInfo paybackEventResultInfo)
        {
            return false;
        };
        public delegate bool CG_RequestBattleTutorialInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBattleTutorialInfoOKDelegate CG_RequestBattleTutorialInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBattleTutorialSetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBattleTutorialSetOKDelegate CG_RequestBattleTutorialSetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchCreateOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchCreateOKDelegate CG_RequestFriendlyMatchCreateOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchFriendListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchFriendListOKDelegate CG_RequestFriendlyMatchFriendListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchInviteOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchInviteOKDelegate CG_RequestFriendlyMatchInviteOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchReceivedInviteListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchReceivedInviteListOKDelegate CG_RequestFriendlyMatchReceivedInviteListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchInviteAcceptOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchInviteAcceptOKDelegate CG_RequestFriendlyMatchInviteAcceptOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchInviteRejectOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchInviteRejectOKDelegate CG_RequestFriendlyMatchInviteRejectOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchStartOKDelegate CG_RequestFriendlyMatchStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchBattleStartOKDelegate CG_RequestFriendlyMatchBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchClearOKDelegate CG_RequestFriendlyMatchClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchExitOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchExitOKDelegate CG_RequestFriendlyMatchExitOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyFriendlyMatchInviteDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyFriendlyMatchInviteDelegate GC_NotifyFriendlyMatchInvite = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestFriendlyMatchSetInviteOptionOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestFriendlyMatchSetInviteOptionOKDelegate CG_RequestFriendlyMatchSetInviteOptionOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventMissionGetAchievePointRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventMissionGetAchievePointRewardOKDelegate CG_RequestEventMissionGetAchievePointRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventMissionCompleteRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventMissionCompleteRewardOKDelegate CG_RequestEventMissionCompleteRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventMissionInfoOkDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventMissionInfoOkDelegate CG_RequestEventMissionInfoOk = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyHousingShopInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyHousingShopInfoOKDelegate CG_RequestLobbyHousingShopInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyHousingShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyHousingShopBuyOKDelegate CG_RequestLobbyHousingShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestLobbyFurnitureRegistOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestLobbyFurnitureRegistOKDelegate CG_RequestLobbyFurnitureRegistOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestUserMusicEditOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestUserMusicEditOKDelegate CG_RequestUserMusicEditOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventSeasonPassInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.ClientSeasonPassRankRewardInfo> clientSeasonPassRankRewardInfoList, SimpleCSharp.UserCommonItem rankPointItemInfo, byte currentServerSeasonPassWeek, byte currentClientSeasonPassWeek);
        public CG_RequestEventSeasonPassInfoOKDelegate CG_RequestEventSeasonPassInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, List<SimpleCSharp.ClientSeasonPassRankRewardInfo> clientSeasonPassRankRewardInfoList, SimpleCSharp.UserCommonItem rankPointItemInfo, byte currentServerSeasonPassWeek, byte currentClientSeasonPassWeek)
        {
            return false;
        };
        public delegate bool CG_RequestEventSeasonPassRankUpRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventSeasonPassRankUpRewardOKDelegate CG_RequestEventSeasonPassRankUpRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventSeasonPassRankUpRewardAllOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventSeasonPassRankUpRewardAllOKDelegate CG_RequestEventSeasonPassRankUpRewardAllOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventSeasonPassRankBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventSeasonPassRankBuyOKDelegate CG_RequestEventSeasonPassRankBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestStepupGambleShopBuyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestStepupGambleShopBuyOKDelegate CG_RequestStepupGambleShopBuyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestStepupGambleMileageRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestStepupGambleMileageRewardOKDelegate CG_RequestStepupGambleMileageRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWestSideServerInfo_RandomOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWestSideServerInfo_RandomOKDelegate CG_RequestWestSideServerInfo_RandomOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWestSideServerInfo_FixedOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWestSideServerInfo_FixedOKDelegate CG_RequestWestSideServerInfo_FixedOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWestSideServerInfo_RecommandOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWestSideServerInfo_RecommandOKDelegate CG_RequestWestSideServerInfo_RecommandOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWestSide_PlayerInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWestSide_PlayerInfoOKDelegate CG_RequestWestSide_PlayerInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWestSide_PlayerteamInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWestSide_PlayerteamInfoOKDelegate CG_RequestWestSide_PlayerteamInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWestSide_PlayerGuildInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestWestSide_PlayerGuildInfoOKDelegate CG_RequestWestSide_PlayerGuildInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestWorldChattingChannelOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, int worldChattingChannelId);
        public CG_RequestWorldChattingChannelOKDelegate CG_RequestWorldChattingChannelOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext, int worldChattingChannelId)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLobbyInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLobbyInfoOKDelegate CG_RequestArenaRealTimePvpLobbyInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpJoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpJoinOKDelegate CG_RequestArenaRealTimePvpJoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpTopRankerListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpTopRankerListOKDelegate CG_RequestArenaRealTimePvpTopRankerListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLastRankerListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLastRankerListOKDelegate CG_RequestArenaRealTimePvpLastRankerListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpMatchingOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpMatchingOKDelegate CG_RequestArenaRealTimePvpMatchingOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpBattleStartOKDelegate CG_RequestArenaRealTimePvpBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpBattleEndOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpBattleEndOKDelegate CG_RequestArenaRealTimePvpBattleEndOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpRollbackOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpRollbackOKDelegate CG_RequestArenaRealTimePvpRollbackOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpIngameBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpIngameBattleStartOKDelegate CG_RequestArenaRealTimePvpIngameBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLowerLobbyInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLowerLobbyInfoOKDelegate CG_RequestArenaRealTimePvpLowerLobbyInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLowerJoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLowerJoinOKDelegate CG_RequestArenaRealTimePvpLowerJoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLowerTopRankerListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLowerTopRankerListOKDelegate CG_RequestArenaRealTimePvpLowerTopRankerListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLowerMatchingOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLowerMatchingOKDelegate CG_RequestArenaRealTimePvpLowerMatchingOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLowerBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLowerBattleStartOKDelegate CG_RequestArenaRealTimePvpLowerBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLowerBattleEndOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLowerBattleEndOKDelegate CG_RequestArenaRealTimePvpLowerBattleEndOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpAllInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpAllInfoOKDelegate CG_RequestArenaRealTimePvpAllInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLastRankerBattleInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLastRankerBattleInfoOKDelegate CG_RequestArenaRealTimePvpLastRankerBattleInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLastRankerBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLastRankerBattleStartOKDelegate CG_RequestArenaRealTimePvpLastRankerBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLowerRollbackOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLowerRollbackOKDelegate CG_RequestArenaRealTimePvpLowerRollbackOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimePvpLowerIngameBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimePvpLowerIngameBattleStartOKDelegate CG_RequestArenaRealTimePvpLowerIngameBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionLobbyInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionLobbyInfoOKDelegate CG_RequestArenaRealTimeDecisionLobbyInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionJoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionJoinOKDelegate CG_RequestArenaRealTimeDecisionJoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionTopRankerListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionTopRankerListOKDelegate CG_RequestArenaRealTimeDecisionTopRankerListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionMatchingOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionMatchingOKDelegate CG_RequestArenaRealTimeDecisionMatchingOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionBattleStartOKDelegate CG_RequestArenaRealTimeDecisionBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionBattleEndOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionBattleEndOKDelegate CG_RequestArenaRealTimeDecisionBattleEndOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionIngameBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionIngameBattleStartOKDelegate CG_RequestArenaRealTimeDecisionIngameBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionHistoryOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionHistoryOKDelegate CG_RequestArenaRealTimeDecisionHistoryOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionChangeMatchingListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionChangeMatchingListOKDelegate CG_RequestArenaRealTimeDecisionChangeMatchingListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOKDelegate CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestPvpSeasonInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPvpSeasonInfoOKDelegate CG_RequestPvpSeasonInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestPvpSeasonHistoryOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPvpSeasonHistoryOKDelegate CG_RequestPvpSeasonHistoryOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventExchangeInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventExchangeInfoOKDelegate CG_RequestEventExchangeInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventExchangeBoxGachaInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventExchangeBoxGachaInfoOKDelegate CG_RequestEventExchangeBoxGachaInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventExchangeBoxGachaPickupOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventExchangeBoxGachaPickupOKDelegate CG_RequestEventExchangeBoxGachaPickupOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventExchangeBoxGachaResetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventExchangeBoxGachaResetOKDelegate CG_RequestEventExchangeBoxGachaResetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventPaybackRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventPaybackRewardOKDelegate CG_RequestEventPaybackRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarCreateOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarCreateOKDelegate CG_RequestBossWarCreateOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarJoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarJoinOKDelegate CG_RequestBossWarJoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarStartOKDelegate CG_RequestBossWarStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarBattleStartOKDelegate CG_RequestBossWarBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarBattleEndOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarBattleEndOKDelegate CG_RequestBossWarBattleEndOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarOnlineFriendListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarOnlineFriendListOKDelegate CG_RequestBossWarOnlineFriendListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarOnlineGuildMemberListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarOnlineGuildMemberListOKDelegate CG_RequestBossWarOnlineGuildMemberListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarOnlineUserRankRangeListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarOnlineUserRankRangeListOKDelegate CG_RequestBossWarOnlineUserRankRangeListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarInvitationReceiveListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarInvitationReceiveListOKDelegate CG_RequestBossWarInvitationReceiveListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarRemoveInvitationOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarRemoveInvitationOKDelegate CG_RequestBossWarRemoveInvitationOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarInviteOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarInviteOKDelegate CG_RequestBossWarInviteOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarKickOutOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarKickOutOKDelegate CG_RequestBossWarKickOutOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarRewardOKDelegate CG_RequestBossWarRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarReadyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarReadyOKDelegate CG_RequestBossWarReadyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarReturnReadyOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarReturnReadyOKDelegate CG_RequestBossWarReturnReadyOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarSyncOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarSyncOKDelegate CG_RequestBossWarSyncOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarBattleSyncOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarBattleSyncOKDelegate CG_RequestBossWarBattleSyncOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestBossWarLeaveOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestBossWarLeaveOKDelegate CG_RequestBossWarLeaveOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyBossWarInviteDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyBossWarInviteDelegate GC_NotifyBossWarInvite = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyBossWarMemberJoinUpdateDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyBossWarMemberJoinUpdateDelegate GC_NotifyBossWarMemberJoinUpdate = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyBossWarGameStartDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyBossWarGameStartDelegate GC_NotifyBossWarGameStart = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyBossWarWaitReadyStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyBossWarWaitReadyStartOKDelegate GC_NotifyBossWarWaitReadyStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyBossWarRewardAggregationOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyBossWarRewardAggregationOKDelegate GC_NotifyBossWarRewardAggregationOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventSnsShareProgressOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventSnsShareProgressOKDelegate CG_RequestEventSnsShareProgressOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventSnsShareRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventSnsShareRewardOKDelegate CG_RequestEventSnsShareRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGagueEventInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGagueEventInfoOKDelegate CG_RequestGagueEventInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGagueEventChargeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGagueEventChargeOKDelegate CG_RequestGagueEventChargeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGagueEventRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGagueEventRewardOKDelegate CG_RequestGagueEventRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGagueEventResetOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGagueEventResetOKDelegate CG_RequestGagueEventResetOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventLadderRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventLadderRewardOKDelegate CG_RequestEventLadderRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventLobbyGiftRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventLobbyGiftRewardOKDelegate CG_RequestEventLobbyGiftRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventTimeMissionInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventTimeMissionInfoOKDelegate CG_RequestEventTimeMissionInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventTimeMissionStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventTimeMissionStartOKDelegate CG_RequestEventTimeMissionStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestEventLobbyDecorationRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestEventLobbyDecorationRewardOKDelegate CG_RequestEventLobbyDecorationRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestRegistPlayTitleOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestRegistPlayTitleOKDelegate CG_RequestRegistPlayTitleOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestPlayTitleMissionRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestPlayTitleMissionRewardOKDelegate CG_RequestPlayTitleMissionRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentListOKDelegate CG_RequestTournamentListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentProgressInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentProgressInfoOKDelegate CG_RequestTournamentProgressInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentResultInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentResultInfoOKDelegate CG_RequestTournamentResultInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentMatchJoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentMatchJoinOKDelegate CG_RequestTournamentMatchJoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentMatchBattleStartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentMatchBattleStartOKDelegate CG_RequestTournamentMatchBattleStartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentMatchBattleEndOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentMatchBattleEndOKDelegate CG_RequestTournamentMatchBattleEndOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentMatchExitOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentMatchExitOKDelegate CG_RequestTournamentMatchExitOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyTournamentProgressChangeDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyTournamentProgressChangeDelegate GC_NotifyTournamentProgressChange = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentRewardOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentRewardOKDelegate CG_RequestTournamentRewardOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool GC_NotifyTournamentMatchSuspendDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public GC_NotifyTournamentMatchSuspendDelegate GC_NotifyTournamentMatchSuspend = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentPlayerTeamSlotChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentPlayerTeamSlotChangeOKDelegate CG_RequestTournamentPlayerTeamSlotChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentPlayerTeamInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentPlayerTeamInfoOKDelegate CG_RequestTournamentPlayerTeamInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentCheerOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentCheerOKDelegate CG_RequestTournamentCheerOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentCheerListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentCheerListOKDelegate CG_RequestTournamentCheerListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentWatcherJoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentWatcherJoinOKDelegate CG_RequestTournamentWatcherJoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentWatcherExitOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentWatcherExitOKDelegate CG_RequestTournamentWatcherExitOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentMatchPlayInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentMatchPlayInfoOKDelegate CG_RequestTournamentMatchPlayInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestTournamentReplayInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestTournamentReplayInfoOKDelegate CG_RequestTournamentReplayInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarLobbyInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarLobbyInfoOKDelegate CG_RequestGuildWarLobbyInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarRankInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarRankInfoOKDelegate CG_RequestGuildWarRankInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarVersusRecordInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarVersusRecordInfoOKDelegate CG_RequestGuildWarVersusRecordInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarGuildMemberListOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarGuildMemberListOKDelegate CG_RequestGuildWarGuildMemberListOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarWorldMapInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarWorldMapInfoOKDelegate CG_RequestGuildWarWorldMapInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarAttackSquadChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarAttackSquadChangeOKDelegate CG_RequestGuildWarAttackSquadChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarDefenceTeamChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarDefenceTeamChangeOKDelegate CG_RequestGuildWarDefenceTeamChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarRegionBonusScoreChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarRegionBonusScoreChangeOKDelegate CG_RequestGuildWarRegionBonusScoreChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarAreaGuildMemberChangeOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarAreaGuildMemberChangeOKDelegate CG_RequestGuildWarAreaGuildMemberChangeOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_RequestGuildWarBattleRecordInfoOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_RequestGuildWarBattleRecordInfoOKDelegate CG_RequestGuildWarBattleRecordInfoOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildWar_Stage_StartOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildWar_Stage_StartOKDelegate CG_Request_GuildWar_Stage_StartOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildWar_Stage_ClearOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildWar_Stage_ClearOKDelegate CG_Request_GuildWar_Stage_ClearOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildWar_Stage_RejoinOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildWar_Stage_RejoinOKDelegate CG_Request_GuildWar_Stage_RejoinOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public delegate bool CG_Request_GuildWar_Stage_HeroStatus_SyncOKDelegate(Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext);
        public CG_Request_GuildWar_Stage_HeroStatus_SyncOKDelegate CG_Request_GuildWar_Stage_HeroStatus_SyncOK = delegate (Nettention.Proud.HostID remote, Nettention.Proud.RmiContext rmiContext)
        {
            return false;
        };
        public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag)
        {
            Nettention.Proud.HostID remote = pa.RemoteHostID;
            if (remote == Nettention.Proud.HostID.HostID_None)
            {
                ShowUnknownHostIDWarning(remote);
            }

            Nettention.Proud.Message __msg = pa.ReadOnlyMessage;
            int orgReadOffset = __msg.ReadOffset;
            Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
            if (!__msg.Read(out __rmiID))
                goto __fail;
            //Console.WriteLine("__rmiID:{0}", __rmiID);
            switch (__rmiID)
            {
                case Common.CG_CommonCancel:
                    ProcessReceivedMessage_CG_CommonCancel(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyUserLevelUp:
                    ProcessReceivedMessage_GC_NotifyUserLevelUp(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_FrozenAssetCancel:
                    ProcessReceivedMessage_CG_FrozenAssetCancel(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestChannelUserInfoOK:
                    ProcessReceivedMessage_CG_RequestChannelUserInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestHeartBeatOK:
                    ProcessReceivedMessage_CG_RequestHeartBeatOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestChangeNicknameOK:
                    ProcessReceivedMessage_CG_RequestChangeNicknameOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestChangeWantToSayOK:
                    ProcessReceivedMessage_CG_RequestChangeWantToSayOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestStageInfoOK:
                    ProcessReceivedMessage_CG_RequestStageInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTeamInfoOK:
                    ProcessReceivedMessage_CG_RequestTeamInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTeamSlotChangeOK:
                    ProcessReceivedMessage_CG_RequestTeamSlotChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTeamNameChangeOK:
                    ProcessReceivedMessage_CG_RequestTeamNameChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyInfoOK:
                    ProcessReceivedMessage_CG_RequestLobbyInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointInfoOK:
                    ProcessReceivedMessage_CG_RequestBasePointInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMercenaryListOK:
                    ProcessReceivedMessage_CG_RequestMercenaryListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMercenaryInfoOK:
                    ProcessReceivedMessage_CG_RequestMercenaryInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestChatStampUpdateBookmarkOK:
                    ProcessReceivedMessage_CG_RequestChatStampUpdateBookmarkOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestChatStampUpdateQuickMessageOK:
                    ProcessReceivedMessage_CG_RequestChatStampUpdateQuickMessageOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMainSkinChangeOK:
                    ProcessReceivedMessage_CG_RequestMainSkinChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventListOK:
                    ProcessReceivedMessage_CG_RequestEventListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCheatEnterOK:
                    ProcessReceivedMessage_CG_RequestCheatEnterOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCheatStageClearOK:
                    ProcessReceivedMessage_CG_RequestCheatStageClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDllGetItemOK:
                    ProcessReceivedMessage_CG_RequestDllGetItemOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRecommendFriendUSNListOK:
                    ProcessReceivedMessage_CG_RequestRecommendFriendUSNListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDailyResetOK:
                    ProcessReceivedMessage_CG_RequestDailyResetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_NotifyMaintenance:
                    ProcessReceivedMessage_CG_NotifyMaintenance(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFrozenAssetRedeemOK:
                    ProcessReceivedMessage_CG_RequestFrozenAssetRedeemOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSecurityTokenOK:
                    ProcessReceivedMessage_CG_RequestSecurityTokenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestNetmarbleAuthOK:
                    ProcessReceivedMessage_CG_RequestNetmarbleAuthOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAuthenticateCreateOK:
                    ProcessReceivedMessage_CG_RequestAuthenticateCreateOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEditorUserInfoByNickNameOK:
                    ProcessReceivedMessage_CG_RequestEditorUserInfoByNickNameOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLoginOK:
                    ProcessReceivedMessage_CG_RequestLoginOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLoginInstantlyOK:
                    ProcessReceivedMessage_CG_RequestLoginInstantlyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestForceLogoutOK:
                    ProcessReceivedMessage_CG_RequestForceLogoutOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RetryRequestOK:
                    ProcessReceivedMessage_CG_RetryRequestOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBillingInitializeOK:
                    ProcessReceivedMessage_CG_RequestBillingInitializeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBillingVerifyPUOK:
                    ProcessReceivedMessage_CG_RequestBillingVerifyPUOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBillingRemainTROK:
                    ProcessReceivedMessage_CG_RequestBillingRemainTROK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBillingCouponVerifyOK:
                    ProcessReceivedMessage_CG_RequestBillingCouponVerifyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBillingCrossPromotionOK:
                    ProcessReceivedMessage_CG_RequestBillingCrossPromotionOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBillingPackageShopOK:
                    ProcessReceivedMessage_CG_RequestBillingPackageShopOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAgeInputOK:
                    ProcessReceivedMessage_CG_RequestAgeInputOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Notify_WolverineOK:
                    ProcessReceivedMessage_CG_Notify_WolverineOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSDKInfoChangeOK:
                    ProcessReceivedMessage_CG_RequestSDKInfoChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinLevelUpBySkinMaterialOK:
                    ProcessReceivedMessage_CG_RequestSkinLevelUpBySkinMaterialOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinResearchOK:
                    ProcessReceivedMessage_CG_RequestSkinResearchOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinResearchInitOK:
                    ProcessReceivedMessage_CG_RequestSkinResearchInitOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinMaterialGrindOK:
                    ProcessReceivedMessage_CG_RequestSkinMaterialGrindOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinAwakenOK:
                    ProcessReceivedMessage_CG_RequestSkinAwakenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinHeadStyleChangeOK:
                    ProcessReceivedMessage_CG_RequestSkinHeadStyleChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinEvolutionOK:
                    ProcessReceivedMessage_CG_RequestSkinEvolutionOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinSkillLevelUpOK:
                    ProcessReceivedMessage_CG_RequestSkinSkillLevelUpOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinGiveFellowshipExpOK:
                    ProcessReceivedMessage_CG_RequestSkinGiveFellowshipExpOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinFellowshipLevelUpRewardOK:
                    ProcessReceivedMessage_CG_RequestSkinFellowshipLevelUpRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeEquipOK:
                    ProcessReceivedMessage_CG_RequestCostumeEquipOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeUnEquipOK:
                    ProcessReceivedMessage_CG_RequestCostumeUnEquipOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeUnLockOK:
                    ProcessReceivedMessage_CG_RequestCostumeUnLockOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinOverEvolutionOK:
                    ProcessReceivedMessage_CG_RequestSkinOverEvolutionOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinMaxAwakenRewardOK:
                    ProcessReceivedMessage_CG_RequestSkinMaxAwakenRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeRegisterOK:
                    ProcessReceivedMessage_CG_RequestCostumeRegisterOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinLoveRewardOK:
                    ProcessReceivedMessage_CG_RequestSkinLoveRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeAutoRegisterOK:
                    ProcessReceivedMessage_CG_RequestCostumeAutoRegisterOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestStoryCostumeOK:
                    ProcessReceivedMessage_CG_RequestStoryCostumeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeLevelUpOK:
                    ProcessReceivedMessage_CG_RequestCostumeLevelUpOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestSkinMaxAwakenOK:
                    ProcessReceivedMessage_CG_RequestSkinMaxAwakenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponEquipOK:
                    ProcessReceivedMessage_CG_RequestWeaponEquipOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponUnEquipOK:
                    ProcessReceivedMessage_CG_RequestWeaponUnEquipOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponSellOK:
                    ProcessReceivedMessage_CG_RequestWeaponSellOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponGrindOK:
                    ProcessReceivedMessage_CG_RequestWeaponGrindOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponUpgradeOK:
                    ProcessReceivedMessage_CG_RequestWeaponUpgradeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponUpgradeRetryOK:
                    ProcessReceivedMessage_CG_RequestWeaponUpgradeRetryOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponEvolutionOK:
                    ProcessReceivedMessage_CG_RequestWeaponEvolutionOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponEvolutionRetryOK:
                    ProcessReceivedMessage_CG_RequestWeaponEvolutionRetryOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponOptionEnhanceOK:
                    ProcessReceivedMessage_CG_RequestWeaponOptionEnhanceOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponLockOK:
                    ProcessReceivedMessage_CG_RequestWeaponLockOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponUnLockOK:
                    ProcessReceivedMessage_CG_RequestWeaponUnLockOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponEquipExchangeOK:
                    ProcessReceivedMessage_CG_RequestWeaponEquipExchangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponEquipExchangeAllOK:
                    ProcessReceivedMessage_CG_RequestWeaponEquipExchangeAllOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponEquipRecommandOK:
                    ProcessReceivedMessage_CG_RequestWeaponEquipRecommandOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponCarveOK:
                    ProcessReceivedMessage_CG_RequestWeaponCarveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponCarveRemoveOK:
                    ProcessReceivedMessage_CG_RequestWeaponCarveRemoveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestStageRejoinOK:
                    ProcessReceivedMessage_CG_RequestStageRejoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Main_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Main_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Main_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Free_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Free_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Free_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestHawkRunStageStartOK:
                    ProcessReceivedMessage_CG_RequestHawkRunStageStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestHawkRunStageClearOK:
                    ProcessReceivedMessage_CG_RequestHawkRunStageClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventStageClearOK:
                    ProcessReceivedMessage_CG_RequestEventStageClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Quest_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Quest_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Quest_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Quest_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Quest_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Quest_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Week_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Week_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Week_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Week_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Week_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Week_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Boss_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Boss_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Boss_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Memorial_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Memorial_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Memorial_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Memorial_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Memorial_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Memorial_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Limited_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Limited_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Limited_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Limited_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Limited_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Limited_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_ExtraStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Main_ExtraStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_ExtraStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Main_ExtraStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_ExtraStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Main_ExtraStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_ExtraStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Boss_ExtraStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_ExtraStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Boss_ExtraStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_ExtraStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Boss_ExtraStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRewardStageClearOK:
                    ProcessReceivedMessage_CG_RequestRewardStageClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_AnotherMain_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_AnotherMain_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_AnotherMain_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_AnotherMain_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_AnotherMain_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_AnotherMain_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Reverse_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Reverse_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Reverse_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Reverse_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Reverse_Star_RewardOK:
                    ProcessReceivedMessage_CG_Request_Reverse_Star_RewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Reverse_Group_RewardOK:
                    ProcessReceivedMessage_CG_Request_Reverse_Group_RewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_EventAreaStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Main_EventAreaStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_EventAreaStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Main_EventAreaStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_EventAreaStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Main_EventAreaStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_EventAreaStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Free_EventAreaStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_EventAreaStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Free_EventAreaStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_EventAreaStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Free_EventAreaStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventAreaRewardStageClearOK:
                    ProcessReceivedMessage_CG_RequestEventAreaRewardStageClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_EventStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Free_EventStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_EventStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Free_EventStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_EventStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Free_EventStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventExchangeOK:
                    ProcessReceivedMessage_CG_RequestEventExchangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventPlayCountRewardOK:
                    ProcessReceivedMessage_CG_RequestEventPlayCountRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_ListEventStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Main_ListEventStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_ListEventStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Main_ListEventStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_ListEventStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Main_ListEventStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_ListEventStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Free_ListEventStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_ListEventStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Free_ListEventStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Free_ListEventStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Free_ListEventStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_FinalBossStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Main_FinalBossStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_FinalBossStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Main_FinalBossStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Main_FinalBossStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Main_FinalBossStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_FinalBoss_EventFreeStage_StartOK:
                    ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_FinalBoss_EventFreeStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_FinalBoss_EventFreeStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Limited_EventStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Limited_EventStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Limited_EventStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Limited_EventStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Limited_EventStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Limited_EventStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_EventStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Boss_EventStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_EventStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Boss_EventStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Boss_EventStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Boss_EventStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Monthly_EventStage_StartOK:
                    ProcessReceivedMessage_CG_Request_Monthly_EventStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Monthly_EventStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Monthly_EventStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Monthly_EventStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Monthly_EventStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMonthlyStagePointRewardOK:
                    ProcessReceivedMessage_CG_RequestMonthlyStagePointRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_ChallengeBoss_EventStage_StartOK:
                    ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_ChallengeBoss_EventStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_ChallengeBoss_EventStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_ChallengeBoss_EventStage_InfoOK:
                    ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_InfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_ChallengeBoss_Event_Point_RewardOK:
                    ProcessReceivedMessage_CG_Request_ChallengeBoss_Event_Point_RewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Training_Stage_InfoOK:
                    ProcessReceivedMessage_CG_Request_Training_Stage_InfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Training_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_Training_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Training_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_Training_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Training_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_Training_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Training_Stage_OpenOK:
                    ProcessReceivedMessage_CG_Request_Training_Stage_OpenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_Training_Stage_RefreshOK:
                    ProcessReceivedMessage_CG_Request_Training_Stage_RefreshOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeekStageGaugeRewardOK:
                    ProcessReceivedMessage_CG_RequestWeekStageGaugeRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestIngameBattleStartOK:
                    ProcessReceivedMessage_CG_RequestIngameBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestStageEndLogOK:
                    ProcessReceivedMessage_CG_RequestStageEndLogOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_SingleSiege_ExtraStage_StartOK:
                    ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_SingleSiege_ExtraStage_ClearOK:
                    ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_SingleSiege_ExtraStage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_FinalBoss_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_FinalBoss_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_FinalBoss_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_FinalBoss_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_FinalBoss_Stage_ContinueOK:
                    ProcessReceivedMessage_CG_Request_FinalBoss_Stage_ContinueOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_FinalBoss_Season_InfoOK:
                    ProcessReceivedMessage_CG_Request_FinalBoss_Season_InfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_FinalBoss_Season_Rank_InfoOK:
                    ProcessReceivedMessage_CG_Request_FinalBoss_Season_Rank_InfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildBoss_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_GuildBoss_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildBoss_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_GuildBoss_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildBoss_Lobby_InfoOK:
                    ProcessReceivedMessage_CG_Request_GuildBoss_Lobby_InfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildBoss_Rank_InfoOK:
                    ProcessReceivedMessage_CG_Request_GuildBoss_Rank_InfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildBoss_LastWeek_Rank_InfoOK:
                    ProcessReceivedMessage_CG_Request_GuildBoss_LastWeek_Rank_InfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildBoss_Time_RefreshOK:
                    ProcessReceivedMessage_CG_Request_GuildBoss_Time_RefreshOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMailListOK:
                    ProcessReceivedMessage_CG_RequestMailListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMailConfirmOK:
                    ProcessReceivedMessage_CG_RequestMailConfirmOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMailConfirmAllOK:
                    ProcessReceivedMessage_CG_RequestMailConfirmAllOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMailHistoryListOK:
                    ProcessReceivedMessage_CG_RequestMailHistoryListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMailRecentlyHistoryListOK:
                    ProcessReceivedMessage_CG_RequestMailRecentlyHistoryListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendMailListOK:
                    ProcessReceivedMessage_CG_RequestFriendMailListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendMailConfirmOK:
                    ProcessReceivedMessage_CG_RequestFriendMailConfirmOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendMailConfirmAllOK:
                    ProcessReceivedMessage_CG_RequestFriendMailConfirmAllOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestNoticeMailRewardOK:
                    ProcessReceivedMessage_CG_RequestNoticeMailRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPackageMailListOK:
                    ProcessReceivedMessage_CG_RequestPackageMailListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPackageMailGetOK:
                    ProcessReceivedMessage_CG_RequestPackageMailGetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPackageMailHistoryListOK:
                    ProcessReceivedMessage_CG_RequestPackageMailHistoryListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLevelUpPackageRewardOK:
                    ProcessReceivedMessage_CG_RequestLevelUpPackageRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLevelUpPackageRewardAllOK:
                    ProcessReceivedMessage_CG_RequestLevelUpPackageRewardAllOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAttendancePackageRewardOK:
                    ProcessReceivedMessage_CG_RequestAttendancePackageRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAttendancePackageRewardAllOK:
                    ProcessReceivedMessage_CG_RequestAttendancePackageRewardAllOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMailADRewardOK:
                    ProcessReceivedMessage_CG_RequestMailADRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemInventoryBuyOK:
                    ProcessReceivedMessage_CG_RequestItemInventoryBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeaponInventoryBuyOK:
                    ProcessReceivedMessage_CG_RequestWeaponInventoryBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeekStageKeyBuyOK:
                    ProcessReceivedMessage_CG_RequestWeekStageKeyBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDiaShopInfoOK:
                    ProcessReceivedMessage_CG_RequestDiaShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDiaShopBuyOK:
                    ProcessReceivedMessage_CG_RequestDiaShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGambleShopBuyOK:
                    ProcessReceivedMessage_CG_RequestGambleShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemGambleShopInfoOK:
                    ProcessReceivedMessage_CG_RequestItemGambleShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemGambleShopBuyOK:
                    ProcessReceivedMessage_CG_RequestItemGambleShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRandomShopBuyOK:
                    ProcessReceivedMessage_CG_RequestRandomShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRandomShopRefreshOK:
                    ProcessReceivedMessage_CG_RequestRandomShopRefreshOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRandomShopInfoOK:
                    ProcessReceivedMessage_CG_RequestRandomShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointShopInfoOK:
                    ProcessReceivedMessage_CG_RequestBasePointShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointShopBuyOK:
                    ProcessReceivedMessage_CG_RequestBasePointShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpShopInfoOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpShopBuyOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCoinShopInfoOK:
                    ProcessReceivedMessage_CG_RequestCoinShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCoinShopBuyOK:
                    ProcessReceivedMessage_CG_RequestCoinShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCoinShopDailyBuyOK:
                    ProcessReceivedMessage_CG_RequestCoinShopDailyBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeShopInfoOK:
                    ProcessReceivedMessage_CG_RequestCostumeShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeShopBuyOK:
                    ProcessReceivedMessage_CG_RequestCostumeShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendPointShopInfoOK:
                    ProcessReceivedMessage_CG_RequestFriendPointShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendPointShopBuyOK:
                    ProcessReceivedMessage_CG_RequestFriendPointShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCommonItemSellOK:
                    ProcessReceivedMessage_CG_RequestCommonItemSellOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCommonItemRemoveOK:
                    ProcessReceivedMessage_CG_RequestCommonItemRemoveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPackageShopInfoOK:
                    ProcessReceivedMessage_CG_RequestPackageShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGambleShopInfoOK:
                    ProcessReceivedMessage_CG_RequestGambleShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestADRouletteRewardOK:
                    ProcessReceivedMessage_CG_RequestADRouletteRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRandomShopVisitRewardOK:
                    ProcessReceivedMessage_CG_RequestRandomShopVisitRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRandomShopScheduleInfoOK:
                    ProcessReceivedMessage_CG_RequestRandomShopScheduleInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPackageBuyOK:
                    ProcessReceivedMessage_CG_RequestPackageBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBuyDiaOK:
                    ProcessReceivedMessage_CG_RequestBuyDiaOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBuyGoldOK:
                    ProcessReceivedMessage_CG_RequestBuyGoldOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBuyStaminaOK:
                    ProcessReceivedMessage_CG_RequestBuyStaminaOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildShopInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildShopBuyOK:
                    ProcessReceivedMessage_CG_RequestGuildShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointShopResetOK:
                    ProcessReceivedMessage_CG_RequestBasePointShopResetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpShopResetOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopResetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCostumeShopPackageBuyOK:
                    ProcessReceivedMessage_CG_RequestCostumeShopPackageBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFinalBossShopInfoOK:
                    ProcessReceivedMessage_CG_RequestFinalBossShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFinalBossShopBuyOK:
                    ProcessReceivedMessage_CG_RequestFinalBossShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventCollaborationCoinShopInfoOK:
                    ProcessReceivedMessage_CG_RequestEventCollaborationCoinShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventCollaborationCoinShopBuyOK:
                    ProcessReceivedMessage_CG_RequestEventCollaborationCoinShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildShopResetOK:
                    ProcessReceivedMessage_CG_RequestGuildShopResetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCoinShopOnceBuyOK:
                    ProcessReceivedMessage_CG_RequestCoinShopOnceBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBingoGambleShopInfoOK:
                    ProcessReceivedMessage_CG_RequestBingoGambleShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBingoGambleShopResetOK:
                    ProcessReceivedMessage_CG_RequestBingoGambleShopResetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBingoGambleShopRewardOK:
                    ProcessReceivedMessage_CG_RequestBingoGambleShopRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDiaShopPackageBuyOK:
                    ProcessReceivedMessage_CG_RequestDiaShopPackageBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGambleChoiceShopBuyOK:
                    ProcessReceivedMessage_CG_RequestGambleChoiceShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFreePackageRewardOK:
                    ProcessReceivedMessage_CG_RequestFreePackageRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPackageMissionCloseOK:
                    ProcessReceivedMessage_CG_RequestPackageMissionCloseOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMissionProgressOK:
                    ProcessReceivedMessage_CG_RequestMissionProgressOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMissionClearOK:
                    ProcessReceivedMessage_CG_RequestMissionClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMissionEventClearOK:
                    ProcessReceivedMessage_CG_RequestMissionEventClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestMissionGetAchievePointRewardOK:
                    ProcessReceivedMessage_CG_RequestMissionGetAchievePointRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestQuestStartOK:
                    ProcessReceivedMessage_CG_RequestQuestStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestQuestProgressOK:
                    ProcessReceivedMessage_CG_RequestQuestProgressOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestQuestClearOK:
                    ProcessReceivedMessage_CG_RequestQuestClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestQuestRemoveOK:
                    ProcessReceivedMessage_CG_RequestQuestRemoveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestNetmarbleQuestAchieveOK:
                    ProcessReceivedMessage_CG_RequestNetmarbleQuestAchieveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestNetmarbleQuestRewardOK:
                    ProcessReceivedMessage_CG_RequestNetmarbleQuestRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDirectSelectorRewardOK:
                    ProcessReceivedMessage_CG_RequestDirectSelectorRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestQuestChapterClearOK:
                    ProcessReceivedMessage_CG_RequestQuestChapterClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventQuestClearOK:
                    ProcessReceivedMessage_CG_RequestEventQuestClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAnotherQuestClearOK:
                    ProcessReceivedMessage_CG_RequestAnotherQuestClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestQuestGuideListAllClearRewardOK:
                    ProcessReceivedMessage_CG_RequestQuestGuideListAllClearRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyVRSearchOK:
                    ProcessReceivedMessage_CG_RequestLobbyVRSearchOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyVRHelbramOK:
                    ProcessReceivedMessage_CG_RequestLobbyVRHelbramOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyNpcSkinOK:
                    ProcessReceivedMessage_CG_RequestLobbyNpcSkinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyNpcGiftOK:
                    ProcessReceivedMessage_CG_RequestLobbyNpcGiftOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyKingAmberOK:
                    ProcessReceivedMessage_CG_RequestLobbyKingAmberOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyDropInteractiveOpenOK:
                    ProcessReceivedMessage_CG_RequestLobbyDropInteractiveOpenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyUniqueInteractiveOpenOK:
                    ProcessReceivedMessage_CG_RequestLobbyUniqueInteractiveOpenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyNpcTalkInfoOK:
                    ProcessReceivedMessage_CG_RequestLobbyNpcTalkInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyNpcTalkChoiceOK:
                    ProcessReceivedMessage_CG_RequestLobbyNpcTalkChoiceOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyBarrelOK:
                    ProcessReceivedMessage_CG_RequestLobbyBarrelOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyBarrelRefillOK:
                    ProcessReceivedMessage_CG_RequestLobbyBarrelRefillOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyCleanTableOK:
                    ProcessReceivedMessage_CG_RequestLobbyCleanTableOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyServeBeerOK:
                    ProcessReceivedMessage_CG_RequestLobbyServeBeerOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyPlayJukeboxOK:
                    ProcessReceivedMessage_CG_RequestLobbyPlayJukeboxOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyElizabethTouchOK:
                    ProcessReceivedMessage_CG_RequestLobbyElizabethTouchOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyHawkAngerOK:
                    ProcessReceivedMessage_CG_RequestLobbyHawkAngerOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAttendanceRewardOK:
                    ProcessReceivedMessage_CG_RequestAttendanceRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAttendanceEventRewardOK:
                    ProcessReceivedMessage_CG_RequestAttendanceEventRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCookingStartOK:
                    ProcessReceivedMessage_CG_RequestCookingStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRecipeActiveOK:
                    ProcessReceivedMessage_CG_RequestRecipeActiveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCookingRecipeOrderInfoOK:
                    ProcessReceivedMessage_CG_RequestCookingRecipeOrderInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCookingRecipeOrderOK:
                    ProcessReceivedMessage_CG_RequestCookingRecipeOrderOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCookingRecipeDisorderOK:
                    ProcessReceivedMessage_CG_RequestCookingRecipeDisorderOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCookingRecipeCollectOK:
                    ProcessReceivedMessage_CG_RequestCookingRecipeCollectOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCookingRecipeCollectOneSlotOK:
                    ProcessReceivedMessage_CG_RequestCookingRecipeCollectOneSlotOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestCookingUseCookingBuffOK:
                    ProcessReceivedMessage_CG_RequestCookingUseCookingBuffOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuestInfoOK:
                    ProcessReceivedMessage_CG_RequestGuestInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuestChangeOK:
                    ProcessReceivedMessage_CG_RequestGuestChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuestChangeTargetOK:
                    ProcessReceivedMessage_CG_RequestGuestChangeTargetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuestTalkOK:
                    ProcessReceivedMessage_CG_RequestGuestTalkOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuestGiftOK:
                    ProcessReceivedMessage_CG_RequestGuestGiftOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBirthdayNpcInfoOK:
                    ProcessReceivedMessage_CG_RequestBirthdayNpcInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRestRewardOK:
                    ProcessReceivedMessage_CG_RequestRestRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAttendanceFortuneEventRewardOK:
                    ProcessReceivedMessage_CG_RequestAttendanceFortuneEventRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointGoldDonationOK:
                    ProcessReceivedMessage_CG_RequestBasePointGoldDonationOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointSetTriggerOK:
                    ProcessReceivedMessage_CG_RequestBasePointSetTriggerOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointDropInteractiveOpenOK:
                    ProcessReceivedMessage_CG_RequestBasePointDropInteractiveOpenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointUniqueInteractiveOpenOK:
                    ProcessReceivedMessage_CG_RequestBasePointUniqueInteractiveOpenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointDailyRewardOK:
                    ProcessReceivedMessage_CG_RequestBasePointDailyRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointDonationEventRewardOK:
                    ProcessReceivedMessage_CG_RequestBasePointDonationEventRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointDonationInfoOK:
                    ProcessReceivedMessage_CG_RequestBasePointDonationInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBasePointEventGoldDonationOK:
                    ProcessReceivedMessage_CG_RequestBasePointEventGoldDonationOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventBasepointInfoOK:
                    ProcessReceivedMessage_CG_RequestEventBasepointInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyDestroyInvite:
                    ProcessReceivedMessage_GC_NotifyDestroyInvite(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroySetInviteOptionOK:
                    ProcessReceivedMessage_CG_RequestDestroySetInviteOptionOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyGetUserLoginListOK:
                    ProcessReceivedMessage_CG_RequestDestroyGetUserLoginListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyGetFriendLoginListOK:
                    ProcessReceivedMessage_CG_RequestDestroyGetFriendLoginListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyGetGuildLoginListOK:
                    ProcessReceivedMessage_CG_RequestDestroyGetGuildLoginListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyGetReceivedInvitationListOK:
                    ProcessReceivedMessage_CG_RequestDestroyGetReceivedInvitationListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyInviteOK:
                    ProcessReceivedMessage_CG_RequestDestroyInviteOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyRemoveInvitationOK:
                    ProcessReceivedMessage_CG_RequestDestroyRemoveInvitationOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyRemoveJoinInfoOK:
                    ProcessReceivedMessage_CG_RequestDestroyRemoveJoinInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyCreateOK:
                    ProcessReceivedMessage_CG_RequestDestroyCreateOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyStartOK:
                    ProcessReceivedMessage_CG_RequestDestroyStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyBattleStartOK:
                    ProcessReceivedMessage_CG_RequestDestroyBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyJoinOK:
                    ProcessReceivedMessage_CG_RequestDestroyJoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyClearOK:
                    ProcessReceivedMessage_CG_RequestDestroyClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyReJoinOK:
                    ProcessReceivedMessage_CG_RequestDestroyReJoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyRemoveOK:
                    ProcessReceivedMessage_CG_RequestDestroyRemoveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyBattleEndOK:
                    ProcessReceivedMessage_CG_RequestDestroyBattleEndOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyInviteAIOK:
                    ProcessReceivedMessage_CG_RequestDestroyInviteAIOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestDestroyKickOutAIOK:
                    ProcessReceivedMessage_CG_RequestDestroyKickOutAIOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventDestroyCreateOK:
                    ProcessReceivedMessage_CG_RequestEventDestroyCreateOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventDestroyClearOK:
                    ProcessReceivedMessage_CG_RequestEventDestroyClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventDestroyStartOK:
                    ProcessReceivedMessage_CG_RequestEventDestroyStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventDestroyRemoveOK:
                    ProcessReceivedMessage_CG_RequestEventDestroyRemoveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventChallengeDestroyCreateOK:
                    ProcessReceivedMessage_CG_RequestEventChallengeDestroyCreateOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventChallengeDestroyStartOK:
                    ProcessReceivedMessage_CG_RequestEventChallengeDestroyStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventChallengeDestroyClearOK:
                    ProcessReceivedMessage_CG_RequestEventChallengeDestroyClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventChallengeDestroyPointRefreshOK:
                    ProcessReceivedMessage_CG_RequestEventChallengeDestroyPointRefreshOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventChallengeDestroyUserRewardOK:
                    ProcessReceivedMessage_CG_RequestEventChallengeDestroyUserRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventChallengeDestroyWorldRewardOK:
                    ProcessReceivedMessage_CG_RequestEventChallengeDestroyWorldRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendListOK:
                    ProcessReceivedMessage_CG_RequestFriendListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendGuildInfoOK:
                    ProcessReceivedMessage_CG_RequestFriendGuildInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendApplySendListOK:
                    ProcessReceivedMessage_CG_RequestFriendApplySendListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendApplyReceiveListOK:
                    ProcessReceivedMessage_CG_RequestFriendApplyReceiveListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendApplySendOK:
                    ProcessReceivedMessage_CG_RequestFriendApplySendOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendApplyRejectOK:
                    ProcessReceivedMessage_CG_RequestFriendApplyRejectOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendApplyReceiveAcceptOK:
                    ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendApplyReceiveAcceptListOK:
                    ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendApplyReceiveRefuseOK:
                    ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendApplyReceiveRefuseListOK:
                    ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendRemoveOK:
                    ProcessReceivedMessage_CG_RequestFriendRemoveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendSearchOK:
                    ProcessReceivedMessage_CG_RequestFriendSearchOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendVisitOK:
                    ProcessReceivedMessage_CG_RequestFriendVisitOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendPointSendOK:
                    ProcessReceivedMessage_CG_RequestFriendPointSendOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendPointSendAllOK:
                    ProcessReceivedMessage_CG_RequestFriendPointSendAllOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendLobbyInfoOK:
                    ProcessReceivedMessage_CG_RequestFriendLobbyInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendCookingRecipeInfoOK:
                    ProcessReceivedMessage_CG_RequestFriendCookingRecipeInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendCookingEatOK:
                    ProcessReceivedMessage_CG_RequestFriendCookingEatOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendCookingEatFriendListOK:
                    ProcessReceivedMessage_CG_RequestFriendCookingEatFriendListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildRecommendListOK:
                    ProcessReceivedMessage_CG_RequestGuildRecommendListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildInfoWithMemberListOK:
                    ProcessReceivedMessage_CG_RequestGuildInfoWithMemberListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildSearchByNameOK:
                    ProcessReceivedMessage_CG_RequestGuildSearchByNameOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildCreateOK:
                    ProcessReceivedMessage_CG_RequestGuildCreateOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildDisbandOK:
                    ProcessReceivedMessage_CG_RequestGuildDisbandOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildApplicantListOK:
                    ProcessReceivedMessage_CG_RequestGuildApplicantListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildApplyOK:
                    ProcessReceivedMessage_CG_RequestGuildApplyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildReturnApplicationOK:
                    ProcessReceivedMessage_CG_RequestGuildReturnApplicationOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildAcceptApplicantOK:
                    ProcessReceivedMessage_CG_RequestGuildAcceptApplicantOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildRejectApplicantOK:
                    ProcessReceivedMessage_CG_RequestGuildRejectApplicantOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildLevelUpOK:
                    ProcessReceivedMessage_CG_RequestGuildLevelUpOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildChangeNameOK:
                    ProcessReceivedMessage_CG_RequestGuildChangeNameOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildChangeBoardOK:
                    ProcessReceivedMessage_CG_RequestGuildChangeBoardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildChangeMasterOK:
                    ProcessReceivedMessage_CG_RequestGuildChangeMasterOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildChangeMemberGradeOK:
                    ProcessReceivedMessage_CG_RequestGuildChangeMemberGradeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildKickOutMemberOK:
                    ProcessReceivedMessage_CG_RequestGuildKickOutMemberOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildLeaveOK:
                    ProcessReceivedMessage_CG_RequestGuildLeaveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildRoomInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildRoomInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildAttendanceOK:
                    ProcessReceivedMessage_CG_RequestGuildAttendanceOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildAttendanceRewardOK:
                    ProcessReceivedMessage_CG_RequestGuildAttendanceRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildUserInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildUserInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildAttendanceStatusOK:
                    ProcessReceivedMessage_CG_RequestGuildAttendanceStatusOK(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyGuildKickout:
                    ProcessReceivedMessage_GC_NotifyGuildKickout(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildDonationOK:
                    ProcessReceivedMessage_CG_RequestGuildDonationOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildDonationInitializeOK:
                    ProcessReceivedMessage_CG_RequestGuildDonationInitializeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildMissionInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildMissionInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildMissionRewardOK:
                    ProcessReceivedMessage_CG_RequestGuildMissionRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyGuildAcceptApplicantOK:
                    ProcessReceivedMessage_GC_NotifyGuildAcceptApplicantOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildDonationInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildDonationInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildSkillInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildSkillInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildSkillLevelUpOK:
                    ProcessReceivedMessage_CG_RequestGuildSkillLevelUpOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildSkillUseOK:
                    ProcessReceivedMessage_CG_RequestGuildSkillUseOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildSkillDisuseOK:
                    ProcessReceivedMessage_CG_RequestGuildSkillDisuseOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildSkillUseInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildSkillUseInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildMemberRankPointRewardOK:
                    ProcessReceivedMessage_CG_RequestGuildMemberRankPointRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildBattlePointRegisterOK:
                    ProcessReceivedMessage_CG_RequestGuildBattlePointRegisterOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildBattlePointMemeberRankListOK:
                    ProcessReceivedMessage_CG_RequestGuildBattlePointMemeberRankListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildBattlePointGuildRankListOK:
                    ProcessReceivedMessage_CG_RequestGuildBattlePointGuildRankListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildBattlePointUserRankListOK:
                    ProcessReceivedMessage_CG_RequestGuildBattlePointUserRankListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestAPRechargeByUseItemOK:
                    ProcessReceivedMessage_CG_RequestAPRechargeByUseItemOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWeekStageKeyOpenOK:
                    ProcessReceivedMessage_CG_RequestWeekStageKeyOpenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFoodBuffAutoUseOnOffOK:
                    ProcessReceivedMessage_CG_RequestFoodBuffAutoUseOnOffOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemUseRankExpOK:
                    ProcessReceivedMessage_CG_RequestItemUseRankExpOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemUseBoxOpenOK:
                    ProcessReceivedMessage_CG_RequestItemUseBoxOpenOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemUseRecipeExpOK:
                    ProcessReceivedMessage_CG_RequestItemUseRecipeExpOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemUseWeeklyKeyBoxOK:
                    ProcessReceivedMessage_CG_RequestItemUseWeeklyKeyBoxOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemUseWeaponTicketOK:
                    ProcessReceivedMessage_CG_RequestItemUseWeaponTicketOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestItemUseMusicOK:
                    ProcessReceivedMessage_CG_RequestItemUseMusicOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTutorialAddStepOK:
                    ProcessReceivedMessage_CG_RequestTutorialAddStepOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTutorialSetFlagOK:
                    ProcessReceivedMessage_CG_RequestTutorialSetFlagOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTutorialHeroFlagOK:
                    ProcessReceivedMessage_CG_RequestTutorialHeroFlagOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTutorialGambleShopBuyOK:
                    ProcessReceivedMessage_CG_RequestTutorialGambleShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBattleTutorialInfoOK:
                    ProcessReceivedMessage_CG_RequestBattleTutorialInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBattleTutorialSetOK:
                    ProcessReceivedMessage_CG_RequestBattleTutorialSetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchCreateOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchCreateOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchFriendListOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchFriendListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchInviteOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchInviteOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchReceivedInviteListOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchReceivedInviteListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchInviteAcceptOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchInviteAcceptOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchInviteRejectOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchInviteRejectOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchStartOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchBattleStartOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchClearOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchExitOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchExitOK(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyFriendlyMatchInvite:
                    ProcessReceivedMessage_GC_NotifyFriendlyMatchInvite(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestFriendlyMatchSetInviteOptionOK:
                    ProcessReceivedMessage_CG_RequestFriendlyMatchSetInviteOptionOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventMissionGetAchievePointRewardOK:
                    ProcessReceivedMessage_CG_RequestEventMissionGetAchievePointRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventMissionCompleteRewardOK:
                    ProcessReceivedMessage_CG_RequestEventMissionCompleteRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventMissionInfoOk:
                    ProcessReceivedMessage_CG_RequestEventMissionInfoOk(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyHousingShopInfoOK:
                    ProcessReceivedMessage_CG_RequestLobbyHousingShopInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyHousingShopBuyOK:
                    ProcessReceivedMessage_CG_RequestLobbyHousingShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestLobbyFurnitureRegistOK:
                    ProcessReceivedMessage_CG_RequestLobbyFurnitureRegistOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestUserMusicEditOK:
                    ProcessReceivedMessage_CG_RequestUserMusicEditOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventSeasonPassInfoOK:
                    ProcessReceivedMessage_CG_RequestEventSeasonPassInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventSeasonPassRankUpRewardOK:
                    ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventSeasonPassRankUpRewardAllOK:
                    ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardAllOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventSeasonPassRankBuyOK:
                    ProcessReceivedMessage_CG_RequestEventSeasonPassRankBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestStepupGambleShopBuyOK:
                    ProcessReceivedMessage_CG_RequestStepupGambleShopBuyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestStepupGambleMileageRewardOK:
                    ProcessReceivedMessage_CG_RequestStepupGambleMileageRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWestSideServerInfo_RandomOK:
                    ProcessReceivedMessage_CG_RequestWestSideServerInfo_RandomOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWestSideServerInfo_FixedOK:
                    ProcessReceivedMessage_CG_RequestWestSideServerInfo_FixedOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWestSideServerInfo_RecommandOK:
                    ProcessReceivedMessage_CG_RequestWestSideServerInfo_RecommandOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWestSide_PlayerInfoOK:
                    ProcessReceivedMessage_CG_RequestWestSide_PlayerInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWestSide_PlayerteamInfoOK:
                    ProcessReceivedMessage_CG_RequestWestSide_PlayerteamInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWestSide_PlayerGuildInfoOK:
                    ProcessReceivedMessage_CG_RequestWestSide_PlayerGuildInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestWorldChattingChannelOK:
                    ProcessReceivedMessage_CG_RequestWorldChattingChannelOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLobbyInfoOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLobbyInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpJoinOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpJoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpTopRankerListOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpTopRankerListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLastRankerListOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpMatchingOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpMatchingOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpBattleStartOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpBattleEndOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpBattleEndOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpRollbackOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpRollbackOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpIngameBattleStartOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpIngameBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLowerLobbyInfoOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerLobbyInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLowerJoinOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerJoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLowerTopRankerListOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerTopRankerListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLowerMatchingOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerMatchingOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLowerBattleStartOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLowerBattleEndOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerBattleEndOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpAllInfoOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpAllInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLastRankerBattleInfoOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLastRankerBattleStartOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLowerRollbackOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerRollbackOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimePvpLowerIngameBattleStartOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionLobbyInfoOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionLobbyInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionJoinOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionJoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionTopRankerListOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionTopRankerListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionMatchingOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionMatchingOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionBattleStartOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionBattleEndOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionBattleEndOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionIngameBattleStartOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionIngameBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionHistoryOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionHistoryOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionChangeMatchingListOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionChangeMatchingListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK:
                    ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPvpSeasonInfoOK:
                    ProcessReceivedMessage_CG_RequestPvpSeasonInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPvpSeasonHistoryOK:
                    ProcessReceivedMessage_CG_RequestPvpSeasonHistoryOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventExchangeInfoOK:
                    ProcessReceivedMessage_CG_RequestEventExchangeInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventExchangeBoxGachaInfoOK:
                    ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventExchangeBoxGachaPickupOK:
                    ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaPickupOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventExchangeBoxGachaResetOK:
                    ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaResetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventPaybackRewardOK:
                    ProcessReceivedMessage_CG_RequestEventPaybackRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarCreateOK:
                    ProcessReceivedMessage_CG_RequestBossWarCreateOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarJoinOK:
                    ProcessReceivedMessage_CG_RequestBossWarJoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarStartOK:
                    ProcessReceivedMessage_CG_RequestBossWarStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarBattleStartOK:
                    ProcessReceivedMessage_CG_RequestBossWarBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarBattleEndOK:
                    ProcessReceivedMessage_CG_RequestBossWarBattleEndOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarOnlineFriendListOK:
                    ProcessReceivedMessage_CG_RequestBossWarOnlineFriendListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarOnlineGuildMemberListOK:
                    ProcessReceivedMessage_CG_RequestBossWarOnlineGuildMemberListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarOnlineUserRankRangeListOK:
                    ProcessReceivedMessage_CG_RequestBossWarOnlineUserRankRangeListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarInvitationReceiveListOK:
                    ProcessReceivedMessage_CG_RequestBossWarInvitationReceiveListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarRemoveInvitationOK:
                    ProcessReceivedMessage_CG_RequestBossWarRemoveInvitationOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarInviteOK:
                    ProcessReceivedMessage_CG_RequestBossWarInviteOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarKickOutOK:
                    ProcessReceivedMessage_CG_RequestBossWarKickOutOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarRewardOK:
                    ProcessReceivedMessage_CG_RequestBossWarRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarReadyOK:
                    ProcessReceivedMessage_CG_RequestBossWarReadyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarReturnReadyOK:
                    ProcessReceivedMessage_CG_RequestBossWarReturnReadyOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarSyncOK:
                    ProcessReceivedMessage_CG_RequestBossWarSyncOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarBattleSyncOK:
                    ProcessReceivedMessage_CG_RequestBossWarBattleSyncOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestBossWarLeaveOK:
                    ProcessReceivedMessage_CG_RequestBossWarLeaveOK(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyBossWarInvite:
                    ProcessReceivedMessage_GC_NotifyBossWarInvite(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyBossWarMemberJoinUpdate:
                    ProcessReceivedMessage_GC_NotifyBossWarMemberJoinUpdate(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyBossWarGameStart:
                    ProcessReceivedMessage_GC_NotifyBossWarGameStart(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyBossWarWaitReadyStartOK:
                    ProcessReceivedMessage_GC_NotifyBossWarWaitReadyStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyBossWarRewardAggregationOK:
                    ProcessReceivedMessage_GC_NotifyBossWarRewardAggregationOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventSnsShareProgressOK:
                    ProcessReceivedMessage_CG_RequestEventSnsShareProgressOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventSnsShareRewardOK:
                    ProcessReceivedMessage_CG_RequestEventSnsShareRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGagueEventInfoOK:
                    ProcessReceivedMessage_CG_RequestGagueEventInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGagueEventChargeOK:
                    ProcessReceivedMessage_CG_RequestGagueEventChargeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGagueEventRewardOK:
                    ProcessReceivedMessage_CG_RequestGagueEventRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGagueEventResetOK:
                    ProcessReceivedMessage_CG_RequestGagueEventResetOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventLadderRewardOK:
                    ProcessReceivedMessage_CG_RequestEventLadderRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventLobbyGiftRewardOK:
                    ProcessReceivedMessage_CG_RequestEventLobbyGiftRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventTimeMissionInfoOK:
                    ProcessReceivedMessage_CG_RequestEventTimeMissionInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventTimeMissionStartOK:
                    ProcessReceivedMessage_CG_RequestEventTimeMissionStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestEventLobbyDecorationRewardOK:
                    ProcessReceivedMessage_CG_RequestEventLobbyDecorationRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestRegistPlayTitleOK:
                    ProcessReceivedMessage_CG_RequestRegistPlayTitleOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestPlayTitleMissionRewardOK:
                    ProcessReceivedMessage_CG_RequestPlayTitleMissionRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentListOK:
                    ProcessReceivedMessage_CG_RequestTournamentListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentProgressInfoOK:
                    ProcessReceivedMessage_CG_RequestTournamentProgressInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentResultInfoOK:
                    ProcessReceivedMessage_CG_RequestTournamentResultInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentMatchJoinOK:
                    ProcessReceivedMessage_CG_RequestTournamentMatchJoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentMatchBattleStartOK:
                    ProcessReceivedMessage_CG_RequestTournamentMatchBattleStartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentMatchBattleEndOK:
                    ProcessReceivedMessage_CG_RequestTournamentMatchBattleEndOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentMatchExitOK:
                    ProcessReceivedMessage_CG_RequestTournamentMatchExitOK(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyTournamentProgressChange:
                    ProcessReceivedMessage_GC_NotifyTournamentProgressChange(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentRewardOK:
                    ProcessReceivedMessage_CG_RequestTournamentRewardOK(__msg, pa, hostTag, remote);
                    break;
                case Common.GC_NotifyTournamentMatchSuspend:
                    ProcessReceivedMessage_GC_NotifyTournamentMatchSuspend(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentPlayerTeamSlotChangeOK:
                    ProcessReceivedMessage_CG_RequestTournamentPlayerTeamSlotChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentPlayerTeamInfoOK:
                    ProcessReceivedMessage_CG_RequestTournamentPlayerTeamInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentCheerOK:
                    ProcessReceivedMessage_CG_RequestTournamentCheerOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentCheerListOK:
                    ProcessReceivedMessage_CG_RequestTournamentCheerListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentWatcherJoinOK:
                    ProcessReceivedMessage_CG_RequestTournamentWatcherJoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentWatcherExitOK:
                    ProcessReceivedMessage_CG_RequestTournamentWatcherExitOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentMatchPlayInfoOK:
                    ProcessReceivedMessage_CG_RequestTournamentMatchPlayInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestTournamentReplayInfoOK:
                    ProcessReceivedMessage_CG_RequestTournamentReplayInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarLobbyInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildWarLobbyInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarRankInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildWarRankInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarVersusRecordInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildWarVersusRecordInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarGuildMemberListOK:
                    ProcessReceivedMessage_CG_RequestGuildWarGuildMemberListOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarWorldMapInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildWarWorldMapInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarAttackSquadChangeOK:
                    ProcessReceivedMessage_CG_RequestGuildWarAttackSquadChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarDefenceTeamChangeOK:
                    ProcessReceivedMessage_CG_RequestGuildWarDefenceTeamChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarRegionBonusScoreChangeOK:
                    ProcessReceivedMessage_CG_RequestGuildWarRegionBonusScoreChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarAreaGuildMemberChangeOK:
                    ProcessReceivedMessage_CG_RequestGuildWarAreaGuildMemberChangeOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_RequestGuildWarBattleRecordInfoOK:
                    ProcessReceivedMessage_CG_RequestGuildWarBattleRecordInfoOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildWar_Stage_StartOK:
                    ProcessReceivedMessage_CG_Request_GuildWar_Stage_StartOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildWar_Stage_ClearOK:
                    ProcessReceivedMessage_CG_Request_GuildWar_Stage_ClearOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildWar_Stage_RejoinOK:
                    ProcessReceivedMessage_CG_Request_GuildWar_Stage_RejoinOK(__msg, pa, hostTag, remote);
                    break;
                case Common.CG_Request_GuildWar_Stage_HeroStatus_SyncOK:
                    ProcessReceivedMessage_CG_Request_GuildWar_Stage_HeroStatus_SyncOK(__msg, pa, hostTag, remote);
                    break;
                default:
                    goto __fail;
            }
            return true;
        __fail:
            {
                __msg.ReadOffset = orgReadOffset;
                return false;
            }
        }
        void ProcessReceivedMessage_CG_CommonCancel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string rmiName; SimpleCSharp.Marshaler.Read(__msg, out rmiName);
            SimpleCSharp.PacketError error; SimpleCSharp.Marshaler.Read(__msg, out error);
            SimpleCSharp.InvalidRequestType invalidRequestType; SimpleCSharp.Marshaler.Read(__msg, out invalidRequestType);
            core.PostCheckReadMessage(__msg, RmiName_CG_CommonCancel);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += rmiName.ToString() + ",";
                parameterString += error.ToString() + ",";
                parameterString += invalidRequestType.ToString() + ",";
                NotifyCallFromStub(Common.CG_CommonCancel, RmiName_CG_CommonCancel, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_CommonCancel;
                summary.rmiName = RmiName_CG_CommonCancel;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_CommonCancel(remote, ctx, rmiName, error, invalidRequestType);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_CommonCancel);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_CommonCancel;
                summary.rmiName = RmiName_CG_CommonCancel;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyUserLevelUp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyUserLevelUp);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyUserLevelUp, RmiName_GC_NotifyUserLevelUp, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyUserLevelUp;
                summary.rmiName = RmiName_GC_NotifyUserLevelUp;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyUserLevelUp(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyUserLevelUp);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyUserLevelUp;
                summary.rmiName = RmiName_GC_NotifyUserLevelUp;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_FrozenAssetCancel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_FrozenAssetCancel);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_FrozenAssetCancel, RmiName_CG_FrozenAssetCancel, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_FrozenAssetCancel;
                summary.rmiName = RmiName_CG_FrozenAssetCancel;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_FrozenAssetCancel(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_FrozenAssetCancel);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_FrozenAssetCancel;
                summary.rmiName = RmiName_CG_FrozenAssetCancel;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestChannelUserInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.ChannelUserInfo channelUserInfo; SimpleCSharp.Marshaler.Read(__msg, out channelUserInfo);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestChannelUserInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += channelUserInfo.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestChannelUserInfoOK, RmiName_CG_RequestChannelUserInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestChannelUserInfoOK;
                summary.rmiName = RmiName_CG_RequestChannelUserInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestChannelUserInfoOK(remote, ctx, channelUserInfo);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChannelUserInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestChannelUserInfoOK;
                summary.rmiName = RmiName_CG_RequestChannelUserInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestHeartBeatOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestHeartBeatOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestHeartBeatOK, RmiName_CG_RequestHeartBeatOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestHeartBeatOK;
                summary.rmiName = RmiName_CG_RequestHeartBeatOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestHeartBeatOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHeartBeatOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestHeartBeatOK;
                summary.rmiName = RmiName_CG_RequestHeartBeatOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestChangeNicknameOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string userNickname; SimpleCSharp.Marshaler.Read(__msg, out userNickname);
            int nicknameChangeCount; SimpleCSharp.Marshaler.Read(__msg, out nicknameChangeCount);
            int changeAvailableDateRemainSec; SimpleCSharp.Marshaler.Read(__msg, out changeAvailableDateRemainSec);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestChangeNicknameOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += userNickname.ToString() + ",";
                parameterString += nicknameChangeCount.ToString() + ",";
                parameterString += changeAvailableDateRemainSec.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestChangeNicknameOK, RmiName_CG_RequestChangeNicknameOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestChangeNicknameOK;
                summary.rmiName = RmiName_CG_RequestChangeNicknameOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestChangeNicknameOK(remote, ctx, userNickname, nicknameChangeCount, changeAvailableDateRemainSec);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChangeNicknameOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestChangeNicknameOK;
                summary.rmiName = RmiName_CG_RequestChangeNicknameOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestChangeWantToSayOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestChangeWantToSayOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestChangeWantToSayOK, RmiName_CG_RequestChangeWantToSayOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestChangeWantToSayOK;
                summary.rmiName = RmiName_CG_RequestChangeWantToSayOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestChangeWantToSayOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChangeWantToSayOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestChangeWantToSayOK;
                summary.rmiName = RmiName_CG_RequestChangeWantToSayOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestStageInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestStageInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStageInfoOK, RmiName_CG_RequestStageInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestStageInfoOK;
                summary.rmiName = RmiName_CG_RequestStageInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestStageInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStageInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestStageInfoOK;
                summary.rmiName = RmiName_CG_RequestStageInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTeamInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTeamInfoOK, RmiName_CG_RequestTeamInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTeamInfoOK;
                summary.rmiName = RmiName_CG_RequestTeamInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTeamInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTeamInfoOK;
                summary.rmiName = RmiName_CG_RequestTeamInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTeamSlotChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamSlotChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTeamSlotChangeOK, RmiName_CG_RequestTeamSlotChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTeamSlotChangeOK;
                summary.rmiName = RmiName_CG_RequestTeamSlotChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTeamSlotChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamSlotChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTeamSlotChangeOK;
                summary.rmiName = RmiName_CG_RequestTeamSlotChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTeamNameChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTeamNameChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTeamNameChangeOK, RmiName_CG_RequestTeamNameChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTeamNameChangeOK;
                summary.rmiName = RmiName_CG_RequestTeamNameChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTeamNameChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTeamNameChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTeamNameChangeOK;
                summary.rmiName = RmiName_CG_RequestTeamNameChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.LobbyInfo lobbyInfo; SimpleCSharp.Marshaler.Read(__msg, out lobbyInfo);
            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            List<SimpleCSharp.ItemResultInfo> deleteItemResultInfoList; SimpleCSharp.Marshaler.Read(__msg, out deleteItemResultInfoList);
            int remainResetTimeSEC; SimpleCSharp.Marshaler.Read(__msg, out remainResetTimeSEC);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += lobbyInfo.ToString() + ",";
                parameterString += missionResult.ToString() + ",";
                parameterString += deleteItemResultInfoList.ToString() + ",";
                parameterString += remainResetTimeSEC.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestLobbyInfoOK, RmiName_CG_RequestLobbyInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyInfoOK(remote, ctx, lobbyInfo, missionResult, deleteItemResultInfoList, remainResetTimeSEC);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.BasePointInfo basePointInfo; SimpleCSharp.Marshaler.Read(__msg, out basePointInfo);
            SimpleCSharp.BasePointRefreshInfo basePointRefreshInfo; SimpleCSharp.Marshaler.Read(__msg, out basePointRefreshInfo);
            List<SimpleCSharp.QuestProgressInfo> questProgressInfoList; SimpleCSharp.Marshaler.Read(__msg, out questProgressInfoList);
            List<SimpleCSharp.ArenaRealTimePvpLastRankerStatueInfo> pvpRankerStatueInfoList; SimpleCSharp.Marshaler.Read(__msg, out pvpRankerStatueInfoList);
            SimpleCSharp.PvpSeasonHistoryInfo pvpSeasonStatusInfo; SimpleCSharp.Marshaler.Read(__msg, out pvpSeasonStatusInfo);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += basePointInfo.ToString() + ",";
                parameterString += basePointRefreshInfo.ToString() + ",";
                parameterString += questProgressInfoList.ToString() + ",";
                parameterString += pvpRankerStatueInfoList.ToString() + ",";
                parameterString += pvpSeasonStatusInfo.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestBasePointInfoOK, RmiName_CG_RequestBasePointInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointInfoOK;
                summary.rmiName = RmiName_CG_RequestBasePointInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointInfoOK(remote, ctx, basePointInfo, basePointRefreshInfo, questProgressInfoList, pvpRankerStatueInfoList, pvpSeasonStatusInfo);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointInfoOK;
                summary.rmiName = RmiName_CG_RequestBasePointInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMercenaryListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            List<SimpleCSharp.MercenaryInfo> mercenaryInfoList; SimpleCSharp.Marshaler.Read(__msg, out mercenaryInfoList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMercenaryListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += mercenaryInfoList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestMercenaryListOK, RmiName_CG_RequestMercenaryListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMercenaryListOK;
                summary.rmiName = RmiName_CG_RequestMercenaryListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMercenaryListOK(remote, ctx, mercenaryInfoList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMercenaryListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMercenaryListOK;
                summary.rmiName = RmiName_CG_RequestMercenaryListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMercenaryInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMercenaryInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMercenaryInfoOK, RmiName_CG_RequestMercenaryInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMercenaryInfoOK;
                summary.rmiName = RmiName_CG_RequestMercenaryInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMercenaryInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMercenaryInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMercenaryInfoOK;
                summary.rmiName = RmiName_CG_RequestMercenaryInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildInfoOK, RmiName_CG_RequestGuildInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestChatStampUpdateBookmarkOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestChatStampUpdateBookmarkOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestChatStampUpdateBookmarkOK, RmiName_CG_RequestChatStampUpdateBookmarkOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestChatStampUpdateBookmarkOK;
                summary.rmiName = RmiName_CG_RequestChatStampUpdateBookmarkOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestChatStampUpdateBookmarkOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChatStampUpdateBookmarkOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestChatStampUpdateBookmarkOK;
                summary.rmiName = RmiName_CG_RequestChatStampUpdateBookmarkOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestChatStampUpdateQuickMessageOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestChatStampUpdateQuickMessageOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestChatStampUpdateQuickMessageOK, RmiName_CG_RequestChatStampUpdateQuickMessageOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestChatStampUpdateQuickMessageOK;
                summary.rmiName = RmiName_CG_RequestChatStampUpdateQuickMessageOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestChatStampUpdateQuickMessageOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestChatStampUpdateQuickMessageOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestChatStampUpdateQuickMessageOK;
                summary.rmiName = RmiName_CG_RequestChatStampUpdateQuickMessageOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMainSkinChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMainSkinChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMainSkinChangeOK, RmiName_CG_RequestMainSkinChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMainSkinChangeOK;
                summary.rmiName = RmiName_CG_RequestMainSkinChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMainSkinChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMainSkinChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMainSkinChangeOK;
                summary.rmiName = RmiName_CG_RequestMainSkinChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventListOK, RmiName_CG_RequestEventListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventListOK;
                summary.rmiName = RmiName_CG_RequestEventListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventListOK;
                summary.rmiName = RmiName_CG_RequestEventListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCheatEnterOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCheatEnterOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCheatEnterOK, RmiName_CG_RequestCheatEnterOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCheatEnterOK;
                summary.rmiName = RmiName_CG_RequestCheatEnterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCheatEnterOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCheatEnterOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCheatEnterOK;
                summary.rmiName = RmiName_CG_RequestCheatEnterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCheatStageClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCheatStageClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCheatStageClearOK, RmiName_CG_RequestCheatStageClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCheatStageClearOK;
                summary.rmiName = RmiName_CG_RequestCheatStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCheatStageClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCheatStageClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCheatStageClearOK;
                summary.rmiName = RmiName_CG_RequestCheatStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDllGetItemOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDllGetItemOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDllGetItemOK, RmiName_CG_RequestDllGetItemOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDllGetItemOK;
                summary.rmiName = RmiName_CG_RequestDllGetItemOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDllGetItemOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDllGetItemOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDllGetItemOK;
                summary.rmiName = RmiName_CG_RequestDllGetItemOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRecommendFriendUSNListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRecommendFriendUSNListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRecommendFriendUSNListOK, RmiName_CG_RequestRecommendFriendUSNListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRecommendFriendUSNListOK;
                summary.rmiName = RmiName_CG_RequestRecommendFriendUSNListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRecommendFriendUSNListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRecommendFriendUSNListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRecommendFriendUSNListOK;
                summary.rmiName = RmiName_CG_RequestRecommendFriendUSNListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDailyResetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDailyResetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDailyResetOK, RmiName_CG_RequestDailyResetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDailyResetOK;
                summary.rmiName = RmiName_CG_RequestDailyResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDailyResetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDailyResetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDailyResetOK;
                summary.rmiName = RmiName_CG_RequestDailyResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_NotifyMaintenance(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_NotifyMaintenance);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_NotifyMaintenance, RmiName_CG_NotifyMaintenance, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_NotifyMaintenance;
                summary.rmiName = RmiName_CG_NotifyMaintenance;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_NotifyMaintenance(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_NotifyMaintenance);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_NotifyMaintenance;
                summary.rmiName = RmiName_CG_NotifyMaintenance;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFrozenAssetRedeemOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFrozenAssetRedeemOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFrozenAssetRedeemOK, RmiName_CG_RequestFrozenAssetRedeemOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFrozenAssetRedeemOK;
                summary.rmiName = RmiName_CG_RequestFrozenAssetRedeemOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFrozenAssetRedeemOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFrozenAssetRedeemOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFrozenAssetRedeemOK;
                summary.rmiName = RmiName_CG_RequestFrozenAssetRedeemOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSecurityTokenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            string securityToken; SimpleCSharp.Marshaler.Read(__msg, out securityToken);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSecurityTokenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += securityToken.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestSecurityTokenOK, RmiName_CG_RequestSecurityTokenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSecurityTokenOK;
                summary.rmiName = RmiName_CG_RequestSecurityTokenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSecurityTokenOK(remote, ctx, securityToken);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSecurityTokenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSecurityTokenOK;
                summary.rmiName = RmiName_CG_RequestSecurityTokenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestNetmarbleAuthOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.NetmarbleAccountInfo accountInfo; SimpleCSharp.Marshaler.Read(__msg, out accountInfo);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestNetmarbleAuthOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += accountInfo.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestNetmarbleAuthOK, RmiName_CG_RequestNetmarbleAuthOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestNetmarbleAuthOK;
                summary.rmiName = RmiName_CG_RequestNetmarbleAuthOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestNetmarbleAuthOK(remote, ctx, accountInfo);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNetmarbleAuthOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestNetmarbleAuthOK;
                summary.rmiName = RmiName_CG_RequestNetmarbleAuthOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAuthenticateCreateOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.NetmarbleAccountInfo info; SimpleCSharp.Marshaler.Read(__msg, out info);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAuthenticateCreateOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += info.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestAuthenticateCreateOK, RmiName_CG_RequestAuthenticateCreateOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAuthenticateCreateOK;
                summary.rmiName = RmiName_CG_RequestAuthenticateCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAuthenticateCreateOK(remote, ctx, info);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAuthenticateCreateOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAuthenticateCreateOK;
                summary.rmiName = RmiName_CG_RequestAuthenticateCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEditorUserInfoByNickNameOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEditorUserInfoByNickNameOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEditorUserInfoByNickNameOK, RmiName_CG_RequestEditorUserInfoByNickNameOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEditorUserInfoByNickNameOK;
                summary.rmiName = RmiName_CG_RequestEditorUserInfoByNickNameOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEditorUserInfoByNickNameOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEditorUserInfoByNickNameOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEditorUserInfoByNickNameOK;
                summary.rmiName = RmiName_CG_RequestEditorUserInfoByNickNameOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLoginOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.LoginUserResultInfo userInfo; SimpleCSharp.Marshaler.Read(__msg, out userInfo);
            DateTime serverTime; SimpleCSharp.Marshaler.Read(__msg, out serverTime);
            string serviceName; SimpleCSharp.Marshaler.Read(__msg, out serviceName);
            SimpleCSharp.MaintenanceInfo maintenanceInfo; SimpleCSharp.Marshaler.Read(__msg, out maintenanceInfo);
            int remainResetTimeSEC; SimpleCSharp.Marshaler.Read(__msg, out remainResetTimeSEC);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLoginOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += userInfo.ToString() + ",";
                parameterString += serverTime.ToString() + ",";
                parameterString += serviceName.ToString() + ",";
                parameterString += maintenanceInfo.ToString() + ",";
                parameterString += remainResetTimeSEC.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestLoginOK, RmiName_CG_RequestLoginOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLoginOK;
                summary.rmiName = RmiName_CG_RequestLoginOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLoginOK(remote, ctx, userInfo, serverTime, serviceName, maintenanceInfo, remainResetTimeSEC);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLoginOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLoginOK;
                summary.rmiName = RmiName_CG_RequestLoginOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLoginInstantlyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLoginInstantlyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLoginInstantlyOK, RmiName_CG_RequestLoginInstantlyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLoginInstantlyOK;
                summary.rmiName = RmiName_CG_RequestLoginInstantlyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLoginInstantlyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLoginInstantlyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLoginInstantlyOK;
                summary.rmiName = RmiName_CG_RequestLoginInstantlyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestForceLogoutOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestForceLogoutOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestForceLogoutOK, RmiName_CG_RequestForceLogoutOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestForceLogoutOK;
                summary.rmiName = RmiName_CG_RequestForceLogoutOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestForceLogoutOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestForceLogoutOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestForceLogoutOK;
                summary.rmiName = RmiName_CG_RequestForceLogoutOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RetryRequestOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RetryRequestOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RetryRequestOK, RmiName_CG_RetryRequestOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RetryRequestOK;
                summary.rmiName = RmiName_CG_RetryRequestOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RetryRequestOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RetryRequestOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RetryRequestOK;
                summary.rmiName = RmiName_CG_RetryRequestOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBillingInitializeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingInitializeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingInitializeOK, RmiName_CG_RequestBillingInitializeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBillingInitializeOK;
                summary.rmiName = RmiName_CG_RequestBillingInitializeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBillingInitializeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingInitializeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBillingInitializeOK;
                summary.rmiName = RmiName_CG_RequestBillingInitializeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBillingVerifyPUOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingVerifyPUOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingVerifyPUOK, RmiName_CG_RequestBillingVerifyPUOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBillingVerifyPUOK;
                summary.rmiName = RmiName_CG_RequestBillingVerifyPUOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBillingVerifyPUOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingVerifyPUOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBillingVerifyPUOK;
                summary.rmiName = RmiName_CG_RequestBillingVerifyPUOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBillingRemainTROK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingRemainTROK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingRemainTROK, RmiName_CG_RequestBillingRemainTROK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBillingRemainTROK;
                summary.rmiName = RmiName_CG_RequestBillingRemainTROK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBillingRemainTROK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingRemainTROK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBillingRemainTROK;
                summary.rmiName = RmiName_CG_RequestBillingRemainTROK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBillingCouponVerifyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.BillingVerifyResultInfo verifyResultInfo; SimpleCSharp.Marshaler.Read(__msg, out verifyResultInfo);
            string netmarble_reward_id; SimpleCSharp.Marshaler.Read(__msg, out netmarble_reward_id);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingCouponVerifyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += verifyResultInfo.ToString() + ",";
                parameterString += netmarble_reward_id.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestBillingCouponVerifyOK, RmiName_CG_RequestBillingCouponVerifyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBillingCouponVerifyOK;
                summary.rmiName = RmiName_CG_RequestBillingCouponVerifyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBillingCouponVerifyOK(remote, ctx, verifyResultInfo, netmarble_reward_id);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingCouponVerifyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBillingCouponVerifyOK;
                summary.rmiName = RmiName_CG_RequestBillingCouponVerifyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBillingCrossPromotionOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingCrossPromotionOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingCrossPromotionOK, RmiName_CG_RequestBillingCrossPromotionOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBillingCrossPromotionOK;
                summary.rmiName = RmiName_CG_RequestBillingCrossPromotionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBillingCrossPromotionOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingCrossPromotionOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBillingCrossPromotionOK;
                summary.rmiName = RmiName_CG_RequestBillingCrossPromotionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBillingPackageShopOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBillingPackageShopOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBillingPackageShopOK, RmiName_CG_RequestBillingPackageShopOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBillingPackageShopOK;
                summary.rmiName = RmiName_CG_RequestBillingPackageShopOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBillingPackageShopOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBillingPackageShopOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBillingPackageShopOK;
                summary.rmiName = RmiName_CG_RequestBillingPackageShopOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAgeInputOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAgeInputOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAgeInputOK, RmiName_CG_RequestAgeInputOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAgeInputOK;
                summary.rmiName = RmiName_CG_RequestAgeInputOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAgeInputOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAgeInputOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAgeInputOK;
                summary.rmiName = RmiName_CG_RequestAgeInputOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Notify_WolverineOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Notify_WolverineOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Notify_WolverineOK, RmiName_CG_Notify_WolverineOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Notify_WolverineOK;
                summary.rmiName = RmiName_CG_Notify_WolverineOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Notify_WolverineOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Notify_WolverineOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Notify_WolverineOK;
                summary.rmiName = RmiName_CG_Notify_WolverineOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSDKInfoChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSDKInfoChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSDKInfoChangeOK, RmiName_CG_RequestSDKInfoChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSDKInfoChangeOK;
                summary.rmiName = RmiName_CG_RequestSDKInfoChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSDKInfoChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSDKInfoChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSDKInfoChangeOK;
                summary.rmiName = RmiName_CG_RequestSDKInfoChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinLevelUpBySkinMaterialOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinLevelUpBySkinMaterialOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinLevelUpBySkinMaterialOK, RmiName_CG_RequestSkinLevelUpBySkinMaterialOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinLevelUpBySkinMaterialOK;
                summary.rmiName = RmiName_CG_RequestSkinLevelUpBySkinMaterialOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinLevelUpBySkinMaterialOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinLevelUpBySkinMaterialOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinLevelUpBySkinMaterialOK;
                summary.rmiName = RmiName_CG_RequestSkinLevelUpBySkinMaterialOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinResearchOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinResearchOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinResearchOK, RmiName_CG_RequestSkinResearchOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinResearchOK;
                summary.rmiName = RmiName_CG_RequestSkinResearchOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinResearchOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinResearchOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinResearchOK;
                summary.rmiName = RmiName_CG_RequestSkinResearchOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinResearchInitOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinResearchInitOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinResearchInitOK, RmiName_CG_RequestSkinResearchInitOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinResearchInitOK;
                summary.rmiName = RmiName_CG_RequestSkinResearchInitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinResearchInitOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinResearchInitOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinResearchInitOK;
                summary.rmiName = RmiName_CG_RequestSkinResearchInitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinMaterialGrindOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaterialGrindOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinMaterialGrindOK, RmiName_CG_RequestSkinMaterialGrindOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinMaterialGrindOK;
                summary.rmiName = RmiName_CG_RequestSkinMaterialGrindOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinMaterialGrindOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaterialGrindOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinMaterialGrindOK;
                summary.rmiName = RmiName_CG_RequestSkinMaterialGrindOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinAwakenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinAwakenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinAwakenOK, RmiName_CG_RequestSkinAwakenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinAwakenOK;
                summary.rmiName = RmiName_CG_RequestSkinAwakenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinAwakenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinAwakenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinAwakenOK;
                summary.rmiName = RmiName_CG_RequestSkinAwakenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinHeadStyleChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinHeadStyleChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinHeadStyleChangeOK, RmiName_CG_RequestSkinHeadStyleChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinHeadStyleChangeOK;
                summary.rmiName = RmiName_CG_RequestSkinHeadStyleChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinHeadStyleChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinHeadStyleChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinHeadStyleChangeOK;
                summary.rmiName = RmiName_CG_RequestSkinHeadStyleChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinEvolutionOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinEvolutionOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinEvolutionOK, RmiName_CG_RequestSkinEvolutionOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinEvolutionOK;
                summary.rmiName = RmiName_CG_RequestSkinEvolutionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinEvolutionOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinEvolutionOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinEvolutionOK;
                summary.rmiName = RmiName_CG_RequestSkinEvolutionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinSkillLevelUpOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinSkillLevelUpOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinSkillLevelUpOK, RmiName_CG_RequestSkinSkillLevelUpOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinSkillLevelUpOK;
                summary.rmiName = RmiName_CG_RequestSkinSkillLevelUpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinSkillLevelUpOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinSkillLevelUpOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinSkillLevelUpOK;
                summary.rmiName = RmiName_CG_RequestSkinSkillLevelUpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinGiveFellowshipExpOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinGiveFellowshipExpOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinGiveFellowshipExpOK, RmiName_CG_RequestSkinGiveFellowshipExpOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinGiveFellowshipExpOK;
                summary.rmiName = RmiName_CG_RequestSkinGiveFellowshipExpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinGiveFellowshipExpOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinGiveFellowshipExpOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinGiveFellowshipExpOK;
                summary.rmiName = RmiName_CG_RequestSkinGiveFellowshipExpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinFellowshipLevelUpRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinFellowshipLevelUpRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinFellowshipLevelUpRewardOK, RmiName_CG_RequestSkinFellowshipLevelUpRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinFellowshipLevelUpRewardOK;
                summary.rmiName = RmiName_CG_RequestSkinFellowshipLevelUpRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinFellowshipLevelUpRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinFellowshipLevelUpRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinFellowshipLevelUpRewardOK;
                summary.rmiName = RmiName_CG_RequestSkinFellowshipLevelUpRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeEquipOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeEquipOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeEquipOK, RmiName_CG_RequestCostumeEquipOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeEquipOK;
                summary.rmiName = RmiName_CG_RequestCostumeEquipOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeEquipOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeEquipOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeEquipOK;
                summary.rmiName = RmiName_CG_RequestCostumeEquipOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeUnEquipOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeUnEquipOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeUnEquipOK, RmiName_CG_RequestCostumeUnEquipOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeUnEquipOK;
                summary.rmiName = RmiName_CG_RequestCostumeUnEquipOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeUnEquipOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeUnEquipOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeUnEquipOK;
                summary.rmiName = RmiName_CG_RequestCostumeUnEquipOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeUnLockOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            List<SimpleCSharp.ItemResultInfo> getItemResultInfoList; SimpleCSharp.Marshaler.Read(__msg, out getItemResultInfoList);
            List<SimpleCSharp.UserSkin> updateSkinList; SimpleCSharp.Marshaler.Read(__msg, out updateSkinList);
            List<SimpleCSharp.UserSkin> equipSkinList; SimpleCSharp.Marshaler.Read(__msg, out equipSkinList);
            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeUnLockOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += getItemResultInfoList.ToString() + ",";
                parameterString += updateSkinList.ToString() + ",";
                parameterString += equipSkinList.ToString() + ",";
                parameterString += missionResult.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestCostumeUnLockOK, RmiName_CG_RequestCostumeUnLockOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeUnLockOK;
                summary.rmiName = RmiName_CG_RequestCostumeUnLockOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeUnLockOK(remote, ctx, getItemResultInfoList, updateSkinList, equipSkinList, missionResult);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeUnLockOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeUnLockOK;
                summary.rmiName = RmiName_CG_RequestCostumeUnLockOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinOverEvolutionOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinOverEvolutionOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinOverEvolutionOK, RmiName_CG_RequestSkinOverEvolutionOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinOverEvolutionOK;
                summary.rmiName = RmiName_CG_RequestSkinOverEvolutionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinOverEvolutionOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinOverEvolutionOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinOverEvolutionOK;
                summary.rmiName = RmiName_CG_RequestSkinOverEvolutionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinMaxAwakenRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaxAwakenRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinMaxAwakenRewardOK, RmiName_CG_RequestSkinMaxAwakenRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinMaxAwakenRewardOK;
                summary.rmiName = RmiName_CG_RequestSkinMaxAwakenRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinMaxAwakenRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaxAwakenRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinMaxAwakenRewardOK;
                summary.rmiName = RmiName_CG_RequestSkinMaxAwakenRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeRegisterOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeRegisterOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeRegisterOK, RmiName_CG_RequestCostumeRegisterOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeRegisterOK;
                summary.rmiName = RmiName_CG_RequestCostumeRegisterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeRegisterOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeRegisterOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeRegisterOK;
                summary.rmiName = RmiName_CG_RequestCostumeRegisterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinLoveRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinLoveRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinLoveRewardOK, RmiName_CG_RequestSkinLoveRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinLoveRewardOK;
                summary.rmiName = RmiName_CG_RequestSkinLoveRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinLoveRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinLoveRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinLoveRewardOK;
                summary.rmiName = RmiName_CG_RequestSkinLoveRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeAutoRegisterOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            List<SimpleCSharp.UserSkin> targetSkinList; SimpleCSharp.Marshaler.Read(__msg, out targetSkinList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeAutoRegisterOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += targetSkinList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestCostumeAutoRegisterOK, RmiName_CG_RequestCostumeAutoRegisterOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeAutoRegisterOK;
                summary.rmiName = RmiName_CG_RequestCostumeAutoRegisterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeAutoRegisterOK(remote, ctx, targetSkinList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeAutoRegisterOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeAutoRegisterOK;
                summary.rmiName = RmiName_CG_RequestCostumeAutoRegisterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestStoryCostumeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            List<SimpleCSharp.ItemResultInfo> getItemResultInfoList; SimpleCSharp.Marshaler.Read(__msg, out getItemResultInfoList);
            List<SimpleCSharp.UserCommonItem> userStoryCostumeItemList; SimpleCSharp.Marshaler.Read(__msg, out userStoryCostumeItemList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestStoryCostumeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += getItemResultInfoList.ToString() + ",";
                parameterString += userStoryCostumeItemList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestStoryCostumeOK, RmiName_CG_RequestStoryCostumeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestStoryCostumeOK;
                summary.rmiName = RmiName_CG_RequestStoryCostumeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestStoryCostumeOK(remote, ctx, getItemResultInfoList, userStoryCostumeItemList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStoryCostumeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestStoryCostumeOK;
                summary.rmiName = RmiName_CG_RequestStoryCostumeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeLevelUpOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeLevelUpOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeLevelUpOK, RmiName_CG_RequestCostumeLevelUpOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeLevelUpOK;
                summary.rmiName = RmiName_CG_RequestCostumeLevelUpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeLevelUpOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeLevelUpOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeLevelUpOK;
                summary.rmiName = RmiName_CG_RequestCostumeLevelUpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestSkinMaxAwakenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestSkinMaxAwakenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestSkinMaxAwakenOK, RmiName_CG_RequestSkinMaxAwakenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestSkinMaxAwakenOK;
                summary.rmiName = RmiName_CG_RequestSkinMaxAwakenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestSkinMaxAwakenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestSkinMaxAwakenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestSkinMaxAwakenOK;
                summary.rmiName = RmiName_CG_RequestSkinMaxAwakenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponEquipOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEquipOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEquipOK, RmiName_CG_RequestWeaponEquipOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEquipOK;
                summary.rmiName = RmiName_CG_RequestWeaponEquipOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponEquipOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEquipOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEquipOK;
                summary.rmiName = RmiName_CG_RequestWeaponEquipOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponUnEquipOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponUnEquipOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponUnEquipOK, RmiName_CG_RequestWeaponUnEquipOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponUnEquipOK;
                summary.rmiName = RmiName_CG_RequestWeaponUnEquipOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponUnEquipOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponUnEquipOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponUnEquipOK;
                summary.rmiName = RmiName_CG_RequestWeaponUnEquipOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponSellOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponSellOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponSellOK, RmiName_CG_RequestWeaponSellOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponSellOK;
                summary.rmiName = RmiName_CG_RequestWeaponSellOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponSellOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponSellOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponSellOK;
                summary.rmiName = RmiName_CG_RequestWeaponSellOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponGrindOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponGrindOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponGrindOK, RmiName_CG_RequestWeaponGrindOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponGrindOK;
                summary.rmiName = RmiName_CG_RequestWeaponGrindOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponGrindOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponGrindOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponGrindOK;
                summary.rmiName = RmiName_CG_RequestWeaponGrindOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponUpgradeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponUpgradeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponUpgradeOK, RmiName_CG_RequestWeaponUpgradeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponUpgradeOK;
                summary.rmiName = RmiName_CG_RequestWeaponUpgradeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponUpgradeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponUpgradeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponUpgradeOK;
                summary.rmiName = RmiName_CG_RequestWeaponUpgradeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponUpgradeRetryOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponUpgradeRetryOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponUpgradeRetryOK, RmiName_CG_RequestWeaponUpgradeRetryOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponUpgradeRetryOK;
                summary.rmiName = RmiName_CG_RequestWeaponUpgradeRetryOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponUpgradeRetryOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponUpgradeRetryOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponUpgradeRetryOK;
                summary.rmiName = RmiName_CG_RequestWeaponUpgradeRetryOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponEvolutionOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEvolutionOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEvolutionOK, RmiName_CG_RequestWeaponEvolutionOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEvolutionOK;
                summary.rmiName = RmiName_CG_RequestWeaponEvolutionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponEvolutionOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEvolutionOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEvolutionOK;
                summary.rmiName = RmiName_CG_RequestWeaponEvolutionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponEvolutionRetryOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEvolutionRetryOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEvolutionRetryOK, RmiName_CG_RequestWeaponEvolutionRetryOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEvolutionRetryOK;
                summary.rmiName = RmiName_CG_RequestWeaponEvolutionRetryOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponEvolutionRetryOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEvolutionRetryOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEvolutionRetryOK;
                summary.rmiName = RmiName_CG_RequestWeaponEvolutionRetryOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponOptionEnhanceOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponOptionEnhanceOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponOptionEnhanceOK, RmiName_CG_RequestWeaponOptionEnhanceOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponOptionEnhanceOK;
                summary.rmiName = RmiName_CG_RequestWeaponOptionEnhanceOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponOptionEnhanceOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponOptionEnhanceOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponOptionEnhanceOK;
                summary.rmiName = RmiName_CG_RequestWeaponOptionEnhanceOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponLockOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponLockOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponLockOK, RmiName_CG_RequestWeaponLockOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponLockOK;
                summary.rmiName = RmiName_CG_RequestWeaponLockOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponLockOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponLockOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponLockOK;
                summary.rmiName = RmiName_CG_RequestWeaponLockOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponUnLockOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponUnLockOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponUnLockOK, RmiName_CG_RequestWeaponUnLockOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponUnLockOK;
                summary.rmiName = RmiName_CG_RequestWeaponUnLockOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponUnLockOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponUnLockOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponUnLockOK;
                summary.rmiName = RmiName_CG_RequestWeaponUnLockOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponEquipExchangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEquipExchangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEquipExchangeOK, RmiName_CG_RequestWeaponEquipExchangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEquipExchangeOK;
                summary.rmiName = RmiName_CG_RequestWeaponEquipExchangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponEquipExchangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEquipExchangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEquipExchangeOK;
                summary.rmiName = RmiName_CG_RequestWeaponEquipExchangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponEquipExchangeAllOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEquipExchangeAllOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEquipExchangeAllOK, RmiName_CG_RequestWeaponEquipExchangeAllOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEquipExchangeAllOK;
                summary.rmiName = RmiName_CG_RequestWeaponEquipExchangeAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponEquipExchangeAllOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEquipExchangeAllOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEquipExchangeAllOK;
                summary.rmiName = RmiName_CG_RequestWeaponEquipExchangeAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponEquipRecommandOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponEquipRecommandOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponEquipRecommandOK, RmiName_CG_RequestWeaponEquipRecommandOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEquipRecommandOK;
                summary.rmiName = RmiName_CG_RequestWeaponEquipRecommandOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponEquipRecommandOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponEquipRecommandOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponEquipRecommandOK;
                summary.rmiName = RmiName_CG_RequestWeaponEquipRecommandOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponCarveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponCarveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponCarveOK, RmiName_CG_RequestWeaponCarveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponCarveOK;
                summary.rmiName = RmiName_CG_RequestWeaponCarveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponCarveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponCarveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponCarveOK;
                summary.rmiName = RmiName_CG_RequestWeaponCarveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponCarveRemoveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponCarveRemoveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponCarveRemoveOK, RmiName_CG_RequestWeaponCarveRemoveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponCarveRemoveOK;
                summary.rmiName = RmiName_CG_RequestWeaponCarveRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponCarveRemoveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponCarveRemoveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponCarveRemoveOK;
                summary.rmiName = RmiName_CG_RequestWeaponCarveRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestStageRejoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestStageRejoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStageRejoinOK, RmiName_CG_RequestStageRejoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestStageRejoinOK;
                summary.rmiName = RmiName_CG_RequestStageRejoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestStageRejoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStageRejoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestStageRejoinOK;
                summary.rmiName = RmiName_CG_RequestStageRejoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.StageStartResultInfo adventureStageResultInfo; SimpleCSharp.Marshaler.Read(__msg, out adventureStageResultInfo);
            SimpleCSharp.PaybackEventResultInfo paybackEventResultInfo; SimpleCSharp.Marshaler.Read(__msg, out paybackEventResultInfo);
            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += adventureStageResultInfo.ToString() + ",";
                parameterString += paybackEventResultInfo.ToString() + ",";
                NotifyCallFromStub(Common.CG_Request_Main_Stage_StartOK, RmiName_CG_Request_Main_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_Stage_StartOK(remote, ctx, adventureStageResultInfo, paybackEventResultInfo);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.StageClearResultInfo adventureClearResultInfo; SimpleCSharp.Marshaler.Read(__msg, out adventureClearResultInfo);
            bool isFirstMainStageClear; SimpleCSharp.Marshaler.Read(__msg, out isFirstMainStageClear);
            List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList; SimpleCSharp.Marshaler.Read(__msg, out userPackageMissionInfoList);
            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += adventureClearResultInfo.ToString() + ",";
                parameterString += isFirstMainStageClear.ToString() + ",";
                parameterString += userPackageMissionInfoList.ToString() + ",";
                NotifyCallFromStub(Common.CG_Request_Main_Stage_ClearOK, RmiName_CG_Request_Main_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_Stage_ClearOK(remote, ctx, adventureClearResultInfo, isFirstMainStageClear, userPackageMissionInfoList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_Stage_ContinueOK, RmiName_CG_Request_Main_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_Stage_StartOK, RmiName_CG_Request_Free_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Free_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Free_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_Stage_ClearOK, RmiName_CG_Request_Free_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Free_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Free_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_Stage_ContinueOK, RmiName_CG_Request_Free_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Free_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Free_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestHawkRunStageStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestHawkRunStageStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestHawkRunStageStartOK, RmiName_CG_RequestHawkRunStageStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestHawkRunStageStartOK;
                summary.rmiName = RmiName_CG_RequestHawkRunStageStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestHawkRunStageStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHawkRunStageStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestHawkRunStageStartOK;
                summary.rmiName = RmiName_CG_RequestHawkRunStageStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestHawkRunStageClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestHawkRunStageClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestHawkRunStageClearOK, RmiName_CG_RequestHawkRunStageClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestHawkRunStageClearOK;
                summary.rmiName = RmiName_CG_RequestHawkRunStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestHawkRunStageClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestHawkRunStageClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestHawkRunStageClearOK;
                summary.rmiName = RmiName_CG_RequestHawkRunStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventStageClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventStageClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventStageClearOK, RmiName_CG_RequestEventStageClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventStageClearOK;
                summary.rmiName = RmiName_CG_RequestEventStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventStageClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventStageClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventStageClearOK;
                summary.rmiName = RmiName_CG_RequestEventStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Quest_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Quest_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Quest_Stage_StartOK, RmiName_CG_Request_Quest_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Quest_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Quest_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Quest_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Quest_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Quest_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Quest_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Quest_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Quest_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Quest_Stage_ClearOK, RmiName_CG_Request_Quest_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Quest_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Quest_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Quest_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Quest_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Quest_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Quest_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Quest_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Quest_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Quest_Stage_ContinueOK, RmiName_CG_Request_Quest_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Quest_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Quest_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Quest_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Quest_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Quest_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Quest_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Week_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Week_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Week_Stage_StartOK, RmiName_CG_Request_Week_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Week_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Week_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Week_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Week_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Week_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Week_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Week_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Week_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Week_Stage_ClearOK, RmiName_CG_Request_Week_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Week_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Week_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Week_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Week_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Week_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Week_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Week_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Week_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Week_Stage_ContinueOK, RmiName_CG_Request_Week_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Week_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Week_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Week_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Week_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Week_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Week_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_Stage_StartOK, RmiName_CG_Request_Boss_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Boss_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Boss_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_Stage_ClearOK, RmiName_CG_Request_Boss_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Boss_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Boss_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_Stage_ContinueOK, RmiName_CG_Request_Boss_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Boss_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Boss_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Memorial_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Memorial_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Memorial_Stage_StartOK, RmiName_CG_Request_Memorial_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Memorial_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Memorial_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Memorial_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Memorial_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Memorial_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Memorial_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Memorial_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Memorial_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Memorial_Stage_ClearOK, RmiName_CG_Request_Memorial_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Memorial_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Memorial_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Memorial_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Memorial_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Memorial_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Memorial_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Memorial_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Memorial_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Memorial_Stage_ContinueOK, RmiName_CG_Request_Memorial_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Memorial_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Memorial_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Memorial_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Memorial_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Memorial_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Memorial_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Limited_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_Stage_StartOK, RmiName_CG_Request_Limited_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Limited_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Limited_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Limited_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Limited_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_Stage_ClearOK, RmiName_CG_Request_Limited_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Limited_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Limited_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Limited_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Limited_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_Stage_ContinueOK, RmiName_CG_Request_Limited_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Limited_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Limited_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Limited_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_ExtraStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ExtraStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ExtraStage_StartOK, RmiName_CG_Request_Main_ExtraStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ExtraStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_ExtraStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_ExtraStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ExtraStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ExtraStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_ExtraStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_ExtraStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ExtraStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ExtraStage_ClearOK, RmiName_CG_Request_Main_ExtraStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ExtraStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_ExtraStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_ExtraStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ExtraStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ExtraStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_ExtraStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_ExtraStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ExtraStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ExtraStage_ContinueOK, RmiName_CG_Request_Main_ExtraStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ExtraStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_ExtraStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_ExtraStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ExtraStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ExtraStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_ExtraStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_ExtraStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_ExtraStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_ExtraStage_StartOK, RmiName_CG_Request_Boss_ExtraStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_ExtraStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_ExtraStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_ExtraStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_ExtraStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_ExtraStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_ExtraStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_ExtraStage_ClearOK, RmiName_CG_Request_Boss_ExtraStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_ExtraStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_ExtraStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_ExtraStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_ExtraStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_ExtraStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_ExtraStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_ExtraStage_ContinueOK, RmiName_CG_Request_Boss_ExtraStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_ExtraStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_ExtraStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_ExtraStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_ExtraStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Boss_ExtraStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRewardStageClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRewardStageClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRewardStageClearOK, RmiName_CG_RequestRewardStageClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRewardStageClearOK;
                summary.rmiName = RmiName_CG_RequestRewardStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRewardStageClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRewardStageClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRewardStageClearOK;
                summary.rmiName = RmiName_CG_RequestRewardStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_AnotherMain_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_AnotherMain_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_AnotherMain_Stage_StartOK, RmiName_CG_Request_AnotherMain_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_AnotherMain_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_AnotherMain_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_AnotherMain_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_AnotherMain_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_AnotherMain_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_AnotherMain_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_AnotherMain_Stage_ClearOK, RmiName_CG_Request_AnotherMain_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_AnotherMain_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_AnotherMain_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_AnotherMain_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_AnotherMain_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_AnotherMain_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_AnotherMain_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_AnotherMain_Stage_ContinueOK, RmiName_CG_Request_AnotherMain_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_AnotherMain_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_AnotherMain_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_AnotherMain_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_AnotherMain_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_AnotherMain_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Reverse_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Reverse_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Reverse_Stage_StartOK, RmiName_CG_Request_Reverse_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Reverse_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Reverse_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Reverse_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Reverse_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Reverse_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Reverse_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Reverse_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Reverse_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Reverse_Stage_ClearOK, RmiName_CG_Request_Reverse_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Reverse_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Reverse_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Reverse_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Reverse_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Reverse_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Reverse_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Reverse_Star_RewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Reverse_Star_RewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Reverse_Star_RewardOK, RmiName_CG_Request_Reverse_Star_RewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Reverse_Star_RewardOK;
                summary.rmiName = RmiName_CG_Request_Reverse_Star_RewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Reverse_Star_RewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Reverse_Star_RewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Reverse_Star_RewardOK;
                summary.rmiName = RmiName_CG_Request_Reverse_Star_RewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Reverse_Group_RewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Reverse_Group_RewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Reverse_Group_RewardOK, RmiName_CG_Request_Reverse_Group_RewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Reverse_Group_RewardOK;
                summary.rmiName = RmiName_CG_Request_Reverse_Group_RewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Reverse_Group_RewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Reverse_Group_RewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Reverse_Group_RewardOK;
                summary.rmiName = RmiName_CG_Request_Reverse_Group_RewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_EventAreaStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_EventAreaStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_EventAreaStage_StartOK, RmiName_CG_Request_Main_EventAreaStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_EventAreaStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_EventAreaStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_EventAreaStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_EventAreaStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_EventAreaStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_EventAreaStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_EventAreaStage_ClearOK, RmiName_CG_Request_Main_EventAreaStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_EventAreaStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_EventAreaStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_EventAreaStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_EventAreaStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_EventAreaStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_EventAreaStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_EventAreaStage_ContinueOK, RmiName_CG_Request_Main_EventAreaStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_EventAreaStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_EventAreaStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_EventAreaStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_EventAreaStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_EventAreaStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_EventAreaStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventAreaStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventAreaStage_StartOK, RmiName_CG_Request_Free_EventAreaStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventAreaStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_EventAreaStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventAreaStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventAreaStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_EventAreaStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventAreaStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventAreaStage_ClearOK, RmiName_CG_Request_Free_EventAreaStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventAreaStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_EventAreaStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventAreaStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventAreaStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_EventAreaStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventAreaStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventAreaStage_ContinueOK, RmiName_CG_Request_Free_EventAreaStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventAreaStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_EventAreaStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventAreaStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventAreaStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Free_EventAreaStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventAreaRewardStageClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventAreaRewardStageClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventAreaRewardStageClearOK, RmiName_CG_RequestEventAreaRewardStageClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventAreaRewardStageClearOK;
                summary.rmiName = RmiName_CG_RequestEventAreaRewardStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventAreaRewardStageClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventAreaRewardStageClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventAreaRewardStageClearOK;
                summary.rmiName = RmiName_CG_RequestEventAreaRewardStageClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_EventStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventStage_StartOK, RmiName_CG_Request_Free_EventStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Free_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_EventStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Free_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_EventStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventStage_ClearOK, RmiName_CG_Request_Free_EventStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Free_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_EventStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Free_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_EventStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_EventStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_EventStage_ContinueOK, RmiName_CG_Request_Free_EventStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Free_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_EventStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_EventStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Free_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventExchangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeOK, RmiName_CG_RequestEventExchangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventExchangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventPlayCountRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPlayCountRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventPlayCountRewardOK, RmiName_CG_RequestEventPlayCountRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventPlayCountRewardOK;
                summary.rmiName = RmiName_CG_RequestEventPlayCountRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventPlayCountRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPlayCountRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventPlayCountRewardOK;
                summary.rmiName = RmiName_CG_RequestEventPlayCountRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_ListEventStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ListEventStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ListEventStage_StartOK, RmiName_CG_Request_Main_ListEventStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ListEventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_ListEventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_ListEventStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ListEventStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ListEventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_ListEventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_ListEventStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ListEventStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ListEventStage_ClearOK, RmiName_CG_Request_Main_ListEventStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ListEventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_ListEventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_ListEventStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ListEventStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ListEventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_ListEventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_ListEventStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_ListEventStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_ListEventStage_ContinueOK, RmiName_CG_Request_Main_ListEventStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ListEventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_ListEventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_ListEventStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_ListEventStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_ListEventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_ListEventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_ListEventStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_ListEventStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_ListEventStage_StartOK, RmiName_CG_Request_Free_ListEventStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_ListEventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Free_ListEventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_ListEventStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_ListEventStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_ListEventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Free_ListEventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_ListEventStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_ListEventStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_ListEventStage_ClearOK, RmiName_CG_Request_Free_ListEventStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_ListEventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Free_ListEventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_ListEventStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_ListEventStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_ListEventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Free_ListEventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Free_ListEventStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Free_ListEventStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Free_ListEventStage_ContinueOK, RmiName_CG_Request_Free_ListEventStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Free_ListEventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Free_ListEventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Free_ListEventStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Free_ListEventStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Free_ListEventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Free_ListEventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_FinalBossStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_FinalBossStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_FinalBossStage_StartOK, RmiName_CG_Request_Main_FinalBossStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_FinalBossStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_FinalBossStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_FinalBossStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_FinalBossStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_FinalBossStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_FinalBossStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_FinalBossStage_ClearOK, RmiName_CG_Request_Main_FinalBossStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_FinalBossStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_FinalBossStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_FinalBossStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_FinalBossStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Main_FinalBossStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Main_FinalBossStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Main_FinalBossStage_ContinueOK, RmiName_CG_Request_Main_FinalBossStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Main_FinalBossStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Main_FinalBossStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Main_FinalBossStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Main_FinalBossStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Main_FinalBossStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_EventFreeStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_EventFreeStage_StartOK, RmiName_CG_Request_FinalBoss_EventFreeStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_StartOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_FinalBoss_EventFreeStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_EventFreeStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_StartOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_EventFreeStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_EventFreeStage_ClearOK, RmiName_CG_Request_FinalBoss_EventFreeStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_FinalBoss_EventFreeStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_EventFreeStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_FinalBoss_EventFreeStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_EventFreeStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_EventFreeStage_ContinueOK, RmiName_CG_Request_FinalBoss_EventFreeStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_FinalBoss_EventFreeStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_EventFreeStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_EventFreeStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_EventFreeStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Limited_EventStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_EventStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_EventStage_StartOK, RmiName_CG_Request_Limited_EventStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Limited_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Limited_EventStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_EventStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Limited_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Limited_EventStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_EventStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_EventStage_ClearOK, RmiName_CG_Request_Limited_EventStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Limited_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Limited_EventStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_EventStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Limited_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Limited_EventStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Limited_EventStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Limited_EventStage_ContinueOK, RmiName_CG_Request_Limited_EventStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Limited_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Limited_EventStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Limited_EventStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Limited_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Limited_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_EventStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_EventStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_EventStage_StartOK, RmiName_CG_Request_Boss_EventStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Boss_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_EventStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_EventStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Boss_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_EventStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_EventStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_EventStage_ClearOK, RmiName_CG_Request_Boss_EventStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Boss_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_EventStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_EventStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Boss_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Boss_EventStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Boss_EventStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Boss_EventStage_ContinueOK, RmiName_CG_Request_Boss_EventStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Boss_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Boss_EventStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Boss_EventStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Boss_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Boss_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Monthly_EventStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Monthly_EventStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Monthly_EventStage_StartOK, RmiName_CG_Request_Monthly_EventStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Monthly_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Monthly_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Monthly_EventStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Monthly_EventStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Monthly_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_Monthly_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Monthly_EventStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Monthly_EventStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Monthly_EventStage_ClearOK, RmiName_CG_Request_Monthly_EventStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Monthly_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Monthly_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Monthly_EventStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Monthly_EventStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Monthly_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Monthly_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Monthly_EventStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Monthly_EventStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Monthly_EventStage_ContinueOK, RmiName_CG_Request_Monthly_EventStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Monthly_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Monthly_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Monthly_EventStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Monthly_EventStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Monthly_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Monthly_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMonthlyStagePointRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMonthlyStagePointRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMonthlyStagePointRewardOK, RmiName_CG_RequestMonthlyStagePointRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMonthlyStagePointRewardOK;
                summary.rmiName = RmiName_CG_RequestMonthlyStagePointRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMonthlyStagePointRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMonthlyStagePointRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMonthlyStagePointRewardOK;
                summary.rmiName = RmiName_CG_RequestMonthlyStagePointRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_EventStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_EventStage_StartOK, RmiName_CG_Request_ChallengeBoss_EventStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_ChallengeBoss_EventStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_EventStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_StartOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_EventStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_EventStage_ClearOK, RmiName_CG_Request_ChallengeBoss_EventStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_ChallengeBoss_EventStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_EventStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_EventStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_EventStage_ContinueOK, RmiName_CG_Request_ChallengeBoss_EventStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_ChallengeBoss_EventStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_EventStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_ChallengeBoss_EventStage_InfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_EventStage_InfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_EventStage_InfoOK, RmiName_CG_Request_ChallengeBoss_EventStage_InfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_InfoOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_ChallengeBoss_EventStage_InfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_EventStage_InfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_EventStage_InfoOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_EventStage_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_ChallengeBoss_Event_Point_RewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_ChallengeBoss_Event_Point_RewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_ChallengeBoss_Event_Point_RewardOK, RmiName_CG_Request_ChallengeBoss_Event_Point_RewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_Event_Point_RewardOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_Event_Point_RewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_ChallengeBoss_Event_Point_RewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_ChallengeBoss_Event_Point_RewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_ChallengeBoss_Event_Point_RewardOK;
                summary.rmiName = RmiName_CG_Request_ChallengeBoss_Event_Point_RewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Training_Stage_InfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_InfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_InfoOK, RmiName_CG_Request_Training_Stage_InfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_InfoOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Training_Stage_InfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_InfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_InfoOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Training_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_StartOK, RmiName_CG_Request_Training_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Training_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Training_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_ClearOK, RmiName_CG_Request_Training_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Training_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Training_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_ContinueOK, RmiName_CG_Request_Training_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Training_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Training_Stage_OpenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_OpenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_OpenOK, RmiName_CG_Request_Training_Stage_OpenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_OpenOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_OpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Training_Stage_OpenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_OpenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_OpenOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_OpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_Training_Stage_RefreshOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_Training_Stage_RefreshOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_Training_Stage_RefreshOK, RmiName_CG_Request_Training_Stage_RefreshOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_RefreshOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_RefreshOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_Training_Stage_RefreshOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_Training_Stage_RefreshOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_Training_Stage_RefreshOK;
                summary.rmiName = RmiName_CG_Request_Training_Stage_RefreshOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeekStageGaugeRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeekStageGaugeRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeekStageGaugeRewardOK, RmiName_CG_RequestWeekStageGaugeRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeekStageGaugeRewardOK;
                summary.rmiName = RmiName_CG_RequestWeekStageGaugeRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeekStageGaugeRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeekStageGaugeRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeekStageGaugeRewardOK;
                summary.rmiName = RmiName_CG_RequestWeekStageGaugeRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestIngameBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestIngameBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestIngameBattleStartOK, RmiName_CG_RequestIngameBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestIngameBattleStartOK;
                summary.rmiName = RmiName_CG_RequestIngameBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestIngameBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestIngameBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestIngameBattleStartOK;
                summary.rmiName = RmiName_CG_RequestIngameBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestStageEndLogOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestStageEndLogOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStageEndLogOK, RmiName_CG_RequestStageEndLogOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestStageEndLogOK;
                summary.rmiName = RmiName_CG_RequestStageEndLogOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestStageEndLogOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStageEndLogOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestStageEndLogOK;
                summary.rmiName = RmiName_CG_RequestStageEndLogOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_SingleSiege_ExtraStage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_SingleSiege_ExtraStage_StartOK, RmiName_CG_Request_SingleSiege_ExtraStage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_StartOK;
                summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_SingleSiege_ExtraStage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_SingleSiege_ExtraStage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_StartOK;
                summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_SingleSiege_ExtraStage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_SingleSiege_ExtraStage_ClearOK, RmiName_CG_Request_SingleSiege_ExtraStage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_SingleSiege_ExtraStage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_SingleSiege_ExtraStage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_ClearOK;
                summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_SingleSiege_ExtraStage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_SingleSiege_ExtraStage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_SingleSiege_ExtraStage_ContinueOK, RmiName_CG_Request_SingleSiege_ExtraStage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_SingleSiege_ExtraStage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_SingleSiege_ExtraStage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_SingleSiege_ExtraStage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_SingleSiege_ExtraStage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_FinalBoss_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Stage_StartOK, RmiName_CG_Request_FinalBoss_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_FinalBoss_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_FinalBoss_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Stage_ClearOK, RmiName_CG_Request_FinalBoss_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_FinalBoss_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_FinalBoss_Stage_ContinueOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Stage_ContinueOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Stage_ContinueOK, RmiName_CG_Request_FinalBoss_Stage_ContinueOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_FinalBoss_Stage_ContinueOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Stage_ContinueOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Stage_ContinueOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Stage_ContinueOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_FinalBoss_Season_InfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Season_InfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Season_InfoOK, RmiName_CG_Request_FinalBoss_Season_InfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Season_InfoOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Season_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_FinalBoss_Season_InfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Season_InfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Season_InfoOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Season_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_FinalBoss_Season_Rank_InfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_FinalBoss_Season_Rank_InfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_FinalBoss_Season_Rank_InfoOK, RmiName_CG_Request_FinalBoss_Season_Rank_InfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Season_Rank_InfoOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Season_Rank_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_FinalBoss_Season_Rank_InfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_FinalBoss_Season_Rank_InfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_FinalBoss_Season_Rank_InfoOK;
                summary.rmiName = RmiName_CG_Request_FinalBoss_Season_Rank_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildBoss_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Stage_StartOK, RmiName_CG_Request_GuildBoss_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildBoss_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildBoss_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Stage_ClearOK, RmiName_CG_Request_GuildBoss_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildBoss_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildBoss_Lobby_InfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Lobby_InfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Lobby_InfoOK, RmiName_CG_Request_GuildBoss_Lobby_InfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Lobby_InfoOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Lobby_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildBoss_Lobby_InfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Lobby_InfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Lobby_InfoOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Lobby_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildBoss_Rank_InfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Rank_InfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Rank_InfoOK, RmiName_CG_Request_GuildBoss_Rank_InfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Rank_InfoOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Rank_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildBoss_Rank_InfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Rank_InfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Rank_InfoOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Rank_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildBoss_LastWeek_Rank_InfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_LastWeek_Rank_InfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_LastWeek_Rank_InfoOK, RmiName_CG_Request_GuildBoss_LastWeek_Rank_InfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_LastWeek_Rank_InfoOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_LastWeek_Rank_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildBoss_LastWeek_Rank_InfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_LastWeek_Rank_InfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_LastWeek_Rank_InfoOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_LastWeek_Rank_InfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildBoss_Time_RefreshOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildBoss_Time_RefreshOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildBoss_Time_RefreshOK, RmiName_CG_Request_GuildBoss_Time_RefreshOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Time_RefreshOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Time_RefreshOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildBoss_Time_RefreshOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildBoss_Time_RefreshOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildBoss_Time_RefreshOK;
                summary.rmiName = RmiName_CG_Request_GuildBoss_Time_RefreshOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMailListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            List<SimpleCSharp.MailInfo> mailList; SimpleCSharp.Marshaler.Read(__msg, out mailList);
            List<SimpleCSharp.NoticeMailInfo> noticeMailInfoList; SimpleCSharp.Marshaler.Read(__msg, out noticeMailInfoList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += mailList.ToString() + ",";
                parameterString += noticeMailInfoList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestMailListOK, RmiName_CG_RequestMailListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMailListOK;
                summary.rmiName = RmiName_CG_RequestMailListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMailListOK(remote, ctx, mailList, noticeMailInfoList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMailListOK;
                summary.rmiName = RmiName_CG_RequestMailListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMailConfirmOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            int mailSN; SimpleCSharp.Marshaler.Read(__msg, out mailSN);
            SimpleCSharp.MailHistoryInfo mailHistoryInfo; SimpleCSharp.Marshaler.Read(__msg, out mailHistoryInfo);
            SimpleCSharp.ItemResultInfo itemResultInfo; SimpleCSharp.Marshaler.Read(__msg, out itemResultInfo);
            SimpleCSharp.ApRewardInfo apRewardInfo; SimpleCSharp.Marshaler.Read(__msg, out apRewardInfo);
            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailConfirmOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += mailSN.ToString() + ",";
                parameterString += mailHistoryInfo.ToString() + ",";
                parameterString += itemResultInfo.ToString() + ",";
                parameterString += apRewardInfo.ToString() + ",";
                parameterString += missionResult.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestMailConfirmOK, RmiName_CG_RequestMailConfirmOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMailConfirmOK;
                summary.rmiName = RmiName_CG_RequestMailConfirmOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMailConfirmOK(remote, ctx, mailSN, mailHistoryInfo, itemResultInfo, apRewardInfo, missionResult);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailConfirmOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMailConfirmOK;
                summary.rmiName = RmiName_CG_RequestMailConfirmOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMailConfirmAllOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            List<int> mailSNList; SimpleCSharp.Marshaler.Read(__msg, out mailSNList);
            List<SimpleCSharp.ItemResultInfo> itemResultInfoList; SimpleCSharp.Marshaler.Read(__msg, out itemResultInfoList);
            List<SimpleCSharp.ApRewardInfo> apRewardInfoList; SimpleCSharp.Marshaler.Read(__msg, out apRewardInfoList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailConfirmAllOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += mailSNList.ToString() + ",";
                parameterString += itemResultInfoList.ToString() + ",";
                parameterString += apRewardInfoList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestMailConfirmAllOK, RmiName_CG_RequestMailConfirmAllOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMailConfirmAllOK;
                summary.rmiName = RmiName_CG_RequestMailConfirmAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMailConfirmAllOK(remote, ctx, mailSNList, itemResultInfoList, apRewardInfoList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailConfirmAllOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMailConfirmAllOK;
                summary.rmiName = RmiName_CG_RequestMailConfirmAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMailHistoryListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailHistoryListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMailHistoryListOK, RmiName_CG_RequestMailHistoryListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMailHistoryListOK;
                summary.rmiName = RmiName_CG_RequestMailHistoryListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMailHistoryListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailHistoryListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMailHistoryListOK;
                summary.rmiName = RmiName_CG_RequestMailHistoryListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMailRecentlyHistoryListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailRecentlyHistoryListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMailRecentlyHistoryListOK, RmiName_CG_RequestMailRecentlyHistoryListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMailRecentlyHistoryListOK;
                summary.rmiName = RmiName_CG_RequestMailRecentlyHistoryListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMailRecentlyHistoryListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailRecentlyHistoryListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMailRecentlyHistoryListOK;
                summary.rmiName = RmiName_CG_RequestMailRecentlyHistoryListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendMailListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendMailListOK, RmiName_CG_RequestFriendMailListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendMailListOK;
                summary.rmiName = RmiName_CG_RequestFriendMailListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendMailListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendMailListOK;
                summary.rmiName = RmiName_CG_RequestFriendMailListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendMailConfirmOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailConfirmOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendMailConfirmOK, RmiName_CG_RequestFriendMailConfirmOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendMailConfirmOK;
                summary.rmiName = RmiName_CG_RequestFriendMailConfirmOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendMailConfirmOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailConfirmOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendMailConfirmOK;
                summary.rmiName = RmiName_CG_RequestFriendMailConfirmOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendMailConfirmAllOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendMailConfirmAllOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendMailConfirmAllOK, RmiName_CG_RequestFriendMailConfirmAllOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendMailConfirmAllOK;
                summary.rmiName = RmiName_CG_RequestFriendMailConfirmAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendMailConfirmAllOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendMailConfirmAllOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendMailConfirmAllOK;
                summary.rmiName = RmiName_CG_RequestFriendMailConfirmAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestNoticeMailRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            int noticeMailSEQ; SimpleCSharp.Marshaler.Read(__msg, out noticeMailSEQ);
            List<SimpleCSharp.ItemResultInfo> getItemResultInfoList; SimpleCSharp.Marshaler.Read(__msg, out getItemResultInfoList);
            List<SimpleCSharp.ApRewardInfo> apRewardInfoList; SimpleCSharp.Marshaler.Read(__msg, out apRewardInfoList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestNoticeMailRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += noticeMailSEQ.ToString() + ",";
                parameterString += getItemResultInfoList.ToString() + ",";
                parameterString += apRewardInfoList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestNoticeMailRewardOK, RmiName_CG_RequestNoticeMailRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestNoticeMailRewardOK;
                summary.rmiName = RmiName_CG_RequestNoticeMailRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestNoticeMailRewardOK(remote, ctx, noticeMailSEQ, getItemResultInfoList, apRewardInfoList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNoticeMailRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestNoticeMailRewardOK;
                summary.rmiName = RmiName_CG_RequestNoticeMailRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPackageMailListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageMailListOK, RmiName_CG_RequestPackageMailListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPackageMailListOK;
                summary.rmiName = RmiName_CG_RequestPackageMailListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPackageMailListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPackageMailListOK;
                summary.rmiName = RmiName_CG_RequestPackageMailListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPackageMailGetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailGetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageMailGetOK, RmiName_CG_RequestPackageMailGetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPackageMailGetOK;
                summary.rmiName = RmiName_CG_RequestPackageMailGetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPackageMailGetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailGetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPackageMailGetOK;
                summary.rmiName = RmiName_CG_RequestPackageMailGetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPackageMailHistoryListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMailHistoryListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageMailHistoryListOK, RmiName_CG_RequestPackageMailHistoryListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPackageMailHistoryListOK;
                summary.rmiName = RmiName_CG_RequestPackageMailHistoryListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPackageMailHistoryListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMailHistoryListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPackageMailHistoryListOK;
                summary.rmiName = RmiName_CG_RequestPackageMailHistoryListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLevelUpPackageRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLevelUpPackageRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLevelUpPackageRewardOK, RmiName_CG_RequestLevelUpPackageRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLevelUpPackageRewardOK;
                summary.rmiName = RmiName_CG_RequestLevelUpPackageRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLevelUpPackageRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLevelUpPackageRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLevelUpPackageRewardOK;
                summary.rmiName = RmiName_CG_RequestLevelUpPackageRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLevelUpPackageRewardAllOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLevelUpPackageRewardAllOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLevelUpPackageRewardAllOK, RmiName_CG_RequestLevelUpPackageRewardAllOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLevelUpPackageRewardAllOK;
                summary.rmiName = RmiName_CG_RequestLevelUpPackageRewardAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLevelUpPackageRewardAllOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLevelUpPackageRewardAllOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLevelUpPackageRewardAllOK;
                summary.rmiName = RmiName_CG_RequestLevelUpPackageRewardAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAttendancePackageRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendancePackageRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAttendancePackageRewardOK, RmiName_CG_RequestAttendancePackageRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAttendancePackageRewardOK;
                summary.rmiName = RmiName_CG_RequestAttendancePackageRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAttendancePackageRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendancePackageRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAttendancePackageRewardOK;
                summary.rmiName = RmiName_CG_RequestAttendancePackageRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAttendancePackageRewardAllOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendancePackageRewardAllOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAttendancePackageRewardAllOK, RmiName_CG_RequestAttendancePackageRewardAllOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAttendancePackageRewardAllOK;
                summary.rmiName = RmiName_CG_RequestAttendancePackageRewardAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAttendancePackageRewardAllOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendancePackageRewardAllOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAttendancePackageRewardAllOK;
                summary.rmiName = RmiName_CG_RequestAttendancePackageRewardAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMailADRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMailADRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMailADRewardOK, RmiName_CG_RequestMailADRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMailADRewardOK;
                summary.rmiName = RmiName_CG_RequestMailADRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMailADRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMailADRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMailADRewardOK;
                summary.rmiName = RmiName_CG_RequestMailADRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemInventoryBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemInventoryBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemInventoryBuyOK, RmiName_CG_RequestItemInventoryBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemInventoryBuyOK;
                summary.rmiName = RmiName_CG_RequestItemInventoryBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemInventoryBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemInventoryBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemInventoryBuyOK;
                summary.rmiName = RmiName_CG_RequestItemInventoryBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeaponInventoryBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeaponInventoryBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeaponInventoryBuyOK, RmiName_CG_RequestWeaponInventoryBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponInventoryBuyOK;
                summary.rmiName = RmiName_CG_RequestWeaponInventoryBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeaponInventoryBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeaponInventoryBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeaponInventoryBuyOK;
                summary.rmiName = RmiName_CG_RequestWeaponInventoryBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeekStageKeyBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeekStageKeyBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeekStageKeyBuyOK, RmiName_CG_RequestWeekStageKeyBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeekStageKeyBuyOK;
                summary.rmiName = RmiName_CG_RequestWeekStageKeyBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeekStageKeyBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeekStageKeyBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeekStageKeyBuyOK;
                summary.rmiName = RmiName_CG_RequestWeekStageKeyBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDiaShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDiaShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDiaShopInfoOK, RmiName_CG_RequestDiaShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDiaShopInfoOK;
                summary.rmiName = RmiName_CG_RequestDiaShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDiaShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDiaShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDiaShopInfoOK;
                summary.rmiName = RmiName_CG_RequestDiaShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDiaShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDiaShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDiaShopBuyOK, RmiName_CG_RequestDiaShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDiaShopBuyOK;
                summary.rmiName = RmiName_CG_RequestDiaShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDiaShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDiaShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDiaShopBuyOK;
                summary.rmiName = RmiName_CG_RequestDiaShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGambleShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGambleShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGambleShopBuyOK, RmiName_CG_RequestGambleShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGambleShopBuyOK;
                summary.rmiName = RmiName_CG_RequestGambleShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGambleShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGambleShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGambleShopBuyOK;
                summary.rmiName = RmiName_CG_RequestGambleShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemGambleShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemGambleShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemGambleShopInfoOK, RmiName_CG_RequestItemGambleShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemGambleShopInfoOK;
                summary.rmiName = RmiName_CG_RequestItemGambleShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemGambleShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemGambleShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemGambleShopInfoOK;
                summary.rmiName = RmiName_CG_RequestItemGambleShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemGambleShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemGambleShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemGambleShopBuyOK, RmiName_CG_RequestItemGambleShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemGambleShopBuyOK;
                summary.rmiName = RmiName_CG_RequestItemGambleShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemGambleShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemGambleShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemGambleShopBuyOK;
                summary.rmiName = RmiName_CG_RequestItemGambleShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRandomShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopBuyOK, RmiName_CG_RequestRandomShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopBuyOK;
                summary.rmiName = RmiName_CG_RequestRandomShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRandomShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopBuyOK;
                summary.rmiName = RmiName_CG_RequestRandomShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRandomShopRefreshOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopRefreshOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopRefreshOK, RmiName_CG_RequestRandomShopRefreshOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopRefreshOK;
                summary.rmiName = RmiName_CG_RequestRandomShopRefreshOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRandomShopRefreshOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopRefreshOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopRefreshOK;
                summary.rmiName = RmiName_CG_RequestRandomShopRefreshOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRandomShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopInfoOK, RmiName_CG_RequestRandomShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopInfoOK;
                summary.rmiName = RmiName_CG_RequestRandomShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRandomShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopInfoOK;
                summary.rmiName = RmiName_CG_RequestRandomShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointShopInfoOK, RmiName_CG_RequestBasePointShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointShopInfoOK;
                summary.rmiName = RmiName_CG_RequestBasePointShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointShopInfoOK;
                summary.rmiName = RmiName_CG_RequestBasePointShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointShopBuyOK, RmiName_CG_RequestBasePointShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointShopBuyOK;
                summary.rmiName = RmiName_CG_RequestBasePointShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointShopBuyOK;
                summary.rmiName = RmiName_CG_RequestBasePointShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpShopInfoOK, RmiName_CG_RequestArenaRealTimePvpShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpShopInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpShopInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpShopBuyOK, RmiName_CG_RequestArenaRealTimePvpShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpShopBuyOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpShopBuyOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCoinShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCoinShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCoinShopInfoOK, RmiName_CG_RequestCoinShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCoinShopInfoOK;
                summary.rmiName = RmiName_CG_RequestCoinShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCoinShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCoinShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCoinShopInfoOK;
                summary.rmiName = RmiName_CG_RequestCoinShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCoinShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCoinShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCoinShopBuyOK, RmiName_CG_RequestCoinShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCoinShopBuyOK;
                summary.rmiName = RmiName_CG_RequestCoinShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCoinShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCoinShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCoinShopBuyOK;
                summary.rmiName = RmiName_CG_RequestCoinShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCoinShopDailyBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCoinShopDailyBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCoinShopDailyBuyOK, RmiName_CG_RequestCoinShopDailyBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCoinShopDailyBuyOK;
                summary.rmiName = RmiName_CG_RequestCoinShopDailyBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCoinShopDailyBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCoinShopDailyBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCoinShopDailyBuyOK;
                summary.rmiName = RmiName_CG_RequestCoinShopDailyBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeShopInfoOK, RmiName_CG_RequestCostumeShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeShopInfoOK;
                summary.rmiName = RmiName_CG_RequestCostumeShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeShopInfoOK;
                summary.rmiName = RmiName_CG_RequestCostumeShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeShopBuyOK, RmiName_CG_RequestCostumeShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeShopBuyOK;
                summary.rmiName = RmiName_CG_RequestCostumeShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeShopBuyOK;
                summary.rmiName = RmiName_CG_RequestCostumeShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendPointShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendPointShopInfoOK, RmiName_CG_RequestFriendPointShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendPointShopInfoOK;
                summary.rmiName = RmiName_CG_RequestFriendPointShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendPointShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendPointShopInfoOK;
                summary.rmiName = RmiName_CG_RequestFriendPointShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendPointShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendPointShopBuyOK, RmiName_CG_RequestFriendPointShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendPointShopBuyOK;
                summary.rmiName = RmiName_CG_RequestFriendPointShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendPointShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendPointShopBuyOK;
                summary.rmiName = RmiName_CG_RequestFriendPointShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCommonItemSellOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCommonItemSellOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCommonItemSellOK, RmiName_CG_RequestCommonItemSellOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCommonItemSellOK;
                summary.rmiName = RmiName_CG_RequestCommonItemSellOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCommonItemSellOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCommonItemSellOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCommonItemSellOK;
                summary.rmiName = RmiName_CG_RequestCommonItemSellOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCommonItemRemoveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCommonItemRemoveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCommonItemRemoveOK, RmiName_CG_RequestCommonItemRemoveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCommonItemRemoveOK;
                summary.rmiName = RmiName_CG_RequestCommonItemRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCommonItemRemoveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCommonItemRemoveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCommonItemRemoveOK;
                summary.rmiName = RmiName_CG_RequestCommonItemRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPackageShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageShopInfoOK, RmiName_CG_RequestPackageShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPackageShopInfoOK;
                summary.rmiName = RmiName_CG_RequestPackageShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPackageShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPackageShopInfoOK;
                summary.rmiName = RmiName_CG_RequestPackageShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGambleShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGambleShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGambleShopInfoOK, RmiName_CG_RequestGambleShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGambleShopInfoOK;
                summary.rmiName = RmiName_CG_RequestGambleShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGambleShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGambleShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGambleShopInfoOK;
                summary.rmiName = RmiName_CG_RequestGambleShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestADRouletteRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestADRouletteRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestADRouletteRewardOK, RmiName_CG_RequestADRouletteRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestADRouletteRewardOK;
                summary.rmiName = RmiName_CG_RequestADRouletteRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestADRouletteRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestADRouletteRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestADRouletteRewardOK;
                summary.rmiName = RmiName_CG_RequestADRouletteRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRandomShopVisitRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopVisitRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopVisitRewardOK, RmiName_CG_RequestRandomShopVisitRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopVisitRewardOK;
                summary.rmiName = RmiName_CG_RequestRandomShopVisitRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRandomShopVisitRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopVisitRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopVisitRewardOK;
                summary.rmiName = RmiName_CG_RequestRandomShopVisitRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRandomShopScheduleInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRandomShopScheduleInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRandomShopScheduleInfoOK, RmiName_CG_RequestRandomShopScheduleInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopScheduleInfoOK;
                summary.rmiName = RmiName_CG_RequestRandomShopScheduleInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRandomShopScheduleInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRandomShopScheduleInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRandomShopScheduleInfoOK;
                summary.rmiName = RmiName_CG_RequestRandomShopScheduleInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPackageBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageBuyOK, RmiName_CG_RequestPackageBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPackageBuyOK;
                summary.rmiName = RmiName_CG_RequestPackageBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPackageBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPackageBuyOK;
                summary.rmiName = RmiName_CG_RequestPackageBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBuyDiaOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBuyDiaOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBuyDiaOK, RmiName_CG_RequestBuyDiaOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBuyDiaOK;
                summary.rmiName = RmiName_CG_RequestBuyDiaOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBuyDiaOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBuyDiaOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBuyDiaOK;
                summary.rmiName = RmiName_CG_RequestBuyDiaOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBuyGoldOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBuyGoldOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBuyGoldOK, RmiName_CG_RequestBuyGoldOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBuyGoldOK;
                summary.rmiName = RmiName_CG_RequestBuyGoldOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBuyGoldOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBuyGoldOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBuyGoldOK;
                summary.rmiName = RmiName_CG_RequestBuyGoldOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBuyStaminaOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBuyStaminaOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBuyStaminaOK, RmiName_CG_RequestBuyStaminaOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBuyStaminaOK;
                summary.rmiName = RmiName_CG_RequestBuyStaminaOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBuyStaminaOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBuyStaminaOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBuyStaminaOK;
                summary.rmiName = RmiName_CG_RequestBuyStaminaOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildShopInfoOK, RmiName_CG_RequestGuildShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildShopInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildShopInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildShopBuyOK, RmiName_CG_RequestGuildShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildShopBuyOK;
                summary.rmiName = RmiName_CG_RequestGuildShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildShopBuyOK;
                summary.rmiName = RmiName_CG_RequestGuildShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointShopResetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointShopResetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointShopResetOK, RmiName_CG_RequestBasePointShopResetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointShopResetOK;
                summary.rmiName = RmiName_CG_RequestBasePointShopResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointShopResetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointShopResetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointShopResetOK;
                summary.rmiName = RmiName_CG_RequestBasePointShopResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpShopResetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpShopResetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpShopResetOK, RmiName_CG_RequestArenaRealTimePvpShopResetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpShopResetOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpShopResetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpShopResetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpShopResetOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpShopResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCostumeShopPackageBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCostumeShopPackageBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCostumeShopPackageBuyOK, RmiName_CG_RequestCostumeShopPackageBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeShopPackageBuyOK;
                summary.rmiName = RmiName_CG_RequestCostumeShopPackageBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCostumeShopPackageBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCostumeShopPackageBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCostumeShopPackageBuyOK;
                summary.rmiName = RmiName_CG_RequestCostumeShopPackageBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFinalBossShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFinalBossShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFinalBossShopInfoOK, RmiName_CG_RequestFinalBossShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFinalBossShopInfoOK;
                summary.rmiName = RmiName_CG_RequestFinalBossShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFinalBossShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFinalBossShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFinalBossShopInfoOK;
                summary.rmiName = RmiName_CG_RequestFinalBossShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFinalBossShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFinalBossShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFinalBossShopBuyOK, RmiName_CG_RequestFinalBossShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFinalBossShopBuyOK;
                summary.rmiName = RmiName_CG_RequestFinalBossShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFinalBossShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFinalBossShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFinalBossShopBuyOK;
                summary.rmiName = RmiName_CG_RequestFinalBossShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventCollaborationCoinShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCollaborationCoinShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventCollaborationCoinShopInfoOK, RmiName_CG_RequestEventCollaborationCoinShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventCollaborationCoinShopInfoOK;
                summary.rmiName = RmiName_CG_RequestEventCollaborationCoinShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventCollaborationCoinShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCollaborationCoinShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventCollaborationCoinShopInfoOK;
                summary.rmiName = RmiName_CG_RequestEventCollaborationCoinShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventCollaborationCoinShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventCollaborationCoinShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventCollaborationCoinShopBuyOK, RmiName_CG_RequestEventCollaborationCoinShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventCollaborationCoinShopBuyOK;
                summary.rmiName = RmiName_CG_RequestEventCollaborationCoinShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventCollaborationCoinShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventCollaborationCoinShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventCollaborationCoinShopBuyOK;
                summary.rmiName = RmiName_CG_RequestEventCollaborationCoinShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildShopResetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildShopResetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildShopResetOK, RmiName_CG_RequestGuildShopResetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildShopResetOK;
                summary.rmiName = RmiName_CG_RequestGuildShopResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildShopResetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildShopResetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildShopResetOK;
                summary.rmiName = RmiName_CG_RequestGuildShopResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCoinShopOnceBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCoinShopOnceBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCoinShopOnceBuyOK, RmiName_CG_RequestCoinShopOnceBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCoinShopOnceBuyOK;
                summary.rmiName = RmiName_CG_RequestCoinShopOnceBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCoinShopOnceBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCoinShopOnceBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCoinShopOnceBuyOK;
                summary.rmiName = RmiName_CG_RequestCoinShopOnceBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBingoGambleShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBingoGambleShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBingoGambleShopInfoOK, RmiName_CG_RequestBingoGambleShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBingoGambleShopInfoOK;
                summary.rmiName = RmiName_CG_RequestBingoGambleShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBingoGambleShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBingoGambleShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBingoGambleShopInfoOK;
                summary.rmiName = RmiName_CG_RequestBingoGambleShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBingoGambleShopResetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBingoGambleShopResetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBingoGambleShopResetOK, RmiName_CG_RequestBingoGambleShopResetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBingoGambleShopResetOK;
                summary.rmiName = RmiName_CG_RequestBingoGambleShopResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBingoGambleShopResetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBingoGambleShopResetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBingoGambleShopResetOK;
                summary.rmiName = RmiName_CG_RequestBingoGambleShopResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBingoGambleShopRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBingoGambleShopRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBingoGambleShopRewardOK, RmiName_CG_RequestBingoGambleShopRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBingoGambleShopRewardOK;
                summary.rmiName = RmiName_CG_RequestBingoGambleShopRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBingoGambleShopRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBingoGambleShopRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBingoGambleShopRewardOK;
                summary.rmiName = RmiName_CG_RequestBingoGambleShopRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDiaShopPackageBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDiaShopPackageBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDiaShopPackageBuyOK, RmiName_CG_RequestDiaShopPackageBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDiaShopPackageBuyOK;
                summary.rmiName = RmiName_CG_RequestDiaShopPackageBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDiaShopPackageBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDiaShopPackageBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDiaShopPackageBuyOK;
                summary.rmiName = RmiName_CG_RequestDiaShopPackageBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGambleChoiceShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGambleChoiceShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGambleChoiceShopBuyOK, RmiName_CG_RequestGambleChoiceShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGambleChoiceShopBuyOK;
                summary.rmiName = RmiName_CG_RequestGambleChoiceShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGambleChoiceShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGambleChoiceShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGambleChoiceShopBuyOK;
                summary.rmiName = RmiName_CG_RequestGambleChoiceShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFreePackageRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFreePackageRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFreePackageRewardOK, RmiName_CG_RequestFreePackageRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFreePackageRewardOK;
                summary.rmiName = RmiName_CG_RequestFreePackageRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFreePackageRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFreePackageRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFreePackageRewardOK;
                summary.rmiName = RmiName_CG_RequestFreePackageRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPackageMissionCloseOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPackageMissionCloseOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPackageMissionCloseOK, RmiName_CG_RequestPackageMissionCloseOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPackageMissionCloseOK;
                summary.rmiName = RmiName_CG_RequestPackageMissionCloseOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPackageMissionCloseOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPackageMissionCloseOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPackageMissionCloseOK;
                summary.rmiName = RmiName_CG_RequestPackageMissionCloseOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMissionProgressOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionProgressOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += missionResult.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestMissionProgressOK, RmiName_CG_RequestMissionProgressOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMissionProgressOK;
                summary.rmiName = RmiName_CG_RequestMissionProgressOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMissionProgressOK(remote, ctx, missionResult);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionProgressOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMissionProgressOK;
                summary.rmiName = RmiName_CG_RequestMissionProgressOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMissionClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.MissionClearResultInfo missionClearResultInfo; SimpleCSharp.Marshaler.Read(__msg, out missionClearResultInfo);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += missionClearResultInfo.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestMissionClearOK, RmiName_CG_RequestMissionClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMissionClearOK;
                summary.rmiName = RmiName_CG_RequestMissionClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMissionClearOK(remote, ctx, missionClearResultInfo);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMissionClearOK;
                summary.rmiName = RmiName_CG_RequestMissionClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMissionEventClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.MissionClearResultInfo missionClearResultInfo; SimpleCSharp.Marshaler.Read(__msg, out missionClearResultInfo);
            List<SimpleCSharp.EventMissionClearRequestInfo> eventMissionClearRequestInfoList; SimpleCSharp.Marshaler.Read(__msg, out eventMissionClearRequestInfoList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionEventClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += missionClearResultInfo.ToString() + ",";
                parameterString += eventMissionClearRequestInfoList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestMissionEventClearOK, RmiName_CG_RequestMissionEventClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMissionEventClearOK;
                summary.rmiName = RmiName_CG_RequestMissionEventClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMissionEventClearOK(remote, ctx, missionClearResultInfo, eventMissionClearRequestInfoList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionEventClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMissionEventClearOK;
                summary.rmiName = RmiName_CG_RequestMissionEventClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestMissionGetAchievePointRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestMissionGetAchievePointRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestMissionGetAchievePointRewardOK, RmiName_CG_RequestMissionGetAchievePointRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestMissionGetAchievePointRewardOK;
                summary.rmiName = RmiName_CG_RequestMissionGetAchievePointRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestMissionGetAchievePointRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestMissionGetAchievePointRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestMissionGetAchievePointRewardOK;
                summary.rmiName = RmiName_CG_RequestMissionGetAchievePointRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestQuestStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.QuestProgressInfo progressInfo; SimpleCSharp.Marshaler.Read(__msg, out progressInfo);
            SimpleCSharp.ItemResultInfo questItemInfo; SimpleCSharp.Marshaler.Read(__msg, out questItemInfo);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += progressInfo.ToString() + ",";
                parameterString += questItemInfo.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestQuestStartOK, RmiName_CG_RequestQuestStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestQuestStartOK;
                summary.rmiName = RmiName_CG_RequestQuestStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestQuestStartOK(remote, ctx, progressInfo, questItemInfo);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestQuestStartOK;
                summary.rmiName = RmiName_CG_RequestQuestStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestQuestProgressOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.QuestProgressInfo progressInfo; SimpleCSharp.Marshaler.Read(__msg, out progressInfo);
            List<SimpleCSharp.ItemResultInfo> getItemInfolist; SimpleCSharp.Marshaler.Read(__msg, out getItemInfolist);
            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestProgressOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += progressInfo.ToString() + ",";
                parameterString += getItemInfolist.ToString() + ",";
                parameterString += missionResult.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestQuestProgressOK, RmiName_CG_RequestQuestProgressOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestQuestProgressOK;
                summary.rmiName = RmiName_CG_RequestQuestProgressOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestQuestProgressOK(remote, ctx, progressInfo, getItemInfolist, missionResult);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestProgressOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestQuestProgressOK;
                summary.rmiName = RmiName_CG_RequestQuestProgressOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestQuestClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.QuestClearResultInfo clearResultInfo; SimpleCSharp.Marshaler.Read(__msg, out clearResultInfo);
            List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList; SimpleCSharp.Marshaler.Read(__msg, out userPackageMissionInfoList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += clearResultInfo.ToString() + ",";
                parameterString += userPackageMissionInfoList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestQuestClearOK, RmiName_CG_RequestQuestClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestQuestClearOK;
                summary.rmiName = RmiName_CG_RequestQuestClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestQuestClearOK(remote, ctx, clearResultInfo, userPackageMissionInfoList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestQuestClearOK;
                summary.rmiName = RmiName_CG_RequestQuestClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestQuestRemoveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestRemoveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestQuestRemoveOK, RmiName_CG_RequestQuestRemoveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestQuestRemoveOK;
                summary.rmiName = RmiName_CG_RequestQuestRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestQuestRemoveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestRemoveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestQuestRemoveOK;
                summary.rmiName = RmiName_CG_RequestQuestRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestNetmarbleQuestAchieveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestNetmarbleQuestAchieveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestNetmarbleQuestAchieveOK, RmiName_CG_RequestNetmarbleQuestAchieveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestNetmarbleQuestAchieveOK;
                summary.rmiName = RmiName_CG_RequestNetmarbleQuestAchieveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestNetmarbleQuestAchieveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNetmarbleQuestAchieveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestNetmarbleQuestAchieveOK;
                summary.rmiName = RmiName_CG_RequestNetmarbleQuestAchieveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestNetmarbleQuestRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestNetmarbleQuestRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestNetmarbleQuestRewardOK, RmiName_CG_RequestNetmarbleQuestRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestNetmarbleQuestRewardOK;
                summary.rmiName = RmiName_CG_RequestNetmarbleQuestRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestNetmarbleQuestRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestNetmarbleQuestRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestNetmarbleQuestRewardOK;
                summary.rmiName = RmiName_CG_RequestNetmarbleQuestRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDirectSelectorRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDirectSelectorRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDirectSelectorRewardOK, RmiName_CG_RequestDirectSelectorRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDirectSelectorRewardOK;
                summary.rmiName = RmiName_CG_RequestDirectSelectorRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDirectSelectorRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDirectSelectorRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDirectSelectorRewardOK;
                summary.rmiName = RmiName_CG_RequestDirectSelectorRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestQuestChapterClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestChapterClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestQuestChapterClearOK, RmiName_CG_RequestQuestChapterClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestQuestChapterClearOK;
                summary.rmiName = RmiName_CG_RequestQuestChapterClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestQuestChapterClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestChapterClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestQuestChapterClearOK;
                summary.rmiName = RmiName_CG_RequestQuestChapterClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventQuestClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventQuestClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventQuestClearOK, RmiName_CG_RequestEventQuestClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventQuestClearOK;
                summary.rmiName = RmiName_CG_RequestEventQuestClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventQuestClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventQuestClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventQuestClearOK;
                summary.rmiName = RmiName_CG_RequestEventQuestClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAnotherQuestClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAnotherQuestClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAnotherQuestClearOK, RmiName_CG_RequestAnotherQuestClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAnotherQuestClearOK;
                summary.rmiName = RmiName_CG_RequestAnotherQuestClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAnotherQuestClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAnotherQuestClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAnotherQuestClearOK;
                summary.rmiName = RmiName_CG_RequestAnotherQuestClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestQuestGuideListAllClearRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestQuestGuideListAllClearRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestQuestGuideListAllClearRewardOK, RmiName_CG_RequestQuestGuideListAllClearRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestQuestGuideListAllClearRewardOK;
                summary.rmiName = RmiName_CG_RequestQuestGuideListAllClearRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestQuestGuideListAllClearRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestQuestGuideListAllClearRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestQuestGuideListAllClearRewardOK;
                summary.rmiName = RmiName_CG_RequestQuestGuideListAllClearRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyVRSearchOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyVRSearchOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyVRSearchOK, RmiName_CG_RequestLobbyVRSearchOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyVRSearchOK;
                summary.rmiName = RmiName_CG_RequestLobbyVRSearchOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyVRSearchOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyVRSearchOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyVRSearchOK;
                summary.rmiName = RmiName_CG_RequestLobbyVRSearchOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyVRHelbramOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyVRHelbramOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyVRHelbramOK, RmiName_CG_RequestLobbyVRHelbramOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyVRHelbramOK;
                summary.rmiName = RmiName_CG_RequestLobbyVRHelbramOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyVRHelbramOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyVRHelbramOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyVRHelbramOK;
                summary.rmiName = RmiName_CG_RequestLobbyVRHelbramOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyNpcSkinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.UserNpc userNpcInfo; SimpleCSharp.Marshaler.Read(__msg, out userNpcInfo);
            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcSkinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += userNpcInfo.ToString() + ",";
                parameterString += missionResult.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestLobbyNpcSkinOK, RmiName_CG_RequestLobbyNpcSkinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyNpcSkinOK;
                summary.rmiName = RmiName_CG_RequestLobbyNpcSkinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyNpcSkinOK(remote, ctx, userNpcInfo, missionResult);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcSkinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyNpcSkinOK;
                summary.rmiName = RmiName_CG_RequestLobbyNpcSkinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyNpcGiftOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcGiftOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyNpcGiftOK, RmiName_CG_RequestLobbyNpcGiftOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyNpcGiftOK;
                summary.rmiName = RmiName_CG_RequestLobbyNpcGiftOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyNpcGiftOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcGiftOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyNpcGiftOK;
                summary.rmiName = RmiName_CG_RequestLobbyNpcGiftOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyKingAmberOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyKingAmberOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyKingAmberOK, RmiName_CG_RequestLobbyKingAmberOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyKingAmberOK;
                summary.rmiName = RmiName_CG_RequestLobbyKingAmberOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyKingAmberOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyKingAmberOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyKingAmberOK;
                summary.rmiName = RmiName_CG_RequestLobbyKingAmberOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyDropInteractiveOpenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyDropInteractiveOpenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyDropInteractiveOpenOK, RmiName_CG_RequestLobbyDropInteractiveOpenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyDropInteractiveOpenOK;
                summary.rmiName = RmiName_CG_RequestLobbyDropInteractiveOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyDropInteractiveOpenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyDropInteractiveOpenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyDropInteractiveOpenOK;
                summary.rmiName = RmiName_CG_RequestLobbyDropInteractiveOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyUniqueInteractiveOpenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyUniqueInteractiveOpenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyUniqueInteractiveOpenOK, RmiName_CG_RequestLobbyUniqueInteractiveOpenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyUniqueInteractiveOpenOK;
                summary.rmiName = RmiName_CG_RequestLobbyUniqueInteractiveOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyUniqueInteractiveOpenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyUniqueInteractiveOpenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyUniqueInteractiveOpenOK;
                summary.rmiName = RmiName_CG_RequestLobbyUniqueInteractiveOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyNpcTalkInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcTalkInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyNpcTalkInfoOK, RmiName_CG_RequestLobbyNpcTalkInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyNpcTalkInfoOK;
                summary.rmiName = RmiName_CG_RequestLobbyNpcTalkInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyNpcTalkInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcTalkInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyNpcTalkInfoOK;
                summary.rmiName = RmiName_CG_RequestLobbyNpcTalkInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyNpcTalkChoiceOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyNpcTalkChoiceOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyNpcTalkChoiceOK, RmiName_CG_RequestLobbyNpcTalkChoiceOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyNpcTalkChoiceOK;
                summary.rmiName = RmiName_CG_RequestLobbyNpcTalkChoiceOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyNpcTalkChoiceOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyNpcTalkChoiceOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyNpcTalkChoiceOK;
                summary.rmiName = RmiName_CG_RequestLobbyNpcTalkChoiceOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyBarrelOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyBarrelOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyBarrelOK, RmiName_CG_RequestLobbyBarrelOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyBarrelOK;
                summary.rmiName = RmiName_CG_RequestLobbyBarrelOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyBarrelOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyBarrelOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyBarrelOK;
                summary.rmiName = RmiName_CG_RequestLobbyBarrelOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyBarrelRefillOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyBarrelRefillOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyBarrelRefillOK, RmiName_CG_RequestLobbyBarrelRefillOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyBarrelRefillOK;
                summary.rmiName = RmiName_CG_RequestLobbyBarrelRefillOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyBarrelRefillOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyBarrelRefillOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyBarrelRefillOK;
                summary.rmiName = RmiName_CG_RequestLobbyBarrelRefillOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyCleanTableOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyCleanTableOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyCleanTableOK, RmiName_CG_RequestLobbyCleanTableOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyCleanTableOK;
                summary.rmiName = RmiName_CG_RequestLobbyCleanTableOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyCleanTableOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyCleanTableOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyCleanTableOK;
                summary.rmiName = RmiName_CG_RequestLobbyCleanTableOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyServeBeerOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyServeBeerOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyServeBeerOK, RmiName_CG_RequestLobbyServeBeerOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyServeBeerOK;
                summary.rmiName = RmiName_CG_RequestLobbyServeBeerOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyServeBeerOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyServeBeerOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyServeBeerOK;
                summary.rmiName = RmiName_CG_RequestLobbyServeBeerOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyPlayJukeboxOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyPlayJukeboxOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyPlayJukeboxOK, RmiName_CG_RequestLobbyPlayJukeboxOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyPlayJukeboxOK;
                summary.rmiName = RmiName_CG_RequestLobbyPlayJukeboxOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyPlayJukeboxOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyPlayJukeboxOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyPlayJukeboxOK;
                summary.rmiName = RmiName_CG_RequestLobbyPlayJukeboxOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyElizabethTouchOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyElizabethTouchOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyElizabethTouchOK, RmiName_CG_RequestLobbyElizabethTouchOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyElizabethTouchOK;
                summary.rmiName = RmiName_CG_RequestLobbyElizabethTouchOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyElizabethTouchOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyElizabethTouchOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyElizabethTouchOK;
                summary.rmiName = RmiName_CG_RequestLobbyElizabethTouchOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyHawkAngerOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyHawkAngerOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyHawkAngerOK, RmiName_CG_RequestLobbyHawkAngerOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyHawkAngerOK;
                summary.rmiName = RmiName_CG_RequestLobbyHawkAngerOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyHawkAngerOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyHawkAngerOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyHawkAngerOK;
                summary.rmiName = RmiName_CG_RequestLobbyHawkAngerOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAttendanceRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.AttendanceResult attendanceResult; SimpleCSharp.Marshaler.Read(__msg, out attendanceResult);
            List<SimpleCSharp.UserPackageMissionInfo> userPackageMissionInfoList; SimpleCSharp.Marshaler.Read(__msg, out userPackageMissionInfoList);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += attendanceResult.ToString() + ",";
                parameterString += userPackageMissionInfoList.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestAttendanceRewardOK, RmiName_CG_RequestAttendanceRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAttendanceRewardOK;
                summary.rmiName = RmiName_CG_RequestAttendanceRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAttendanceRewardOK(remote, ctx, attendanceResult, userPackageMissionInfoList);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAttendanceRewardOK;
                summary.rmiName = RmiName_CG_RequestAttendanceRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAttendanceEventRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceEventRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAttendanceEventRewardOK, RmiName_CG_RequestAttendanceEventRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAttendanceEventRewardOK;
                summary.rmiName = RmiName_CG_RequestAttendanceEventRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAttendanceEventRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceEventRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAttendanceEventRewardOK;
                summary.rmiName = RmiName_CG_RequestAttendanceEventRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCookingStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingStartOK, RmiName_CG_RequestCookingStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCookingStartOK;
                summary.rmiName = RmiName_CG_RequestCookingStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCookingStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCookingStartOK;
                summary.rmiName = RmiName_CG_RequestCookingStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRecipeActiveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRecipeActiveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRecipeActiveOK, RmiName_CG_RequestRecipeActiveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRecipeActiveOK;
                summary.rmiName = RmiName_CG_RequestRecipeActiveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRecipeActiveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRecipeActiveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRecipeActiveOK;
                summary.rmiName = RmiName_CG_RequestRecipeActiveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCookingRecipeOrderInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeOrderInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeOrderInfoOK, RmiName_CG_RequestCookingRecipeOrderInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeOrderInfoOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeOrderInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCookingRecipeOrderInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeOrderInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeOrderInfoOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeOrderInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCookingRecipeOrderOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeOrderOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeOrderOK, RmiName_CG_RequestCookingRecipeOrderOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeOrderOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeOrderOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCookingRecipeOrderOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeOrderOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeOrderOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeOrderOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCookingRecipeDisorderOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeDisorderOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeDisorderOK, RmiName_CG_RequestCookingRecipeDisorderOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeDisorderOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeDisorderOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCookingRecipeDisorderOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeDisorderOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeDisorderOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeDisorderOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCookingRecipeCollectOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeCollectOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeCollectOK, RmiName_CG_RequestCookingRecipeCollectOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeCollectOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeCollectOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCookingRecipeCollectOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeCollectOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeCollectOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeCollectOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCookingRecipeCollectOneSlotOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingRecipeCollectOneSlotOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingRecipeCollectOneSlotOK, RmiName_CG_RequestCookingRecipeCollectOneSlotOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeCollectOneSlotOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeCollectOneSlotOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCookingRecipeCollectOneSlotOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingRecipeCollectOneSlotOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCookingRecipeCollectOneSlotOK;
                summary.rmiName = RmiName_CG_RequestCookingRecipeCollectOneSlotOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestCookingUseCookingBuffOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestCookingUseCookingBuffOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestCookingUseCookingBuffOK, RmiName_CG_RequestCookingUseCookingBuffOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestCookingUseCookingBuffOK;
                summary.rmiName = RmiName_CG_RequestCookingUseCookingBuffOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestCookingUseCookingBuffOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestCookingUseCookingBuffOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestCookingUseCookingBuffOK;
                summary.rmiName = RmiName_CG_RequestCookingUseCookingBuffOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuestInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestInfoOK, RmiName_CG_RequestGuestInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuestInfoOK;
                summary.rmiName = RmiName_CG_RequestGuestInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuestInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuestInfoOK;
                summary.rmiName = RmiName_CG_RequestGuestInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuestChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestChangeOK, RmiName_CG_RequestGuestChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuestChangeOK;
                summary.rmiName = RmiName_CG_RequestGuestChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuestChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuestChangeOK;
                summary.rmiName = RmiName_CG_RequestGuestChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuestChangeTargetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestChangeTargetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestChangeTargetOK, RmiName_CG_RequestGuestChangeTargetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuestChangeTargetOK;
                summary.rmiName = RmiName_CG_RequestGuestChangeTargetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuestChangeTargetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestChangeTargetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuestChangeTargetOK;
                summary.rmiName = RmiName_CG_RequestGuestChangeTargetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuestTalkOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestTalkOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestTalkOK, RmiName_CG_RequestGuestTalkOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuestTalkOK;
                summary.rmiName = RmiName_CG_RequestGuestTalkOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuestTalkOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestTalkOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuestTalkOK;
                summary.rmiName = RmiName_CG_RequestGuestTalkOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuestGiftOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuestGiftOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuestGiftOK, RmiName_CG_RequestGuestGiftOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuestGiftOK;
                summary.rmiName = RmiName_CG_RequestGuestGiftOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuestGiftOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuestGiftOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuestGiftOK;
                summary.rmiName = RmiName_CG_RequestGuestGiftOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBirthdayNpcInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBirthdayNpcInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBirthdayNpcInfoOK, RmiName_CG_RequestBirthdayNpcInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBirthdayNpcInfoOK;
                summary.rmiName = RmiName_CG_RequestBirthdayNpcInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBirthdayNpcInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBirthdayNpcInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBirthdayNpcInfoOK;
                summary.rmiName = RmiName_CG_RequestBirthdayNpcInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRestRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRestRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRestRewardOK, RmiName_CG_RequestRestRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRestRewardOK;
                summary.rmiName = RmiName_CG_RequestRestRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRestRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRestRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRestRewardOK;
                summary.rmiName = RmiName_CG_RequestRestRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAttendanceFortuneEventRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAttendanceFortuneEventRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAttendanceFortuneEventRewardOK, RmiName_CG_RequestAttendanceFortuneEventRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAttendanceFortuneEventRewardOK;
                summary.rmiName = RmiName_CG_RequestAttendanceFortuneEventRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAttendanceFortuneEventRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAttendanceFortuneEventRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAttendanceFortuneEventRewardOK;
                summary.rmiName = RmiName_CG_RequestAttendanceFortuneEventRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointGoldDonationOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointGoldDonationOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointGoldDonationOK, RmiName_CG_RequestBasePointGoldDonationOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointGoldDonationOK;
                summary.rmiName = RmiName_CG_RequestBasePointGoldDonationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointGoldDonationOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointGoldDonationOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointGoldDonationOK;
                summary.rmiName = RmiName_CG_RequestBasePointGoldDonationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointSetTriggerOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointSetTriggerOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointSetTriggerOK, RmiName_CG_RequestBasePointSetTriggerOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointSetTriggerOK;
                summary.rmiName = RmiName_CG_RequestBasePointSetTriggerOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointSetTriggerOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointSetTriggerOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointSetTriggerOK;
                summary.rmiName = RmiName_CG_RequestBasePointSetTriggerOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointDropInteractiveOpenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDropInteractiveOpenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointDropInteractiveOpenOK, RmiName_CG_RequestBasePointDropInteractiveOpenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointDropInteractiveOpenOK;
                summary.rmiName = RmiName_CG_RequestBasePointDropInteractiveOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointDropInteractiveOpenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDropInteractiveOpenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointDropInteractiveOpenOK;
                summary.rmiName = RmiName_CG_RequestBasePointDropInteractiveOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointUniqueInteractiveOpenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointUniqueInteractiveOpenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointUniqueInteractiveOpenOK, RmiName_CG_RequestBasePointUniqueInteractiveOpenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointUniqueInteractiveOpenOK;
                summary.rmiName = RmiName_CG_RequestBasePointUniqueInteractiveOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointUniqueInteractiveOpenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointUniqueInteractiveOpenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointUniqueInteractiveOpenOK;
                summary.rmiName = RmiName_CG_RequestBasePointUniqueInteractiveOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointDailyRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDailyRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointDailyRewardOK, RmiName_CG_RequestBasePointDailyRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointDailyRewardOK;
                summary.rmiName = RmiName_CG_RequestBasePointDailyRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointDailyRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDailyRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointDailyRewardOK;
                summary.rmiName = RmiName_CG_RequestBasePointDailyRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointDonationEventRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDonationEventRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointDonationEventRewardOK, RmiName_CG_RequestBasePointDonationEventRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointDonationEventRewardOK;
                summary.rmiName = RmiName_CG_RequestBasePointDonationEventRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointDonationEventRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDonationEventRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointDonationEventRewardOK;
                summary.rmiName = RmiName_CG_RequestBasePointDonationEventRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointDonationInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointDonationInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointDonationInfoOK, RmiName_CG_RequestBasePointDonationInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointDonationInfoOK;
                summary.rmiName = RmiName_CG_RequestBasePointDonationInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointDonationInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointDonationInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointDonationInfoOK;
                summary.rmiName = RmiName_CG_RequestBasePointDonationInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBasePointEventGoldDonationOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBasePointEventGoldDonationOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBasePointEventGoldDonationOK, RmiName_CG_RequestBasePointEventGoldDonationOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointEventGoldDonationOK;
                summary.rmiName = RmiName_CG_RequestBasePointEventGoldDonationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBasePointEventGoldDonationOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBasePointEventGoldDonationOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBasePointEventGoldDonationOK;
                summary.rmiName = RmiName_CG_RequestBasePointEventGoldDonationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventBasepointInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventBasepointInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventBasepointInfoOK, RmiName_CG_RequestEventBasepointInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventBasepointInfoOK;
                summary.rmiName = RmiName_CG_RequestEventBasepointInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventBasepointInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventBasepointInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventBasepointInfoOK;
                summary.rmiName = RmiName_CG_RequestEventBasepointInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyDestroyInvite(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyDestroyInvite);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyDestroyInvite, RmiName_GC_NotifyDestroyInvite, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyDestroyInvite;
                summary.rmiName = RmiName_GC_NotifyDestroyInvite;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyDestroyInvite(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyDestroyInvite);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyDestroyInvite;
                summary.rmiName = RmiName_GC_NotifyDestroyInvite;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroySetInviteOptionOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroySetInviteOptionOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroySetInviteOptionOK, RmiName_CG_RequestDestroySetInviteOptionOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroySetInviteOptionOK;
                summary.rmiName = RmiName_CG_RequestDestroySetInviteOptionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroySetInviteOptionOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroySetInviteOptionOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroySetInviteOptionOK;
                summary.rmiName = RmiName_CG_RequestDestroySetInviteOptionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyGetUserLoginListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetUserLoginListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyGetUserLoginListOK, RmiName_CG_RequestDestroyGetUserLoginListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyGetUserLoginListOK;
                summary.rmiName = RmiName_CG_RequestDestroyGetUserLoginListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyGetUserLoginListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetUserLoginListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyGetUserLoginListOK;
                summary.rmiName = RmiName_CG_RequestDestroyGetUserLoginListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyGetFriendLoginListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetFriendLoginListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyGetFriendLoginListOK, RmiName_CG_RequestDestroyGetFriendLoginListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyGetFriendLoginListOK;
                summary.rmiName = RmiName_CG_RequestDestroyGetFriendLoginListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyGetFriendLoginListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetFriendLoginListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyGetFriendLoginListOK;
                summary.rmiName = RmiName_CG_RequestDestroyGetFriendLoginListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyGetGuildLoginListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetGuildLoginListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyGetGuildLoginListOK, RmiName_CG_RequestDestroyGetGuildLoginListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyGetGuildLoginListOK;
                summary.rmiName = RmiName_CG_RequestDestroyGetGuildLoginListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyGetGuildLoginListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetGuildLoginListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyGetGuildLoginListOK;
                summary.rmiName = RmiName_CG_RequestDestroyGetGuildLoginListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyGetReceivedInvitationListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyGetReceivedInvitationListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyGetReceivedInvitationListOK, RmiName_CG_RequestDestroyGetReceivedInvitationListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyGetReceivedInvitationListOK;
                summary.rmiName = RmiName_CG_RequestDestroyGetReceivedInvitationListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyGetReceivedInvitationListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyGetReceivedInvitationListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyGetReceivedInvitationListOK;
                summary.rmiName = RmiName_CG_RequestDestroyGetReceivedInvitationListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyInviteOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyInviteOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyInviteOK, RmiName_CG_RequestDestroyInviteOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyInviteOK;
                summary.rmiName = RmiName_CG_RequestDestroyInviteOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyInviteOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyInviteOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyInviteOK;
                summary.rmiName = RmiName_CG_RequestDestroyInviteOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyRemoveInvitationOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemoveInvitationOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyRemoveInvitationOK, RmiName_CG_RequestDestroyRemoveInvitationOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyRemoveInvitationOK;
                summary.rmiName = RmiName_CG_RequestDestroyRemoveInvitationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyRemoveInvitationOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemoveInvitationOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyRemoveInvitationOK;
                summary.rmiName = RmiName_CG_RequestDestroyRemoveInvitationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyRemoveJoinInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemoveJoinInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyRemoveJoinInfoOK, RmiName_CG_RequestDestroyRemoveJoinInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyRemoveJoinInfoOK;
                summary.rmiName = RmiName_CG_RequestDestroyRemoveJoinInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyRemoveJoinInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemoveJoinInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyRemoveJoinInfoOK;
                summary.rmiName = RmiName_CG_RequestDestroyRemoveJoinInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyCreateOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyCreateOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyCreateOK, RmiName_CG_RequestDestroyCreateOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyCreateOK;
                summary.rmiName = RmiName_CG_RequestDestroyCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyCreateOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyCreateOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyCreateOK;
                summary.rmiName = RmiName_CG_RequestDestroyCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyStartOK, RmiName_CG_RequestDestroyStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyStartOK;
                summary.rmiName = RmiName_CG_RequestDestroyStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyStartOK;
                summary.rmiName = RmiName_CG_RequestDestroyStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyBattleStartOK, RmiName_CG_RequestDestroyBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyBattleStartOK;
                summary.rmiName = RmiName_CG_RequestDestroyBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyBattleStartOK;
                summary.rmiName = RmiName_CG_RequestDestroyBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyJoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyJoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyJoinOK, RmiName_CG_RequestDestroyJoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyJoinOK;
                summary.rmiName = RmiName_CG_RequestDestroyJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyJoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyJoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyJoinOK;
                summary.rmiName = RmiName_CG_RequestDestroyJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyClearOK, RmiName_CG_RequestDestroyClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyClearOK;
                summary.rmiName = RmiName_CG_RequestDestroyClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyClearOK;
                summary.rmiName = RmiName_CG_RequestDestroyClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyReJoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyReJoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyReJoinOK, RmiName_CG_RequestDestroyReJoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyReJoinOK;
                summary.rmiName = RmiName_CG_RequestDestroyReJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyReJoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyReJoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyReJoinOK;
                summary.rmiName = RmiName_CG_RequestDestroyReJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyRemoveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyRemoveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyRemoveOK, RmiName_CG_RequestDestroyRemoveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyRemoveOK;
                summary.rmiName = RmiName_CG_RequestDestroyRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyRemoveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyRemoveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyRemoveOK;
                summary.rmiName = RmiName_CG_RequestDestroyRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyBattleEndOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyBattleEndOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyBattleEndOK, RmiName_CG_RequestDestroyBattleEndOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyBattleEndOK;
                summary.rmiName = RmiName_CG_RequestDestroyBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyBattleEndOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyBattleEndOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyBattleEndOK;
                summary.rmiName = RmiName_CG_RequestDestroyBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyInviteAIOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyInviteAIOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyInviteAIOK, RmiName_CG_RequestDestroyInviteAIOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyInviteAIOK;
                summary.rmiName = RmiName_CG_RequestDestroyInviteAIOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyInviteAIOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyInviteAIOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyInviteAIOK;
                summary.rmiName = RmiName_CG_RequestDestroyInviteAIOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestDestroyKickOutAIOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestDestroyKickOutAIOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestDestroyKickOutAIOK, RmiName_CG_RequestDestroyKickOutAIOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyKickOutAIOK;
                summary.rmiName = RmiName_CG_RequestDestroyKickOutAIOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestDestroyKickOutAIOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestDestroyKickOutAIOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestDestroyKickOutAIOK;
                summary.rmiName = RmiName_CG_RequestDestroyKickOutAIOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventDestroyCreateOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyCreateOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventDestroyCreateOK, RmiName_CG_RequestEventDestroyCreateOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventDestroyCreateOK;
                summary.rmiName = RmiName_CG_RequestEventDestroyCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventDestroyCreateOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyCreateOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventDestroyCreateOK;
                summary.rmiName = RmiName_CG_RequestEventDestroyCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventDestroyClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventDestroyClearOK, RmiName_CG_RequestEventDestroyClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventDestroyClearOK;
                summary.rmiName = RmiName_CG_RequestEventDestroyClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventDestroyClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventDestroyClearOK;
                summary.rmiName = RmiName_CG_RequestEventDestroyClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventDestroyStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventDestroyStartOK, RmiName_CG_RequestEventDestroyStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventDestroyStartOK;
                summary.rmiName = RmiName_CG_RequestEventDestroyStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventDestroyStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventDestroyStartOK;
                summary.rmiName = RmiName_CG_RequestEventDestroyStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventDestroyRemoveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventDestroyRemoveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventDestroyRemoveOK, RmiName_CG_RequestEventDestroyRemoveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventDestroyRemoveOK;
                summary.rmiName = RmiName_CG_RequestEventDestroyRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventDestroyRemoveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventDestroyRemoveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventDestroyRemoveOK;
                summary.rmiName = RmiName_CG_RequestEventDestroyRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventChallengeDestroyCreateOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyCreateOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyCreateOK, RmiName_CG_RequestEventChallengeDestroyCreateOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyCreateOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventChallengeDestroyCreateOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyCreateOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyCreateOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventChallengeDestroyStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyStartOK, RmiName_CG_RequestEventChallengeDestroyStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyStartOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventChallengeDestroyStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyStartOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventChallengeDestroyClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyClearOK, RmiName_CG_RequestEventChallengeDestroyClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyClearOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventChallengeDestroyClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyClearOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventChallengeDestroyPointRefreshOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyPointRefreshOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyPointRefreshOK, RmiName_CG_RequestEventChallengeDestroyPointRefreshOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyPointRefreshOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyPointRefreshOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventChallengeDestroyPointRefreshOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyPointRefreshOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyPointRefreshOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyPointRefreshOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventChallengeDestroyUserRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyUserRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyUserRewardOK, RmiName_CG_RequestEventChallengeDestroyUserRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyUserRewardOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyUserRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventChallengeDestroyUserRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyUserRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyUserRewardOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyUserRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventChallengeDestroyWorldRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventChallengeDestroyWorldRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventChallengeDestroyWorldRewardOK, RmiName_CG_RequestEventChallengeDestroyWorldRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyWorldRewardOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyWorldRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventChallengeDestroyWorldRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventChallengeDestroyWorldRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventChallengeDestroyWorldRewardOK;
                summary.rmiName = RmiName_CG_RequestEventChallengeDestroyWorldRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendListOK, RmiName_CG_RequestFriendListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendListOK;
                summary.rmiName = RmiName_CG_RequestFriendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendListOK;
                summary.rmiName = RmiName_CG_RequestFriendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendGuildInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendGuildInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendGuildInfoOK, RmiName_CG_RequestFriendGuildInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendGuildInfoOK;
                summary.rmiName = RmiName_CG_RequestFriendGuildInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendGuildInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendGuildInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendGuildInfoOK;
                summary.rmiName = RmiName_CG_RequestFriendGuildInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendApplySendListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplySendListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplySendListOK, RmiName_CG_RequestFriendApplySendListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplySendListOK;
                summary.rmiName = RmiName_CG_RequestFriendApplySendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendApplySendListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplySendListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplySendListOK;
                summary.rmiName = RmiName_CG_RequestFriendApplySendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendApplyReceiveListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveListOK, RmiName_CG_RequestFriendApplyReceiveListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveListOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendApplyReceiveListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveListOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendApplySendOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplySendOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplySendOK, RmiName_CG_RequestFriendApplySendOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplySendOK;
                summary.rmiName = RmiName_CG_RequestFriendApplySendOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendApplySendOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplySendOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplySendOK;
                summary.rmiName = RmiName_CG_RequestFriendApplySendOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendApplyRejectOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyRejectOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyRejectOK, RmiName_CG_RequestFriendApplyRejectOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyRejectOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyRejectOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendApplyRejectOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyRejectOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyRejectOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyRejectOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveAcceptOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveAcceptOK, RmiName_CG_RequestFriendApplyReceiveAcceptOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveAcceptOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendApplyReceiveAcceptOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveAcceptOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveAcceptOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendApplyReceiveAcceptListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveAcceptListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveAcceptListOK, RmiName_CG_RequestFriendApplyReceiveAcceptListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveAcceptListOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendApplyReceiveAcceptListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveAcceptListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveAcceptListOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveAcceptListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveRefuseOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveRefuseOK, RmiName_CG_RequestFriendApplyReceiveRefuseOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveRefuseOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendApplyReceiveRefuseOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveRefuseOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveRefuseOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendApplyReceiveRefuseListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendApplyReceiveRefuseListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendApplyReceiveRefuseListOK, RmiName_CG_RequestFriendApplyReceiveRefuseListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveRefuseListOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendApplyReceiveRefuseListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendApplyReceiveRefuseListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendApplyReceiveRefuseListOK;
                summary.rmiName = RmiName_CG_RequestFriendApplyReceiveRefuseListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendRemoveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendRemoveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendRemoveOK, RmiName_CG_RequestFriendRemoveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendRemoveOK;
                summary.rmiName = RmiName_CG_RequestFriendRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendRemoveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendRemoveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendRemoveOK;
                summary.rmiName = RmiName_CG_RequestFriendRemoveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendSearchOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendSearchOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendSearchOK, RmiName_CG_RequestFriendSearchOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendSearchOK;
                summary.rmiName = RmiName_CG_RequestFriendSearchOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendSearchOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendSearchOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendSearchOK;
                summary.rmiName = RmiName_CG_RequestFriendSearchOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendVisitOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendVisitOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendVisitOK, RmiName_CG_RequestFriendVisitOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendVisitOK;
                summary.rmiName = RmiName_CG_RequestFriendVisitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendVisitOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendVisitOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendVisitOK;
                summary.rmiName = RmiName_CG_RequestFriendVisitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendPointSendOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointSendOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendPointSendOK, RmiName_CG_RequestFriendPointSendOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendPointSendOK;
                summary.rmiName = RmiName_CG_RequestFriendPointSendOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendPointSendOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointSendOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendPointSendOK;
                summary.rmiName = RmiName_CG_RequestFriendPointSendOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendPointSendAllOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendPointSendAllOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendPointSendAllOK, RmiName_CG_RequestFriendPointSendAllOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendPointSendAllOK;
                summary.rmiName = RmiName_CG_RequestFriendPointSendAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendPointSendAllOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendPointSendAllOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendPointSendAllOK;
                summary.rmiName = RmiName_CG_RequestFriendPointSendAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendLobbyInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendLobbyInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendLobbyInfoOK, RmiName_CG_RequestFriendLobbyInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestFriendLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendLobbyInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendLobbyInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestFriendLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendCookingRecipeInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingRecipeInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendCookingRecipeInfoOK, RmiName_CG_RequestFriendCookingRecipeInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendCookingRecipeInfoOK;
                summary.rmiName = RmiName_CG_RequestFriendCookingRecipeInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendCookingRecipeInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingRecipeInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendCookingRecipeInfoOK;
                summary.rmiName = RmiName_CG_RequestFriendCookingRecipeInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendCookingEatOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingEatOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendCookingEatOK, RmiName_CG_RequestFriendCookingEatOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendCookingEatOK;
                summary.rmiName = RmiName_CG_RequestFriendCookingEatOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendCookingEatOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingEatOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendCookingEatOK;
                summary.rmiName = RmiName_CG_RequestFriendCookingEatOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendCookingEatFriendListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendCookingEatFriendListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendCookingEatFriendListOK, RmiName_CG_RequestFriendCookingEatFriendListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendCookingEatFriendListOK;
                summary.rmiName = RmiName_CG_RequestFriendCookingEatFriendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendCookingEatFriendListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendCookingEatFriendListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendCookingEatFriendListOK;
                summary.rmiName = RmiName_CG_RequestFriendCookingEatFriendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildRecommendListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildRecommendListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildRecommendListOK, RmiName_CG_RequestGuildRecommendListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildRecommendListOK;
                summary.rmiName = RmiName_CG_RequestGuildRecommendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildRecommendListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildRecommendListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildRecommendListOK;
                summary.rmiName = RmiName_CG_RequestGuildRecommendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildInfoWithMemberListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildInfoWithMemberListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildInfoWithMemberListOK, RmiName_CG_RequestGuildInfoWithMemberListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildInfoWithMemberListOK;
                summary.rmiName = RmiName_CG_RequestGuildInfoWithMemberListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildInfoWithMemberListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildInfoWithMemberListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildInfoWithMemberListOK;
                summary.rmiName = RmiName_CG_RequestGuildInfoWithMemberListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildSearchByNameOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSearchByNameOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSearchByNameOK, RmiName_CG_RequestGuildSearchByNameOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSearchByNameOK;
                summary.rmiName = RmiName_CG_RequestGuildSearchByNameOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildSearchByNameOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSearchByNameOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSearchByNameOK;
                summary.rmiName = RmiName_CG_RequestGuildSearchByNameOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildCreateOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildCreateOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildCreateOK, RmiName_CG_RequestGuildCreateOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildCreateOK;
                summary.rmiName = RmiName_CG_RequestGuildCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildCreateOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildCreateOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildCreateOK;
                summary.rmiName = RmiName_CG_RequestGuildCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildDisbandOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildDisbandOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildDisbandOK, RmiName_CG_RequestGuildDisbandOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildDisbandOK;
                summary.rmiName = RmiName_CG_RequestGuildDisbandOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildDisbandOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildDisbandOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildDisbandOK;
                summary.rmiName = RmiName_CG_RequestGuildDisbandOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildApplicantListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildApplicantListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildApplicantListOK, RmiName_CG_RequestGuildApplicantListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildApplicantListOK;
                summary.rmiName = RmiName_CG_RequestGuildApplicantListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildApplicantListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildApplicantListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildApplicantListOK;
                summary.rmiName = RmiName_CG_RequestGuildApplicantListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildApplyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildApplyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildApplyOK, RmiName_CG_RequestGuildApplyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildApplyOK;
                summary.rmiName = RmiName_CG_RequestGuildApplyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildApplyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildApplyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildApplyOK;
                summary.rmiName = RmiName_CG_RequestGuildApplyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildReturnApplicationOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildReturnApplicationOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildReturnApplicationOK, RmiName_CG_RequestGuildReturnApplicationOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildReturnApplicationOK;
                summary.rmiName = RmiName_CG_RequestGuildReturnApplicationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildReturnApplicationOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildReturnApplicationOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildReturnApplicationOK;
                summary.rmiName = RmiName_CG_RequestGuildReturnApplicationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildAcceptApplicantOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildAcceptApplicantOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildAcceptApplicantOK, RmiName_CG_RequestGuildAcceptApplicantOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildAcceptApplicantOK;
                summary.rmiName = RmiName_CG_RequestGuildAcceptApplicantOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildAcceptApplicantOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildAcceptApplicantOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildAcceptApplicantOK;
                summary.rmiName = RmiName_CG_RequestGuildAcceptApplicantOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildRejectApplicantOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildRejectApplicantOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildRejectApplicantOK, RmiName_CG_RequestGuildRejectApplicantOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildRejectApplicantOK;
                summary.rmiName = RmiName_CG_RequestGuildRejectApplicantOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildRejectApplicantOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildRejectApplicantOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildRejectApplicantOK;
                summary.rmiName = RmiName_CG_RequestGuildRejectApplicantOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildLevelUpOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildLevelUpOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildLevelUpOK, RmiName_CG_RequestGuildLevelUpOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildLevelUpOK;
                summary.rmiName = RmiName_CG_RequestGuildLevelUpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildLevelUpOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildLevelUpOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildLevelUpOK;
                summary.rmiName = RmiName_CG_RequestGuildLevelUpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildChangeNameOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildChangeNameOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildChangeNameOK, RmiName_CG_RequestGuildChangeNameOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildChangeNameOK;
                summary.rmiName = RmiName_CG_RequestGuildChangeNameOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildChangeNameOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildChangeNameOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildChangeNameOK;
                summary.rmiName = RmiName_CG_RequestGuildChangeNameOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildChangeBoardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildChangeBoardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildChangeBoardOK, RmiName_CG_RequestGuildChangeBoardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildChangeBoardOK;
                summary.rmiName = RmiName_CG_RequestGuildChangeBoardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildChangeBoardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildChangeBoardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildChangeBoardOK;
                summary.rmiName = RmiName_CG_RequestGuildChangeBoardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildChangeMasterOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildChangeMasterOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildChangeMasterOK, RmiName_CG_RequestGuildChangeMasterOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildChangeMasterOK;
                summary.rmiName = RmiName_CG_RequestGuildChangeMasterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildChangeMasterOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildChangeMasterOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildChangeMasterOK;
                summary.rmiName = RmiName_CG_RequestGuildChangeMasterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildChangeMemberGradeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildChangeMemberGradeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildChangeMemberGradeOK, RmiName_CG_RequestGuildChangeMemberGradeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildChangeMemberGradeOK;
                summary.rmiName = RmiName_CG_RequestGuildChangeMemberGradeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildChangeMemberGradeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildChangeMemberGradeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildChangeMemberGradeOK;
                summary.rmiName = RmiName_CG_RequestGuildChangeMemberGradeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildKickOutMemberOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildKickOutMemberOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildKickOutMemberOK, RmiName_CG_RequestGuildKickOutMemberOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildKickOutMemberOK;
                summary.rmiName = RmiName_CG_RequestGuildKickOutMemberOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildKickOutMemberOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildKickOutMemberOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildKickOutMemberOK;
                summary.rmiName = RmiName_CG_RequestGuildKickOutMemberOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildLeaveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildLeaveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildLeaveOK, RmiName_CG_RequestGuildLeaveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildLeaveOK;
                summary.rmiName = RmiName_CG_RequestGuildLeaveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildLeaveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildLeaveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildLeaveOK;
                summary.rmiName = RmiName_CG_RequestGuildLeaveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildRoomInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildRoomInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildRoomInfoOK, RmiName_CG_RequestGuildRoomInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildRoomInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildRoomInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildRoomInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildRoomInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildRoomInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildRoomInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildAttendanceOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildAttendanceOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildAttendanceOK, RmiName_CG_RequestGuildAttendanceOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildAttendanceOK;
                summary.rmiName = RmiName_CG_RequestGuildAttendanceOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildAttendanceOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildAttendanceOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildAttendanceOK;
                summary.rmiName = RmiName_CG_RequestGuildAttendanceOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildAttendanceRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildAttendanceRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildAttendanceRewardOK, RmiName_CG_RequestGuildAttendanceRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildAttendanceRewardOK;
                summary.rmiName = RmiName_CG_RequestGuildAttendanceRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildAttendanceRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildAttendanceRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildAttendanceRewardOK;
                summary.rmiName = RmiName_CG_RequestGuildAttendanceRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildUserInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildUserInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildUserInfoOK, RmiName_CG_RequestGuildUserInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildUserInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildUserInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildUserInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildUserInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildUserInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildUserInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildAttendanceStatusOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildAttendanceStatusOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildAttendanceStatusOK, RmiName_CG_RequestGuildAttendanceStatusOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildAttendanceStatusOK;
                summary.rmiName = RmiName_CG_RequestGuildAttendanceStatusOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildAttendanceStatusOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildAttendanceStatusOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildAttendanceStatusOK;
                summary.rmiName = RmiName_CG_RequestGuildAttendanceStatusOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyGuildKickout(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyGuildKickout);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyGuildKickout, RmiName_GC_NotifyGuildKickout, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyGuildKickout;
                summary.rmiName = RmiName_GC_NotifyGuildKickout;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyGuildKickout(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyGuildKickout);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyGuildKickout;
                summary.rmiName = RmiName_GC_NotifyGuildKickout;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildDonationOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildDonationOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildDonationOK, RmiName_CG_RequestGuildDonationOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildDonationOK;
                summary.rmiName = RmiName_CG_RequestGuildDonationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildDonationOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildDonationOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildDonationOK;
                summary.rmiName = RmiName_CG_RequestGuildDonationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildDonationInitializeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildDonationInitializeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildDonationInitializeOK, RmiName_CG_RequestGuildDonationInitializeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildDonationInitializeOK;
                summary.rmiName = RmiName_CG_RequestGuildDonationInitializeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildDonationInitializeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildDonationInitializeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildDonationInitializeOK;
                summary.rmiName = RmiName_CG_RequestGuildDonationInitializeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildMissionInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildMissionInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildMissionInfoOK, RmiName_CG_RequestGuildMissionInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildMissionInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildMissionInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildMissionInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildMissionInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildMissionInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildMissionInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildMissionRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildMissionRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildMissionRewardOK, RmiName_CG_RequestGuildMissionRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildMissionRewardOK;
                summary.rmiName = RmiName_CG_RequestGuildMissionRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildMissionRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildMissionRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildMissionRewardOK;
                summary.rmiName = RmiName_CG_RequestGuildMissionRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyGuildAcceptApplicantOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyGuildAcceptApplicantOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyGuildAcceptApplicantOK, RmiName_GC_NotifyGuildAcceptApplicantOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyGuildAcceptApplicantOK;
                summary.rmiName = RmiName_GC_NotifyGuildAcceptApplicantOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyGuildAcceptApplicantOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyGuildAcceptApplicantOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyGuildAcceptApplicantOK;
                summary.rmiName = RmiName_GC_NotifyGuildAcceptApplicantOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildDonationInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildDonationInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildDonationInfoOK, RmiName_CG_RequestGuildDonationInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildDonationInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildDonationInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildDonationInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildDonationInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildDonationInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildDonationInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildSkillInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillInfoOK, RmiName_CG_RequestGuildSkillInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildSkillInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildSkillLevelUpOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillLevelUpOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillLevelUpOK, RmiName_CG_RequestGuildSkillLevelUpOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillLevelUpOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillLevelUpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildSkillLevelUpOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillLevelUpOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillLevelUpOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillLevelUpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildSkillUseOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillUseOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillUseOK, RmiName_CG_RequestGuildSkillUseOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillUseOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillUseOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildSkillUseOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillUseOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillUseOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillUseOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildSkillDisuseOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillDisuseOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillDisuseOK, RmiName_CG_RequestGuildSkillDisuseOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillDisuseOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillDisuseOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildSkillDisuseOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillDisuseOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillDisuseOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillDisuseOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildSkillUseInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildSkillUseInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildSkillUseInfoOK, RmiName_CG_RequestGuildSkillUseInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillUseInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillUseInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildSkillUseInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildSkillUseInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildSkillUseInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildSkillUseInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildMemberRankPointRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildMemberRankPointRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildMemberRankPointRewardOK, RmiName_CG_RequestGuildMemberRankPointRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildMemberRankPointRewardOK;
                summary.rmiName = RmiName_CG_RequestGuildMemberRankPointRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildMemberRankPointRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildMemberRankPointRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildMemberRankPointRewardOK;
                summary.rmiName = RmiName_CG_RequestGuildMemberRankPointRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildBattlePointRegisterOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildBattlePointRegisterOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildBattlePointRegisterOK, RmiName_CG_RequestGuildBattlePointRegisterOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildBattlePointRegisterOK;
                summary.rmiName = RmiName_CG_RequestGuildBattlePointRegisterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildBattlePointRegisterOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildBattlePointRegisterOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildBattlePointRegisterOK;
                summary.rmiName = RmiName_CG_RequestGuildBattlePointRegisterOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildBattlePointMemeberRankListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildBattlePointMemeberRankListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildBattlePointMemeberRankListOK, RmiName_CG_RequestGuildBattlePointMemeberRankListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildBattlePointMemeberRankListOK;
                summary.rmiName = RmiName_CG_RequestGuildBattlePointMemeberRankListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildBattlePointMemeberRankListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildBattlePointMemeberRankListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildBattlePointMemeberRankListOK;
                summary.rmiName = RmiName_CG_RequestGuildBattlePointMemeberRankListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildBattlePointGuildRankListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildBattlePointGuildRankListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildBattlePointGuildRankListOK, RmiName_CG_RequestGuildBattlePointGuildRankListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildBattlePointGuildRankListOK;
                summary.rmiName = RmiName_CG_RequestGuildBattlePointGuildRankListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildBattlePointGuildRankListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildBattlePointGuildRankListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildBattlePointGuildRankListOK;
                summary.rmiName = RmiName_CG_RequestGuildBattlePointGuildRankListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildBattlePointUserRankListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildBattlePointUserRankListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildBattlePointUserRankListOK, RmiName_CG_RequestGuildBattlePointUserRankListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildBattlePointUserRankListOK;
                summary.rmiName = RmiName_CG_RequestGuildBattlePointUserRankListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildBattlePointUserRankListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildBattlePointUserRankListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildBattlePointUserRankListOK;
                summary.rmiName = RmiName_CG_RequestGuildBattlePointUserRankListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestAPRechargeByUseItemOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestAPRechargeByUseItemOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestAPRechargeByUseItemOK, RmiName_CG_RequestAPRechargeByUseItemOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestAPRechargeByUseItemOK;
                summary.rmiName = RmiName_CG_RequestAPRechargeByUseItemOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestAPRechargeByUseItemOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestAPRechargeByUseItemOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestAPRechargeByUseItemOK;
                summary.rmiName = RmiName_CG_RequestAPRechargeByUseItemOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWeekStageKeyOpenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWeekStageKeyOpenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWeekStageKeyOpenOK, RmiName_CG_RequestWeekStageKeyOpenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWeekStageKeyOpenOK;
                summary.rmiName = RmiName_CG_RequestWeekStageKeyOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWeekStageKeyOpenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWeekStageKeyOpenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWeekStageKeyOpenOK;
                summary.rmiName = RmiName_CG_RequestWeekStageKeyOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFoodBuffAutoUseOnOffOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFoodBuffAutoUseOnOffOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFoodBuffAutoUseOnOffOK, RmiName_CG_RequestFoodBuffAutoUseOnOffOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFoodBuffAutoUseOnOffOK;
                summary.rmiName = RmiName_CG_RequestFoodBuffAutoUseOnOffOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFoodBuffAutoUseOnOffOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFoodBuffAutoUseOnOffOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFoodBuffAutoUseOnOffOK;
                summary.rmiName = RmiName_CG_RequestFoodBuffAutoUseOnOffOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemUseRankExpOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseRankExpOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseRankExpOK, RmiName_CG_RequestItemUseRankExpOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseRankExpOK;
                summary.rmiName = RmiName_CG_RequestItemUseRankExpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemUseRankExpOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseRankExpOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseRankExpOK;
                summary.rmiName = RmiName_CG_RequestItemUseRankExpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemUseBoxOpenOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseBoxOpenOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseBoxOpenOK, RmiName_CG_RequestItemUseBoxOpenOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseBoxOpenOK;
                summary.rmiName = RmiName_CG_RequestItemUseBoxOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemUseBoxOpenOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseBoxOpenOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseBoxOpenOK;
                summary.rmiName = RmiName_CG_RequestItemUseBoxOpenOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemUseRecipeExpOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseRecipeExpOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseRecipeExpOK, RmiName_CG_RequestItemUseRecipeExpOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseRecipeExpOK;
                summary.rmiName = RmiName_CG_RequestItemUseRecipeExpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemUseRecipeExpOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseRecipeExpOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseRecipeExpOK;
                summary.rmiName = RmiName_CG_RequestItemUseRecipeExpOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemUseWeeklyKeyBoxOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseWeeklyKeyBoxOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseWeeklyKeyBoxOK, RmiName_CG_RequestItemUseWeeklyKeyBoxOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseWeeklyKeyBoxOK;
                summary.rmiName = RmiName_CG_RequestItemUseWeeklyKeyBoxOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemUseWeeklyKeyBoxOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseWeeklyKeyBoxOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseWeeklyKeyBoxOK;
                summary.rmiName = RmiName_CG_RequestItemUseWeeklyKeyBoxOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemUseWeaponTicketOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseWeaponTicketOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseWeaponTicketOK, RmiName_CG_RequestItemUseWeaponTicketOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseWeaponTicketOK;
                summary.rmiName = RmiName_CG_RequestItemUseWeaponTicketOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemUseWeaponTicketOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseWeaponTicketOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseWeaponTicketOK;
                summary.rmiName = RmiName_CG_RequestItemUseWeaponTicketOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestItemUseMusicOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestItemUseMusicOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestItemUseMusicOK, RmiName_CG_RequestItemUseMusicOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseMusicOK;
                summary.rmiName = RmiName_CG_RequestItemUseMusicOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestItemUseMusicOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestItemUseMusicOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestItemUseMusicOK;
                summary.rmiName = RmiName_CG_RequestItemUseMusicOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTutorialAddStepOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.UserTutorialInfo tutorialInfo; SimpleCSharp.Marshaler.Read(__msg, out tutorialInfo);
            List<SimpleCSharp.ItemResultInfo> itemResultInfoList; SimpleCSharp.Marshaler.Read(__msg, out itemResultInfoList);
            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialAddStepOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += tutorialInfo.ToString() + ",";
                parameterString += itemResultInfoList.ToString() + ",";
                parameterString += missionResult.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestTutorialAddStepOK, RmiName_CG_RequestTutorialAddStepOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTutorialAddStepOK;
                summary.rmiName = RmiName_CG_RequestTutorialAddStepOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTutorialAddStepOK(remote, ctx, tutorialInfo, itemResultInfoList, missionResult);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialAddStepOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTutorialAddStepOK;
                summary.rmiName = RmiName_CG_RequestTutorialAddStepOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTutorialSetFlagOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.UserTutorialInfo tutorialInfo; SimpleCSharp.Marshaler.Read(__msg, out tutorialInfo);
            List<SimpleCSharp.ItemResultInfo> itemResultInfoList; SimpleCSharp.Marshaler.Read(__msg, out itemResultInfoList);
            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialSetFlagOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += tutorialInfo.ToString() + ",";
                parameterString += itemResultInfoList.ToString() + ",";
                parameterString += missionResult.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestTutorialSetFlagOK, RmiName_CG_RequestTutorialSetFlagOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTutorialSetFlagOK;
                summary.rmiName = RmiName_CG_RequestTutorialSetFlagOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTutorialSetFlagOK(remote, ctx, tutorialInfo, itemResultInfoList, missionResult);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialSetFlagOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTutorialSetFlagOK;
                summary.rmiName = RmiName_CG_RequestTutorialSetFlagOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTutorialHeroFlagOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialHeroFlagOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTutorialHeroFlagOK, RmiName_CG_RequestTutorialHeroFlagOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTutorialHeroFlagOK;
                summary.rmiName = RmiName_CG_RequestTutorialHeroFlagOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTutorialHeroFlagOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialHeroFlagOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTutorialHeroFlagOK;
                summary.rmiName = RmiName_CG_RequestTutorialHeroFlagOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTutorialGambleShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            SimpleCSharp.UserTutorialInfo tutorialInfo; SimpleCSharp.Marshaler.Read(__msg, out tutorialInfo);
            List<SimpleCSharp.ItemResultInfo> useItemResultinfoList; SimpleCSharp.Marshaler.Read(__msg, out useItemResultinfoList);
            List<SimpleCSharp.ItemResultInfo> gambleItemResultInfoList; SimpleCSharp.Marshaler.Read(__msg, out gambleItemResultInfoList);
            SimpleCSharp.MissionResult missionResult; SimpleCSharp.Marshaler.Read(__msg, out missionResult);
            SimpleCSharp.UserBingoGachaEventInfo userBingoGachaEventInfo; SimpleCSharp.Marshaler.Read(__msg, out userBingoGachaEventInfo);
            SimpleCSharp.PaybackEventResultInfo paybackEventResultInfo; SimpleCSharp.Marshaler.Read(__msg, out paybackEventResultInfo);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTutorialGambleShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += tutorialInfo.ToString() + ",";
                parameterString += useItemResultinfoList.ToString() + ",";
                parameterString += gambleItemResultInfoList.ToString() + ",";
                parameterString += missionResult.ToString() + ",";
                parameterString += userBingoGachaEventInfo.ToString() + ",";
                parameterString += paybackEventResultInfo.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestTutorialGambleShopBuyOK, RmiName_CG_RequestTutorialGambleShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTutorialGambleShopBuyOK;
                summary.rmiName = RmiName_CG_RequestTutorialGambleShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTutorialGambleShopBuyOK(remote, ctx, tutorialInfo, useItemResultinfoList, gambleItemResultInfoList, missionResult, userBingoGachaEventInfo, paybackEventResultInfo);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTutorialGambleShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTutorialGambleShopBuyOK;
                summary.rmiName = RmiName_CG_RequestTutorialGambleShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBattleTutorialInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBattleTutorialInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBattleTutorialInfoOK, RmiName_CG_RequestBattleTutorialInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBattleTutorialInfoOK;
                summary.rmiName = RmiName_CG_RequestBattleTutorialInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBattleTutorialInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBattleTutorialInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBattleTutorialInfoOK;
                summary.rmiName = RmiName_CG_RequestBattleTutorialInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBattleTutorialSetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBattleTutorialSetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBattleTutorialSetOK, RmiName_CG_RequestBattleTutorialSetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBattleTutorialSetOK;
                summary.rmiName = RmiName_CG_RequestBattleTutorialSetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBattleTutorialSetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBattleTutorialSetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBattleTutorialSetOK;
                summary.rmiName = RmiName_CG_RequestBattleTutorialSetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchCreateOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchCreateOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchCreateOK, RmiName_CG_RequestFriendlyMatchCreateOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchCreateOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchCreateOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchCreateOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchCreateOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchFriendListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchFriendListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchFriendListOK, RmiName_CG_RequestFriendlyMatchFriendListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchFriendListOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchFriendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchFriendListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchFriendListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchFriendListOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchFriendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchInviteOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInviteOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchInviteOK, RmiName_CG_RequestFriendlyMatchInviteOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchInviteOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchInviteOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInviteOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchInviteOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchReceivedInviteListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchReceivedInviteListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchReceivedInviteListOK, RmiName_CG_RequestFriendlyMatchReceivedInviteListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchReceivedInviteListOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchReceivedInviteListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchReceivedInviteListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchReceivedInviteListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchReceivedInviteListOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchReceivedInviteListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchInviteAcceptOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInviteAcceptOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchInviteAcceptOK, RmiName_CG_RequestFriendlyMatchInviteAcceptOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchInviteAcceptOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteAcceptOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchInviteAcceptOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInviteAcceptOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchInviteAcceptOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteAcceptOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchInviteRejectOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchInviteRejectOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchInviteRejectOK, RmiName_CG_RequestFriendlyMatchInviteRejectOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchInviteRejectOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteRejectOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchInviteRejectOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchInviteRejectOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchInviteRejectOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchInviteRejectOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchStartOK, RmiName_CG_RequestFriendlyMatchStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchStartOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchStartOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchBattleStartOK, RmiName_CG_RequestFriendlyMatchBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchBattleStartOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchBattleStartOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchClearOK, RmiName_CG_RequestFriendlyMatchClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchClearOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchClearOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchExitOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchExitOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchExitOK, RmiName_CG_RequestFriendlyMatchExitOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchExitOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchExitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchExitOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchExitOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchExitOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchExitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyFriendlyMatchInvite(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyFriendlyMatchInvite);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyFriendlyMatchInvite, RmiName_GC_NotifyFriendlyMatchInvite, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyFriendlyMatchInvite;
                summary.rmiName = RmiName_GC_NotifyFriendlyMatchInvite;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyFriendlyMatchInvite(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyFriendlyMatchInvite);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyFriendlyMatchInvite;
                summary.rmiName = RmiName_GC_NotifyFriendlyMatchInvite;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestFriendlyMatchSetInviteOptionOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestFriendlyMatchSetInviteOptionOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestFriendlyMatchSetInviteOptionOK, RmiName_CG_RequestFriendlyMatchSetInviteOptionOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchSetInviteOptionOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchSetInviteOptionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestFriendlyMatchSetInviteOptionOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestFriendlyMatchSetInviteOptionOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestFriendlyMatchSetInviteOptionOK;
                summary.rmiName = RmiName_CG_RequestFriendlyMatchSetInviteOptionOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventMissionGetAchievePointRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionGetAchievePointRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventMissionGetAchievePointRewardOK, RmiName_CG_RequestEventMissionGetAchievePointRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventMissionGetAchievePointRewardOK;
                summary.rmiName = RmiName_CG_RequestEventMissionGetAchievePointRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventMissionGetAchievePointRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionGetAchievePointRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventMissionGetAchievePointRewardOK;
                summary.rmiName = RmiName_CG_RequestEventMissionGetAchievePointRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventMissionCompleteRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionCompleteRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventMissionCompleteRewardOK, RmiName_CG_RequestEventMissionCompleteRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventMissionCompleteRewardOK;
                summary.rmiName = RmiName_CG_RequestEventMissionCompleteRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventMissionCompleteRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionCompleteRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventMissionCompleteRewardOK;
                summary.rmiName = RmiName_CG_RequestEventMissionCompleteRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventMissionInfoOk(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventMissionInfoOk);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventMissionInfoOk, RmiName_CG_RequestEventMissionInfoOk, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventMissionInfoOk;
                summary.rmiName = RmiName_CG_RequestEventMissionInfoOk;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventMissionInfoOk(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventMissionInfoOk);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventMissionInfoOk;
                summary.rmiName = RmiName_CG_RequestEventMissionInfoOk;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyHousingShopInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyHousingShopInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyHousingShopInfoOK, RmiName_CG_RequestLobbyHousingShopInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyHousingShopInfoOK;
                summary.rmiName = RmiName_CG_RequestLobbyHousingShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyHousingShopInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyHousingShopInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyHousingShopInfoOK;
                summary.rmiName = RmiName_CG_RequestLobbyHousingShopInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyHousingShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyHousingShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyHousingShopBuyOK, RmiName_CG_RequestLobbyHousingShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyHousingShopBuyOK;
                summary.rmiName = RmiName_CG_RequestLobbyHousingShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyHousingShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyHousingShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyHousingShopBuyOK;
                summary.rmiName = RmiName_CG_RequestLobbyHousingShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestLobbyFurnitureRegistOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestLobbyFurnitureRegistOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestLobbyFurnitureRegistOK, RmiName_CG_RequestLobbyFurnitureRegistOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyFurnitureRegistOK;
                summary.rmiName = RmiName_CG_RequestLobbyFurnitureRegistOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestLobbyFurnitureRegistOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestLobbyFurnitureRegistOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestLobbyFurnitureRegistOK;
                summary.rmiName = RmiName_CG_RequestLobbyFurnitureRegistOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestUserMusicEditOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestUserMusicEditOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestUserMusicEditOK, RmiName_CG_RequestUserMusicEditOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestUserMusicEditOK;
                summary.rmiName = RmiName_CG_RequestUserMusicEditOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestUserMusicEditOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestUserMusicEditOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestUserMusicEditOK;
                summary.rmiName = RmiName_CG_RequestUserMusicEditOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventSeasonPassInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            List<SimpleCSharp.ClientSeasonPassRankRewardInfo> clientSeasonPassRankRewardInfoList; SimpleCSharp.Marshaler.Read(__msg, out clientSeasonPassRankRewardInfoList);
            SimpleCSharp.UserCommonItem rankPointItemInfo; SimpleCSharp.Marshaler.Read(__msg, out rankPointItemInfo);
            byte currentServerSeasonPassWeek; SimpleCSharp.Marshaler.Read(__msg, out currentServerSeasonPassWeek);
            byte currentClientSeasonPassWeek; SimpleCSharp.Marshaler.Read(__msg, out currentClientSeasonPassWeek);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += clientSeasonPassRankRewardInfoList.ToString() + ",";
                parameterString += rankPointItemInfo.ToString() + ",";
                parameterString += currentServerSeasonPassWeek.ToString() + ",";
                parameterString += currentClientSeasonPassWeek.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestEventSeasonPassInfoOK, RmiName_CG_RequestEventSeasonPassInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventSeasonPassInfoOK;
                summary.rmiName = RmiName_CG_RequestEventSeasonPassInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventSeasonPassInfoOK(remote, ctx, clientSeasonPassRankRewardInfoList, rankPointItemInfo, currentServerSeasonPassWeek, currentClientSeasonPassWeek);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventSeasonPassInfoOK;
                summary.rmiName = RmiName_CG_RequestEventSeasonPassInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankUpRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSeasonPassRankUpRewardOK, RmiName_CG_RequestEventSeasonPassRankUpRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventSeasonPassRankUpRewardOK;
                summary.rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventSeasonPassRankUpRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankUpRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventSeasonPassRankUpRewardOK;
                summary.rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventSeasonPassRankUpRewardAllOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSeasonPassRankUpRewardAllOK, RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventSeasonPassRankUpRewardAllOK;
                summary.rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventSeasonPassRankUpRewardAllOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventSeasonPassRankUpRewardAllOK;
                summary.rmiName = RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventSeasonPassRankBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSeasonPassRankBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSeasonPassRankBuyOK, RmiName_CG_RequestEventSeasonPassRankBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventSeasonPassRankBuyOK;
                summary.rmiName = RmiName_CG_RequestEventSeasonPassRankBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventSeasonPassRankBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSeasonPassRankBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventSeasonPassRankBuyOK;
                summary.rmiName = RmiName_CG_RequestEventSeasonPassRankBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestStepupGambleShopBuyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestStepupGambleShopBuyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStepupGambleShopBuyOK, RmiName_CG_RequestStepupGambleShopBuyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestStepupGambleShopBuyOK;
                summary.rmiName = RmiName_CG_RequestStepupGambleShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestStepupGambleShopBuyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStepupGambleShopBuyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestStepupGambleShopBuyOK;
                summary.rmiName = RmiName_CG_RequestStepupGambleShopBuyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestStepupGambleMileageRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestStepupGambleMileageRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestStepupGambleMileageRewardOK, RmiName_CG_RequestStepupGambleMileageRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestStepupGambleMileageRewardOK;
                summary.rmiName = RmiName_CG_RequestStepupGambleMileageRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestStepupGambleMileageRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestStepupGambleMileageRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestStepupGambleMileageRewardOK;
                summary.rmiName = RmiName_CG_RequestStepupGambleMileageRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWestSideServerInfo_RandomOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_RandomOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSideServerInfo_RandomOK, RmiName_CG_RequestWestSideServerInfo_RandomOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWestSideServerInfo_RandomOK;
                summary.rmiName = RmiName_CG_RequestWestSideServerInfo_RandomOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWestSideServerInfo_RandomOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_RandomOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWestSideServerInfo_RandomOK;
                summary.rmiName = RmiName_CG_RequestWestSideServerInfo_RandomOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWestSideServerInfo_FixedOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_FixedOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSideServerInfo_FixedOK, RmiName_CG_RequestWestSideServerInfo_FixedOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWestSideServerInfo_FixedOK;
                summary.rmiName = RmiName_CG_RequestWestSideServerInfo_FixedOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWestSideServerInfo_FixedOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_FixedOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWestSideServerInfo_FixedOK;
                summary.rmiName = RmiName_CG_RequestWestSideServerInfo_FixedOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWestSideServerInfo_RecommandOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSideServerInfo_RecommandOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSideServerInfo_RecommandOK, RmiName_CG_RequestWestSideServerInfo_RecommandOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWestSideServerInfo_RecommandOK;
                summary.rmiName = RmiName_CG_RequestWestSideServerInfo_RecommandOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWestSideServerInfo_RecommandOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSideServerInfo_RecommandOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWestSideServerInfo_RecommandOK;
                summary.rmiName = RmiName_CG_RequestWestSideServerInfo_RecommandOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWestSide_PlayerInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSide_PlayerInfoOK, RmiName_CG_RequestWestSide_PlayerInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWestSide_PlayerInfoOK;
                summary.rmiName = RmiName_CG_RequestWestSide_PlayerInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWestSide_PlayerInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWestSide_PlayerInfoOK;
                summary.rmiName = RmiName_CG_RequestWestSide_PlayerInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWestSide_PlayerteamInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerteamInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSide_PlayerteamInfoOK, RmiName_CG_RequestWestSide_PlayerteamInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWestSide_PlayerteamInfoOK;
                summary.rmiName = RmiName_CG_RequestWestSide_PlayerteamInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWestSide_PlayerteamInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerteamInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWestSide_PlayerteamInfoOK;
                summary.rmiName = RmiName_CG_RequestWestSide_PlayerteamInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWestSide_PlayerGuildInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWestSide_PlayerGuildInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestWestSide_PlayerGuildInfoOK, RmiName_CG_RequestWestSide_PlayerGuildInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWestSide_PlayerGuildInfoOK;
                summary.rmiName = RmiName_CG_RequestWestSide_PlayerGuildInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWestSide_PlayerGuildInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWestSide_PlayerGuildInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWestSide_PlayerGuildInfoOK;
                summary.rmiName = RmiName_CG_RequestWestSide_PlayerGuildInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestWorldChattingChannelOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            int worldChattingChannelId; SimpleCSharp.Marshaler.Read(__msg, out worldChattingChannelId);
            core.PostCheckReadMessage(__msg, RmiName_CG_RequestWorldChattingChannelOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                parameterString += worldChattingChannelId.ToString() + ",";
                NotifyCallFromStub(Common.CG_RequestWorldChattingChannelOK, RmiName_CG_RequestWorldChattingChannelOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestWorldChattingChannelOK;
                summary.rmiName = RmiName_CG_RequestWorldChattingChannelOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestWorldChattingChannelOK(remote, ctx, worldChattingChannelId);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestWorldChattingChannelOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestWorldChattingChannelOK;
                summary.rmiName = RmiName_CG_RequestWorldChattingChannelOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLobbyInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLobbyInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLobbyInfoOK, RmiName_CG_RequestArenaRealTimePvpLobbyInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLobbyInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLobbyInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpJoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpJoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpJoinOK, RmiName_CG_RequestArenaRealTimePvpJoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpJoinOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpJoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpJoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpJoinOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpTopRankerListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpTopRankerListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpTopRankerListOK, RmiName_CG_RequestArenaRealTimePvpTopRankerListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpTopRankerListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpTopRankerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpTopRankerListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpTopRankerListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpTopRankerListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpTopRankerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLastRankerListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLastRankerListOK, RmiName_CG_RequestArenaRealTimePvpLastRankerListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLastRankerListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLastRankerListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpMatchingOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpMatchingOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpMatchingOK, RmiName_CG_RequestArenaRealTimePvpMatchingOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpMatchingOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpMatchingOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpMatchingOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpMatchingOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpMatchingOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpMatchingOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpBattleStartOK, RmiName_CG_RequestArenaRealTimePvpBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpBattleEndOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpBattleEndOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpBattleEndOK, RmiName_CG_RequestArenaRealTimePvpBattleEndOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpBattleEndOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpBattleEndOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpBattleEndOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpBattleEndOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpRollbackOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpRollbackOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpRollbackOK, RmiName_CG_RequestArenaRealTimePvpRollbackOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpRollbackOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpRollbackOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpRollbackOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpRollbackOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpRollbackOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpRollbackOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpIngameBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpIngameBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpIngameBattleStartOK, RmiName_CG_RequestArenaRealTimePvpIngameBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpIngameBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpIngameBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpIngameBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpIngameBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpIngameBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpIngameBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerLobbyInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerLobbyInfoOK, RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLowerLobbyInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerJoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerJoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerJoinOK, RmiName_CG_RequestArenaRealTimePvpLowerJoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerJoinOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLowerJoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerJoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerJoinOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerTopRankerListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerTopRankerListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerTopRankerListOK, RmiName_CG_RequestArenaRealTimePvpLowerTopRankerListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerTopRankerListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerTopRankerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLowerTopRankerListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerTopRankerListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerTopRankerListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerTopRankerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerMatchingOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerMatchingOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerMatchingOK, RmiName_CG_RequestArenaRealTimePvpLowerMatchingOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerMatchingOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerMatchingOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLowerMatchingOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerMatchingOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerMatchingOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerMatchingOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerBattleStartOK, RmiName_CG_RequestArenaRealTimePvpLowerBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLowerBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerBattleEndOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerBattleEndOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerBattleEndOK, RmiName_CG_RequestArenaRealTimePvpLowerBattleEndOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerBattleEndOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLowerBattleEndOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerBattleEndOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerBattleEndOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpAllInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpAllInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpAllInfoOK, RmiName_CG_RequestArenaRealTimePvpAllInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpAllInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpAllInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpAllInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpAllInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpAllInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpAllInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLastRankerBattleInfoOK, RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerBattleInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLastRankerBattleInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerBattleInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLastRankerBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLastRankerBattleStartOK, RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLastRankerBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLastRankerBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerRollbackOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerRollbackOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerRollbackOK, RmiName_CG_RequestArenaRealTimePvpLowerRollbackOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerRollbackOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerRollbackOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLowerRollbackOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerRollbackOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerRollbackOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerRollbackOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimePvpLowerIngameBattleStartOK, RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerIngameBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimePvpLowerIngameBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimePvpLowerIngameBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionLobbyInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionLobbyInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionLobbyInfoOK, RmiName_CG_RequestArenaRealTimeDecisionLobbyInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionLobbyInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionLobbyInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionJoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionJoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionJoinOK, RmiName_CG_RequestArenaRealTimeDecisionJoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionJoinOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionJoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionJoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionJoinOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionTopRankerListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionTopRankerListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionTopRankerListOK, RmiName_CG_RequestArenaRealTimeDecisionTopRankerListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionTopRankerListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionTopRankerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionTopRankerListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionTopRankerListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionTopRankerListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionTopRankerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionMatchingOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionMatchingOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionMatchingOK, RmiName_CG_RequestArenaRealTimeDecisionMatchingOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionMatchingOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionMatchingOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionMatchingOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionMatchingOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionMatchingOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionMatchingOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionBattleStartOK, RmiName_CG_RequestArenaRealTimeDecisionBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionBattleEndOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionBattleEndOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionBattleEndOK, RmiName_CG_RequestArenaRealTimeDecisionBattleEndOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionBattleEndOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionBattleEndOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionBattleEndOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionBattleEndOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionIngameBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionIngameBattleStartOK, RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionIngameBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionIngameBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionIngameBattleStartOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionHistoryOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionHistoryOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionHistoryOK, RmiName_CG_RequestArenaRealTimeDecisionHistoryOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionHistoryOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionHistoryOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionHistoryOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionHistoryOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionHistoryOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionHistoryOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionChangeMatchingListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionChangeMatchingListOK, RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionChangeMatchingListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionChangeMatchingListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionChangeMatchingListOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK, RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK;
                summary.rmiName = RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPvpSeasonInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPvpSeasonInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPvpSeasonInfoOK, RmiName_CG_RequestPvpSeasonInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPvpSeasonInfoOK;
                summary.rmiName = RmiName_CG_RequestPvpSeasonInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPvpSeasonInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPvpSeasonInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPvpSeasonInfoOK;
                summary.rmiName = RmiName_CG_RequestPvpSeasonInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPvpSeasonHistoryOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPvpSeasonHistoryOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPvpSeasonHistoryOK, RmiName_CG_RequestPvpSeasonHistoryOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPvpSeasonHistoryOK;
                summary.rmiName = RmiName_CG_RequestPvpSeasonHistoryOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPvpSeasonHistoryOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPvpSeasonHistoryOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPvpSeasonHistoryOK;
                summary.rmiName = RmiName_CG_RequestPvpSeasonHistoryOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventExchangeInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeInfoOK, RmiName_CG_RequestEventExchangeInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeInfoOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventExchangeInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeInfoOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeBoxGachaInfoOK, RmiName_CG_RequestEventExchangeBoxGachaInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeBoxGachaInfoOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventExchangeBoxGachaInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeBoxGachaInfoOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaPickupOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaPickupOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeBoxGachaPickupOK, RmiName_CG_RequestEventExchangeBoxGachaPickupOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeBoxGachaPickupOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaPickupOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventExchangeBoxGachaPickupOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaPickupOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeBoxGachaPickupOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaPickupOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventExchangeBoxGachaResetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventExchangeBoxGachaResetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventExchangeBoxGachaResetOK, RmiName_CG_RequestEventExchangeBoxGachaResetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeBoxGachaResetOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventExchangeBoxGachaResetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventExchangeBoxGachaResetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventExchangeBoxGachaResetOK;
                summary.rmiName = RmiName_CG_RequestEventExchangeBoxGachaResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventPaybackRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventPaybackRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventPaybackRewardOK, RmiName_CG_RequestEventPaybackRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventPaybackRewardOK;
                summary.rmiName = RmiName_CG_RequestEventPaybackRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventPaybackRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventPaybackRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventPaybackRewardOK;
                summary.rmiName = RmiName_CG_RequestEventPaybackRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarCreateOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarCreateOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarCreateOK, RmiName_CG_RequestBossWarCreateOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarCreateOK;
                summary.rmiName = RmiName_CG_RequestBossWarCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarCreateOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarCreateOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarCreateOK;
                summary.rmiName = RmiName_CG_RequestBossWarCreateOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarJoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarJoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarJoinOK, RmiName_CG_RequestBossWarJoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarJoinOK;
                summary.rmiName = RmiName_CG_RequestBossWarJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarJoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarJoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarJoinOK;
                summary.rmiName = RmiName_CG_RequestBossWarJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarStartOK, RmiName_CG_RequestBossWarStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarStartOK;
                summary.rmiName = RmiName_CG_RequestBossWarStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarStartOK;
                summary.rmiName = RmiName_CG_RequestBossWarStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarBattleStartOK, RmiName_CG_RequestBossWarBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarBattleStartOK;
                summary.rmiName = RmiName_CG_RequestBossWarBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarBattleStartOK;
                summary.rmiName = RmiName_CG_RequestBossWarBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarBattleEndOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarBattleEndOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarBattleEndOK, RmiName_CG_RequestBossWarBattleEndOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarBattleEndOK;
                summary.rmiName = RmiName_CG_RequestBossWarBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarBattleEndOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarBattleEndOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarBattleEndOK;
                summary.rmiName = RmiName_CG_RequestBossWarBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarOnlineFriendListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarOnlineFriendListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarOnlineFriendListOK, RmiName_CG_RequestBossWarOnlineFriendListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarOnlineFriendListOK;
                summary.rmiName = RmiName_CG_RequestBossWarOnlineFriendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarOnlineFriendListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarOnlineFriendListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarOnlineFriendListOK;
                summary.rmiName = RmiName_CG_RequestBossWarOnlineFriendListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarOnlineGuildMemberListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarOnlineGuildMemberListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarOnlineGuildMemberListOK, RmiName_CG_RequestBossWarOnlineGuildMemberListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarOnlineGuildMemberListOK;
                summary.rmiName = RmiName_CG_RequestBossWarOnlineGuildMemberListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarOnlineGuildMemberListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarOnlineGuildMemberListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarOnlineGuildMemberListOK;
                summary.rmiName = RmiName_CG_RequestBossWarOnlineGuildMemberListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarOnlineUserRankRangeListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarOnlineUserRankRangeListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarOnlineUserRankRangeListOK, RmiName_CG_RequestBossWarOnlineUserRankRangeListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarOnlineUserRankRangeListOK;
                summary.rmiName = RmiName_CG_RequestBossWarOnlineUserRankRangeListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarOnlineUserRankRangeListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarOnlineUserRankRangeListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarOnlineUserRankRangeListOK;
                summary.rmiName = RmiName_CG_RequestBossWarOnlineUserRankRangeListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarInvitationReceiveListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarInvitationReceiveListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarInvitationReceiveListOK, RmiName_CG_RequestBossWarInvitationReceiveListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarInvitationReceiveListOK;
                summary.rmiName = RmiName_CG_RequestBossWarInvitationReceiveListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarInvitationReceiveListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarInvitationReceiveListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarInvitationReceiveListOK;
                summary.rmiName = RmiName_CG_RequestBossWarInvitationReceiveListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarRemoveInvitationOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarRemoveInvitationOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarRemoveInvitationOK, RmiName_CG_RequestBossWarRemoveInvitationOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarRemoveInvitationOK;
                summary.rmiName = RmiName_CG_RequestBossWarRemoveInvitationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarRemoveInvitationOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarRemoveInvitationOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarRemoveInvitationOK;
                summary.rmiName = RmiName_CG_RequestBossWarRemoveInvitationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarInviteOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarInviteOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarInviteOK, RmiName_CG_RequestBossWarInviteOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarInviteOK;
                summary.rmiName = RmiName_CG_RequestBossWarInviteOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarInviteOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarInviteOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarInviteOK;
                summary.rmiName = RmiName_CG_RequestBossWarInviteOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarKickOutOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarKickOutOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarKickOutOK, RmiName_CG_RequestBossWarKickOutOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarKickOutOK;
                summary.rmiName = RmiName_CG_RequestBossWarKickOutOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarKickOutOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarKickOutOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarKickOutOK;
                summary.rmiName = RmiName_CG_RequestBossWarKickOutOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarRewardOK, RmiName_CG_RequestBossWarRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarRewardOK;
                summary.rmiName = RmiName_CG_RequestBossWarRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarRewardOK;
                summary.rmiName = RmiName_CG_RequestBossWarRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarReadyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarReadyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarReadyOK, RmiName_CG_RequestBossWarReadyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarReadyOK;
                summary.rmiName = RmiName_CG_RequestBossWarReadyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarReadyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarReadyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarReadyOK;
                summary.rmiName = RmiName_CG_RequestBossWarReadyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarReturnReadyOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarReturnReadyOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarReturnReadyOK, RmiName_CG_RequestBossWarReturnReadyOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarReturnReadyOK;
                summary.rmiName = RmiName_CG_RequestBossWarReturnReadyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarReturnReadyOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarReturnReadyOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarReturnReadyOK;
                summary.rmiName = RmiName_CG_RequestBossWarReturnReadyOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarSyncOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarSyncOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarSyncOK, RmiName_CG_RequestBossWarSyncOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarSyncOK;
                summary.rmiName = RmiName_CG_RequestBossWarSyncOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarSyncOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarSyncOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarSyncOK;
                summary.rmiName = RmiName_CG_RequestBossWarSyncOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarBattleSyncOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarBattleSyncOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarBattleSyncOK, RmiName_CG_RequestBossWarBattleSyncOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarBattleSyncOK;
                summary.rmiName = RmiName_CG_RequestBossWarBattleSyncOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarBattleSyncOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarBattleSyncOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarBattleSyncOK;
                summary.rmiName = RmiName_CG_RequestBossWarBattleSyncOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestBossWarLeaveOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestBossWarLeaveOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestBossWarLeaveOK, RmiName_CG_RequestBossWarLeaveOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarLeaveOK;
                summary.rmiName = RmiName_CG_RequestBossWarLeaveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestBossWarLeaveOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestBossWarLeaveOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestBossWarLeaveOK;
                summary.rmiName = RmiName_CG_RequestBossWarLeaveOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyBossWarInvite(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyBossWarInvite);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyBossWarInvite, RmiName_GC_NotifyBossWarInvite, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarInvite;
                summary.rmiName = RmiName_GC_NotifyBossWarInvite;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyBossWarInvite(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyBossWarInvite);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarInvite;
                summary.rmiName = RmiName_GC_NotifyBossWarInvite;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyBossWarMemberJoinUpdate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyBossWarMemberJoinUpdate);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyBossWarMemberJoinUpdate, RmiName_GC_NotifyBossWarMemberJoinUpdate, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarMemberJoinUpdate;
                summary.rmiName = RmiName_GC_NotifyBossWarMemberJoinUpdate;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyBossWarMemberJoinUpdate(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyBossWarMemberJoinUpdate);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarMemberJoinUpdate;
                summary.rmiName = RmiName_GC_NotifyBossWarMemberJoinUpdate;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyBossWarGameStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyBossWarGameStart);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyBossWarGameStart, RmiName_GC_NotifyBossWarGameStart, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarGameStart;
                summary.rmiName = RmiName_GC_NotifyBossWarGameStart;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyBossWarGameStart(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyBossWarGameStart);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarGameStart;
                summary.rmiName = RmiName_GC_NotifyBossWarGameStart;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyBossWarWaitReadyStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyBossWarWaitReadyStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyBossWarWaitReadyStartOK, RmiName_GC_NotifyBossWarWaitReadyStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarWaitReadyStartOK;
                summary.rmiName = RmiName_GC_NotifyBossWarWaitReadyStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyBossWarWaitReadyStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyBossWarWaitReadyStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarWaitReadyStartOK;
                summary.rmiName = RmiName_GC_NotifyBossWarWaitReadyStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyBossWarRewardAggregationOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyBossWarRewardAggregationOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyBossWarRewardAggregationOK, RmiName_GC_NotifyBossWarRewardAggregationOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarRewardAggregationOK;
                summary.rmiName = RmiName_GC_NotifyBossWarRewardAggregationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyBossWarRewardAggregationOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyBossWarRewardAggregationOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyBossWarRewardAggregationOK;
                summary.rmiName = RmiName_GC_NotifyBossWarRewardAggregationOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventSnsShareProgressOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSnsShareProgressOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSnsShareProgressOK, RmiName_CG_RequestEventSnsShareProgressOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventSnsShareProgressOK;
                summary.rmiName = RmiName_CG_RequestEventSnsShareProgressOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventSnsShareProgressOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSnsShareProgressOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventSnsShareProgressOK;
                summary.rmiName = RmiName_CG_RequestEventSnsShareProgressOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventSnsShareRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventSnsShareRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventSnsShareRewardOK, RmiName_CG_RequestEventSnsShareRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventSnsShareRewardOK;
                summary.rmiName = RmiName_CG_RequestEventSnsShareRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventSnsShareRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventSnsShareRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventSnsShareRewardOK;
                summary.rmiName = RmiName_CG_RequestEventSnsShareRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGagueEventInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGagueEventInfoOK, RmiName_CG_RequestGagueEventInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGagueEventInfoOK;
                summary.rmiName = RmiName_CG_RequestGagueEventInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGagueEventInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGagueEventInfoOK;
                summary.rmiName = RmiName_CG_RequestGagueEventInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGagueEventChargeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventChargeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGagueEventChargeOK, RmiName_CG_RequestGagueEventChargeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGagueEventChargeOK;
                summary.rmiName = RmiName_CG_RequestGagueEventChargeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGagueEventChargeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventChargeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGagueEventChargeOK;
                summary.rmiName = RmiName_CG_RequestGagueEventChargeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGagueEventRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGagueEventRewardOK, RmiName_CG_RequestGagueEventRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGagueEventRewardOK;
                summary.rmiName = RmiName_CG_RequestGagueEventRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGagueEventRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGagueEventRewardOK;
                summary.rmiName = RmiName_CG_RequestGagueEventRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGagueEventResetOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGagueEventResetOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGagueEventResetOK, RmiName_CG_RequestGagueEventResetOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGagueEventResetOK;
                summary.rmiName = RmiName_CG_RequestGagueEventResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGagueEventResetOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGagueEventResetOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGagueEventResetOK;
                summary.rmiName = RmiName_CG_RequestGagueEventResetOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventLadderRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLadderRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventLadderRewardOK, RmiName_CG_RequestEventLadderRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventLadderRewardOK;
                summary.rmiName = RmiName_CG_RequestEventLadderRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventLadderRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLadderRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventLadderRewardOK;
                summary.rmiName = RmiName_CG_RequestEventLadderRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventLobbyGiftRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLobbyGiftRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventLobbyGiftRewardOK, RmiName_CG_RequestEventLobbyGiftRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventLobbyGiftRewardOK;
                summary.rmiName = RmiName_CG_RequestEventLobbyGiftRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventLobbyGiftRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLobbyGiftRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventLobbyGiftRewardOK;
                summary.rmiName = RmiName_CG_RequestEventLobbyGiftRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventTimeMissionInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTimeMissionInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventTimeMissionInfoOK, RmiName_CG_RequestEventTimeMissionInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventTimeMissionInfoOK;
                summary.rmiName = RmiName_CG_RequestEventTimeMissionInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventTimeMissionInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTimeMissionInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventTimeMissionInfoOK;
                summary.rmiName = RmiName_CG_RequestEventTimeMissionInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventTimeMissionStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventTimeMissionStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventTimeMissionStartOK, RmiName_CG_RequestEventTimeMissionStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventTimeMissionStartOK;
                summary.rmiName = RmiName_CG_RequestEventTimeMissionStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventTimeMissionStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventTimeMissionStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventTimeMissionStartOK;
                summary.rmiName = RmiName_CG_RequestEventTimeMissionStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestEventLobbyDecorationRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestEventLobbyDecorationRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestEventLobbyDecorationRewardOK, RmiName_CG_RequestEventLobbyDecorationRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestEventLobbyDecorationRewardOK;
                summary.rmiName = RmiName_CG_RequestEventLobbyDecorationRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestEventLobbyDecorationRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestEventLobbyDecorationRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestEventLobbyDecorationRewardOK;
                summary.rmiName = RmiName_CG_RequestEventLobbyDecorationRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestRegistPlayTitleOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestRegistPlayTitleOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestRegistPlayTitleOK, RmiName_CG_RequestRegistPlayTitleOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestRegistPlayTitleOK;
                summary.rmiName = RmiName_CG_RequestRegistPlayTitleOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestRegistPlayTitleOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestRegistPlayTitleOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestRegistPlayTitleOK;
                summary.rmiName = RmiName_CG_RequestRegistPlayTitleOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestPlayTitleMissionRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestPlayTitleMissionRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestPlayTitleMissionRewardOK, RmiName_CG_RequestPlayTitleMissionRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestPlayTitleMissionRewardOK;
                summary.rmiName = RmiName_CG_RequestPlayTitleMissionRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestPlayTitleMissionRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestPlayTitleMissionRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestPlayTitleMissionRewardOK;
                summary.rmiName = RmiName_CG_RequestPlayTitleMissionRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentListOK, RmiName_CG_RequestTournamentListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentListOK;
                summary.rmiName = RmiName_CG_RequestTournamentListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentListOK;
                summary.rmiName = RmiName_CG_RequestTournamentListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentProgressInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentProgressInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentProgressInfoOK, RmiName_CG_RequestTournamentProgressInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentProgressInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentProgressInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentProgressInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentProgressInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentProgressInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentProgressInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentResultInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentResultInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentResultInfoOK, RmiName_CG_RequestTournamentResultInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentResultInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentResultInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentResultInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentResultInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentResultInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentResultInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentMatchJoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchJoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchJoinOK, RmiName_CG_RequestTournamentMatchJoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchJoinOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentMatchJoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchJoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchJoinOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentMatchBattleStartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchBattleStartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchBattleStartOK, RmiName_CG_RequestTournamentMatchBattleStartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchBattleStartOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentMatchBattleStartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchBattleStartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchBattleStartOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchBattleStartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentMatchBattleEndOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchBattleEndOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchBattleEndOK, RmiName_CG_RequestTournamentMatchBattleEndOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchBattleEndOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentMatchBattleEndOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchBattleEndOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchBattleEndOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchBattleEndOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentMatchExitOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchExitOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchExitOK, RmiName_CG_RequestTournamentMatchExitOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchExitOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchExitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentMatchExitOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchExitOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchExitOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchExitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyTournamentProgressChange(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyTournamentProgressChange);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyTournamentProgressChange, RmiName_GC_NotifyTournamentProgressChange, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyTournamentProgressChange;
                summary.rmiName = RmiName_GC_NotifyTournamentProgressChange;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyTournamentProgressChange(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyTournamentProgressChange);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyTournamentProgressChange;
                summary.rmiName = RmiName_GC_NotifyTournamentProgressChange;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentRewardOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentRewardOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentRewardOK, RmiName_CG_RequestTournamentRewardOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentRewardOK;
                summary.rmiName = RmiName_CG_RequestTournamentRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentRewardOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentRewardOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentRewardOK;
                summary.rmiName = RmiName_CG_RequestTournamentRewardOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_GC_NotifyTournamentMatchSuspend(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_GC_NotifyTournamentMatchSuspend);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.GC_NotifyTournamentMatchSuspend, RmiName_GC_NotifyTournamentMatchSuspend, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.GC_NotifyTournamentMatchSuspend;
                summary.rmiName = RmiName_GC_NotifyTournamentMatchSuspend;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = GC_NotifyTournamentMatchSuspend(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_GC_NotifyTournamentMatchSuspend);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.GC_NotifyTournamentMatchSuspend;
                summary.rmiName = RmiName_GC_NotifyTournamentMatchSuspend;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentPlayerTeamSlotChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentPlayerTeamSlotChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentPlayerTeamSlotChangeOK, RmiName_CG_RequestTournamentPlayerTeamSlotChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentPlayerTeamSlotChangeOK;
                summary.rmiName = RmiName_CG_RequestTournamentPlayerTeamSlotChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentPlayerTeamSlotChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentPlayerTeamSlotChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentPlayerTeamSlotChangeOK;
                summary.rmiName = RmiName_CG_RequestTournamentPlayerTeamSlotChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentPlayerTeamInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentPlayerTeamInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentPlayerTeamInfoOK, RmiName_CG_RequestTournamentPlayerTeamInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentPlayerTeamInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentPlayerTeamInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentPlayerTeamInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentPlayerTeamInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentPlayerTeamInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentPlayerTeamInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentCheerOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentCheerOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentCheerOK, RmiName_CG_RequestTournamentCheerOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentCheerOK;
                summary.rmiName = RmiName_CG_RequestTournamentCheerOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentCheerOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentCheerOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentCheerOK;
                summary.rmiName = RmiName_CG_RequestTournamentCheerOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentCheerListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentCheerListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentCheerListOK, RmiName_CG_RequestTournamentCheerListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentCheerListOK;
                summary.rmiName = RmiName_CG_RequestTournamentCheerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentCheerListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentCheerListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentCheerListOK;
                summary.rmiName = RmiName_CG_RequestTournamentCheerListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentWatcherJoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentWatcherJoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentWatcherJoinOK, RmiName_CG_RequestTournamentWatcherJoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentWatcherJoinOK;
                summary.rmiName = RmiName_CG_RequestTournamentWatcherJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentWatcherJoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentWatcherJoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentWatcherJoinOK;
                summary.rmiName = RmiName_CG_RequestTournamentWatcherJoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentWatcherExitOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentWatcherExitOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentWatcherExitOK, RmiName_CG_RequestTournamentWatcherExitOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentWatcherExitOK;
                summary.rmiName = RmiName_CG_RequestTournamentWatcherExitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentWatcherExitOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentWatcherExitOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentWatcherExitOK;
                summary.rmiName = RmiName_CG_RequestTournamentWatcherExitOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentMatchPlayInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentMatchPlayInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentMatchPlayInfoOK, RmiName_CG_RequestTournamentMatchPlayInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchPlayInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchPlayInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentMatchPlayInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentMatchPlayInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentMatchPlayInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentMatchPlayInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestTournamentReplayInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestTournamentReplayInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestTournamentReplayInfoOK, RmiName_CG_RequestTournamentReplayInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentReplayInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentReplayInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestTournamentReplayInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestTournamentReplayInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestTournamentReplayInfoOK;
                summary.rmiName = RmiName_CG_RequestTournamentReplayInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarLobbyInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarLobbyInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarLobbyInfoOK, RmiName_CG_RequestGuildWarLobbyInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarLobbyInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarLobbyInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarLobbyInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarLobbyInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarRankInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarRankInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarRankInfoOK, RmiName_CG_RequestGuildWarRankInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarRankInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarRankInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarRankInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarRankInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarRankInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarRankInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarVersusRecordInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarVersusRecordInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarVersusRecordInfoOK, RmiName_CG_RequestGuildWarVersusRecordInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarVersusRecordInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarVersusRecordInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarVersusRecordInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarVersusRecordInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarVersusRecordInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarVersusRecordInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarGuildMemberListOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarGuildMemberListOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarGuildMemberListOK, RmiName_CG_RequestGuildWarGuildMemberListOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarGuildMemberListOK;
                summary.rmiName = RmiName_CG_RequestGuildWarGuildMemberListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarGuildMemberListOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarGuildMemberListOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarGuildMemberListOK;
                summary.rmiName = RmiName_CG_RequestGuildWarGuildMemberListOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarWorldMapInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarWorldMapInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarWorldMapInfoOK, RmiName_CG_RequestGuildWarWorldMapInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarWorldMapInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarWorldMapInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarWorldMapInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarWorldMapInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarWorldMapInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarWorldMapInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarAttackSquadChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarAttackSquadChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarAttackSquadChangeOK, RmiName_CG_RequestGuildWarAttackSquadChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarAttackSquadChangeOK;
                summary.rmiName = RmiName_CG_RequestGuildWarAttackSquadChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarAttackSquadChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarAttackSquadChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarAttackSquadChangeOK;
                summary.rmiName = RmiName_CG_RequestGuildWarAttackSquadChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarDefenceTeamChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarDefenceTeamChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarDefenceTeamChangeOK, RmiName_CG_RequestGuildWarDefenceTeamChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarDefenceTeamChangeOK;
                summary.rmiName = RmiName_CG_RequestGuildWarDefenceTeamChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarDefenceTeamChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarDefenceTeamChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarDefenceTeamChangeOK;
                summary.rmiName = RmiName_CG_RequestGuildWarDefenceTeamChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarRegionBonusScoreChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarRegionBonusScoreChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarRegionBonusScoreChangeOK, RmiName_CG_RequestGuildWarRegionBonusScoreChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarRegionBonusScoreChangeOK;
                summary.rmiName = RmiName_CG_RequestGuildWarRegionBonusScoreChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarRegionBonusScoreChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarRegionBonusScoreChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarRegionBonusScoreChangeOK;
                summary.rmiName = RmiName_CG_RequestGuildWarRegionBonusScoreChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarAreaGuildMemberChangeOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarAreaGuildMemberChangeOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarAreaGuildMemberChangeOK, RmiName_CG_RequestGuildWarAreaGuildMemberChangeOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarAreaGuildMemberChangeOK;
                summary.rmiName = RmiName_CG_RequestGuildWarAreaGuildMemberChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarAreaGuildMemberChangeOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarAreaGuildMemberChangeOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarAreaGuildMemberChangeOK;
                summary.rmiName = RmiName_CG_RequestGuildWarAreaGuildMemberChangeOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_RequestGuildWarBattleRecordInfoOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_RequestGuildWarBattleRecordInfoOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_RequestGuildWarBattleRecordInfoOK, RmiName_CG_RequestGuildWarBattleRecordInfoOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarBattleRecordInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarBattleRecordInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_RequestGuildWarBattleRecordInfoOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_RequestGuildWarBattleRecordInfoOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_RequestGuildWarBattleRecordInfoOK;
                summary.rmiName = RmiName_CG_RequestGuildWarBattleRecordInfoOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildWar_Stage_StartOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildWar_Stage_StartOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildWar_Stage_StartOK, RmiName_CG_Request_GuildWar_Stage_StartOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildWar_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_GuildWar_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildWar_Stage_StartOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildWar_Stage_StartOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildWar_Stage_StartOK;
                summary.rmiName = RmiName_CG_Request_GuildWar_Stage_StartOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildWar_Stage_ClearOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildWar_Stage_ClearOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildWar_Stage_ClearOK, RmiName_CG_Request_GuildWar_Stage_ClearOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildWar_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_GuildWar_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildWar_Stage_ClearOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildWar_Stage_ClearOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildWar_Stage_ClearOK;
                summary.rmiName = RmiName_CG_Request_GuildWar_Stage_ClearOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildWar_Stage_RejoinOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildWar_Stage_RejoinOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildWar_Stage_RejoinOK, RmiName_CG_Request_GuildWar_Stage_RejoinOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildWar_Stage_RejoinOK;
                summary.rmiName = RmiName_CG_Request_GuildWar_Stage_RejoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildWar_Stage_RejoinOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildWar_Stage_RejoinOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildWar_Stage_RejoinOK;
                summary.rmiName = RmiName_CG_Request_GuildWar_Stage_RejoinOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
        void ProcessReceivedMessage_CG_Request_GuildWar_Stage_HeroStatus_SyncOK(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
        {
            Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
            ctx.sentFrom = pa.RemoteHostID;
            ctx.relayed = pa.IsRelayed;
            ctx.hostTag = hostTag;
            ctx.encryptMode = pa.EncryptMode;
            ctx.compressMode = pa.CompressMode;

            core.PostCheckReadMessage(__msg, RmiName_CG_Request_GuildWar_Stage_HeroStatus_SyncOK);
            if (enableNotifyCallFromStub == true)
            {
                string parameterString = "";
                NotifyCallFromStub(Common.CG_Request_GuildWar_Stage_HeroStatus_SyncOK, RmiName_CG_Request_GuildWar_Stage_HeroStatus_SyncOK, parameterString);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
                summary.rmiID = Common.CG_Request_GuildWar_Stage_HeroStatus_SyncOK;
                summary.rmiName = RmiName_CG_Request_GuildWar_Stage_HeroStatus_SyncOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                BeforeRmiInvocation(summary);
            }

            long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

            // Call this method.
            bool __ret = CG_Request_GuildWar_Stage_HeroStatus_SyncOK(remote, ctx);

            if (__ret == false)
            {
                // Error: RMI function that a user did not create has been called. 
                core.ShowNotImplementedRmiWarning(RmiName_CG_Request_GuildWar_Stage_HeroStatus_SyncOK);
            }

            if (enableStubProfiling)
            {
                Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
                summary.rmiID = Common.CG_Request_GuildWar_Stage_HeroStatus_SyncOK;
                summary.rmiName = RmiName_CG_Request_GuildWar_Stage_HeroStatus_SyncOK;
                summary.hostID = remote;
                summary.hostTag = hostTag;
                summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs() - t0;
                AfterRmiInvocation(summary);
            }
        }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_CG_CommonCancel="CG_CommonCancel";
public const string RmiName_GC_NotifyUserLevelUp="GC_NotifyUserLevelUp";
public const string RmiName_CG_FrozenAssetCancel="CG_FrozenAssetCancel";
public const string RmiName_CG_RequestChannelUserInfoOK="CG_RequestChannelUserInfoOK";
public const string RmiName_CG_RequestHeartBeatOK="CG_RequestHeartBeatOK";
public const string RmiName_CG_RequestChangeNicknameOK="CG_RequestChangeNicknameOK";
public const string RmiName_CG_RequestChangeWantToSayOK="CG_RequestChangeWantToSayOK";
public const string RmiName_CG_RequestStageInfoOK="CG_RequestStageInfoOK";
public const string RmiName_CG_RequestTeamInfoOK="CG_RequestTeamInfoOK";
public const string RmiName_CG_RequestTeamSlotChangeOK="CG_RequestTeamSlotChangeOK";
public const string RmiName_CG_RequestTeamNameChangeOK="CG_RequestTeamNameChangeOK";
public const string RmiName_CG_RequestLobbyInfoOK="CG_RequestLobbyInfoOK";
public const string RmiName_CG_RequestBasePointInfoOK="CG_RequestBasePointInfoOK";
public const string RmiName_CG_RequestMercenaryListOK="CG_RequestMercenaryListOK";
public const string RmiName_CG_RequestMercenaryInfoOK="CG_RequestMercenaryInfoOK";
public const string RmiName_CG_RequestGuildInfoOK="CG_RequestGuildInfoOK";
public const string RmiName_CG_RequestChatStampUpdateBookmarkOK="CG_RequestChatStampUpdateBookmarkOK";
public const string RmiName_CG_RequestChatStampUpdateQuickMessageOK="CG_RequestChatStampUpdateQuickMessageOK";
public const string RmiName_CG_RequestMainSkinChangeOK="CG_RequestMainSkinChangeOK";
public const string RmiName_CG_RequestEventListOK="CG_RequestEventListOK";
public const string RmiName_CG_RequestCheatEnterOK="CG_RequestCheatEnterOK";
public const string RmiName_CG_RequestCheatStageClearOK="CG_RequestCheatStageClearOK";
public const string RmiName_CG_RequestDllGetItemOK="CG_RequestDllGetItemOK";
public const string RmiName_CG_RequestRecommendFriendUSNListOK="CG_RequestRecommendFriendUSNListOK";
public const string RmiName_CG_RequestDailyResetOK="CG_RequestDailyResetOK";
public const string RmiName_CG_NotifyMaintenance="CG_NotifyMaintenance";
public const string RmiName_CG_RequestFrozenAssetRedeemOK="CG_RequestFrozenAssetRedeemOK";
public const string RmiName_CG_RequestSecurityTokenOK="CG_RequestSecurityTokenOK";
public const string RmiName_CG_RequestNetmarbleAuthOK="CG_RequestNetmarbleAuthOK";
public const string RmiName_CG_RequestAuthenticateCreateOK="CG_RequestAuthenticateCreateOK";
public const string RmiName_CG_RequestEditorUserInfoByNickNameOK="CG_RequestEditorUserInfoByNickNameOK";
public const string RmiName_CG_RequestLoginOK="CG_RequestLoginOK";
public const string RmiName_CG_RequestLoginInstantlyOK="CG_RequestLoginInstantlyOK";
public const string RmiName_CG_RequestForceLogoutOK="CG_RequestForceLogoutOK";
public const string RmiName_CG_RetryRequestOK="CG_RetryRequestOK";
public const string RmiName_CG_RequestBillingInitializeOK="CG_RequestBillingInitializeOK";
public const string RmiName_CG_RequestBillingVerifyPUOK="CG_RequestBillingVerifyPUOK";
public const string RmiName_CG_RequestBillingRemainTROK="CG_RequestBillingRemainTROK";
public const string RmiName_CG_RequestBillingCouponVerifyOK="CG_RequestBillingCouponVerifyOK";
public const string RmiName_CG_RequestBillingCrossPromotionOK="CG_RequestBillingCrossPromotionOK";
public const string RmiName_CG_RequestBillingPackageShopOK="CG_RequestBillingPackageShopOK";
public const string RmiName_CG_RequestAgeInputOK="CG_RequestAgeInputOK";
public const string RmiName_CG_Notify_WolverineOK="CG_Notify_WolverineOK";
public const string RmiName_CG_RequestSDKInfoChangeOK="CG_RequestSDKInfoChangeOK";
public const string RmiName_CG_RequestSkinLevelUpBySkinMaterialOK="CG_RequestSkinLevelUpBySkinMaterialOK";
public const string RmiName_CG_RequestSkinResearchOK="CG_RequestSkinResearchOK";
public const string RmiName_CG_RequestSkinResearchInitOK="CG_RequestSkinResearchInitOK";
public const string RmiName_CG_RequestSkinMaterialGrindOK="CG_RequestSkinMaterialGrindOK";
public const string RmiName_CG_RequestSkinAwakenOK="CG_RequestSkinAwakenOK";
public const string RmiName_CG_RequestSkinHeadStyleChangeOK="CG_RequestSkinHeadStyleChangeOK";
public const string RmiName_CG_RequestSkinEvolutionOK="CG_RequestSkinEvolutionOK";
public const string RmiName_CG_RequestSkinSkillLevelUpOK="CG_RequestSkinSkillLevelUpOK";
public const string RmiName_CG_RequestSkinGiveFellowshipExpOK="CG_RequestSkinGiveFellowshipExpOK";
public const string RmiName_CG_RequestSkinFellowshipLevelUpRewardOK="CG_RequestSkinFellowshipLevelUpRewardOK";
public const string RmiName_CG_RequestCostumeEquipOK="CG_RequestCostumeEquipOK";
public const string RmiName_CG_RequestCostumeUnEquipOK="CG_RequestCostumeUnEquipOK";
public const string RmiName_CG_RequestCostumeUnLockOK="CG_RequestCostumeUnLockOK";
public const string RmiName_CG_RequestSkinOverEvolutionOK="CG_RequestSkinOverEvolutionOK";
public const string RmiName_CG_RequestSkinMaxAwakenRewardOK="CG_RequestSkinMaxAwakenRewardOK";
public const string RmiName_CG_RequestCostumeRegisterOK="CG_RequestCostumeRegisterOK";
public const string RmiName_CG_RequestSkinLoveRewardOK="CG_RequestSkinLoveRewardOK";
public const string RmiName_CG_RequestCostumeAutoRegisterOK="CG_RequestCostumeAutoRegisterOK";
public const string RmiName_CG_RequestStoryCostumeOK="CG_RequestStoryCostumeOK";
public const string RmiName_CG_RequestCostumeLevelUpOK="CG_RequestCostumeLevelUpOK";
public const string RmiName_CG_RequestSkinMaxAwakenOK="CG_RequestSkinMaxAwakenOK";
public const string RmiName_CG_RequestWeaponEquipOK="CG_RequestWeaponEquipOK";
public const string RmiName_CG_RequestWeaponUnEquipOK="CG_RequestWeaponUnEquipOK";
public const string RmiName_CG_RequestWeaponSellOK="CG_RequestWeaponSellOK";
public const string RmiName_CG_RequestWeaponGrindOK="CG_RequestWeaponGrindOK";
public const string RmiName_CG_RequestWeaponUpgradeOK="CG_RequestWeaponUpgradeOK";
public const string RmiName_CG_RequestWeaponUpgradeRetryOK="CG_RequestWeaponUpgradeRetryOK";
public const string RmiName_CG_RequestWeaponEvolutionOK="CG_RequestWeaponEvolutionOK";
public const string RmiName_CG_RequestWeaponEvolutionRetryOK="CG_RequestWeaponEvolutionRetryOK";
public const string RmiName_CG_RequestWeaponOptionEnhanceOK="CG_RequestWeaponOptionEnhanceOK";
public const string RmiName_CG_RequestWeaponLockOK="CG_RequestWeaponLockOK";
public const string RmiName_CG_RequestWeaponUnLockOK="CG_RequestWeaponUnLockOK";
public const string RmiName_CG_RequestWeaponEquipExchangeOK="CG_RequestWeaponEquipExchangeOK";
public const string RmiName_CG_RequestWeaponEquipExchangeAllOK="CG_RequestWeaponEquipExchangeAllOK";
public const string RmiName_CG_RequestWeaponEquipRecommandOK="CG_RequestWeaponEquipRecommandOK";
public const string RmiName_CG_RequestWeaponCarveOK="CG_RequestWeaponCarveOK";
public const string RmiName_CG_RequestWeaponCarveRemoveOK="CG_RequestWeaponCarveRemoveOK";
public const string RmiName_CG_RequestStageRejoinOK="CG_RequestStageRejoinOK";
public const string RmiName_CG_Request_Main_Stage_StartOK="CG_Request_Main_Stage_StartOK";
public const string RmiName_CG_Request_Main_Stage_ClearOK="CG_Request_Main_Stage_ClearOK";
public const string RmiName_CG_Request_Main_Stage_ContinueOK="CG_Request_Main_Stage_ContinueOK";
public const string RmiName_CG_Request_Free_Stage_StartOK="CG_Request_Free_Stage_StartOK";
public const string RmiName_CG_Request_Free_Stage_ClearOK="CG_Request_Free_Stage_ClearOK";
public const string RmiName_CG_Request_Free_Stage_ContinueOK="CG_Request_Free_Stage_ContinueOK";
public const string RmiName_CG_RequestHawkRunStageStartOK="CG_RequestHawkRunStageStartOK";
public const string RmiName_CG_RequestHawkRunStageClearOK="CG_RequestHawkRunStageClearOK";
public const string RmiName_CG_RequestEventStageClearOK="CG_RequestEventStageClearOK";
public const string RmiName_CG_Request_Quest_Stage_StartOK="CG_Request_Quest_Stage_StartOK";
public const string RmiName_CG_Request_Quest_Stage_ClearOK="CG_Request_Quest_Stage_ClearOK";
public const string RmiName_CG_Request_Quest_Stage_ContinueOK="CG_Request_Quest_Stage_ContinueOK";
public const string RmiName_CG_Request_Week_Stage_StartOK="CG_Request_Week_Stage_StartOK";
public const string RmiName_CG_Request_Week_Stage_ClearOK="CG_Request_Week_Stage_ClearOK";
public const string RmiName_CG_Request_Week_Stage_ContinueOK="CG_Request_Week_Stage_ContinueOK";
public const string RmiName_CG_Request_Boss_Stage_StartOK="CG_Request_Boss_Stage_StartOK";
public const string RmiName_CG_Request_Boss_Stage_ClearOK="CG_Request_Boss_Stage_ClearOK";
public const string RmiName_CG_Request_Boss_Stage_ContinueOK="CG_Request_Boss_Stage_ContinueOK";
public const string RmiName_CG_Request_Memorial_Stage_StartOK="CG_Request_Memorial_Stage_StartOK";
public const string RmiName_CG_Request_Memorial_Stage_ClearOK="CG_Request_Memorial_Stage_ClearOK";
public const string RmiName_CG_Request_Memorial_Stage_ContinueOK="CG_Request_Memorial_Stage_ContinueOK";
public const string RmiName_CG_Request_Limited_Stage_StartOK="CG_Request_Limited_Stage_StartOK";
public const string RmiName_CG_Request_Limited_Stage_ClearOK="CG_Request_Limited_Stage_ClearOK";
public const string RmiName_CG_Request_Limited_Stage_ContinueOK="CG_Request_Limited_Stage_ContinueOK";
public const string RmiName_CG_Request_Main_ExtraStage_StartOK="CG_Request_Main_ExtraStage_StartOK";
public const string RmiName_CG_Request_Main_ExtraStage_ClearOK="CG_Request_Main_ExtraStage_ClearOK";
public const string RmiName_CG_Request_Main_ExtraStage_ContinueOK="CG_Request_Main_ExtraStage_ContinueOK";
public const string RmiName_CG_Request_Boss_ExtraStage_StartOK="CG_Request_Boss_ExtraStage_StartOK";
public const string RmiName_CG_Request_Boss_ExtraStage_ClearOK="CG_Request_Boss_ExtraStage_ClearOK";
public const string RmiName_CG_Request_Boss_ExtraStage_ContinueOK="CG_Request_Boss_ExtraStage_ContinueOK";
public const string RmiName_CG_RequestRewardStageClearOK="CG_RequestRewardStageClearOK";
public const string RmiName_CG_Request_AnotherMain_Stage_StartOK="CG_Request_AnotherMain_Stage_StartOK";
public const string RmiName_CG_Request_AnotherMain_Stage_ClearOK="CG_Request_AnotherMain_Stage_ClearOK";
public const string RmiName_CG_Request_AnotherMain_Stage_ContinueOK="CG_Request_AnotherMain_Stage_ContinueOK";
public const string RmiName_CG_Request_Reverse_Stage_StartOK="CG_Request_Reverse_Stage_StartOK";
public const string RmiName_CG_Request_Reverse_Stage_ClearOK="CG_Request_Reverse_Stage_ClearOK";
public const string RmiName_CG_Request_Reverse_Star_RewardOK="CG_Request_Reverse_Star_RewardOK";
public const string RmiName_CG_Request_Reverse_Group_RewardOK="CG_Request_Reverse_Group_RewardOK";
public const string RmiName_CG_Request_Main_EventAreaStage_StartOK="CG_Request_Main_EventAreaStage_StartOK";
public const string RmiName_CG_Request_Main_EventAreaStage_ClearOK="CG_Request_Main_EventAreaStage_ClearOK";
public const string RmiName_CG_Request_Main_EventAreaStage_ContinueOK="CG_Request_Main_EventAreaStage_ContinueOK";
public const string RmiName_CG_Request_Free_EventAreaStage_StartOK="CG_Request_Free_EventAreaStage_StartOK";
public const string RmiName_CG_Request_Free_EventAreaStage_ClearOK="CG_Request_Free_EventAreaStage_ClearOK";
public const string RmiName_CG_Request_Free_EventAreaStage_ContinueOK="CG_Request_Free_EventAreaStage_ContinueOK";
public const string RmiName_CG_RequestEventAreaRewardStageClearOK="CG_RequestEventAreaRewardStageClearOK";
public const string RmiName_CG_Request_Free_EventStage_StartOK="CG_Request_Free_EventStage_StartOK";
public const string RmiName_CG_Request_Free_EventStage_ClearOK="CG_Request_Free_EventStage_ClearOK";
public const string RmiName_CG_Request_Free_EventStage_ContinueOK="CG_Request_Free_EventStage_ContinueOK";
public const string RmiName_CG_RequestEventExchangeOK="CG_RequestEventExchangeOK";
public const string RmiName_CG_RequestEventPlayCountRewardOK="CG_RequestEventPlayCountRewardOK";
public const string RmiName_CG_Request_Main_ListEventStage_StartOK="CG_Request_Main_ListEventStage_StartOK";
public const string RmiName_CG_Request_Main_ListEventStage_ClearOK="CG_Request_Main_ListEventStage_ClearOK";
public const string RmiName_CG_Request_Main_ListEventStage_ContinueOK="CG_Request_Main_ListEventStage_ContinueOK";
public const string RmiName_CG_Request_Free_ListEventStage_StartOK="CG_Request_Free_ListEventStage_StartOK";
public const string RmiName_CG_Request_Free_ListEventStage_ClearOK="CG_Request_Free_ListEventStage_ClearOK";
public const string RmiName_CG_Request_Free_ListEventStage_ContinueOK="CG_Request_Free_ListEventStage_ContinueOK";
public const string RmiName_CG_Request_Main_FinalBossStage_StartOK="CG_Request_Main_FinalBossStage_StartOK";
public const string RmiName_CG_Request_Main_FinalBossStage_ClearOK="CG_Request_Main_FinalBossStage_ClearOK";
public const string RmiName_CG_Request_Main_FinalBossStage_ContinueOK="CG_Request_Main_FinalBossStage_ContinueOK";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_StartOK="CG_Request_FinalBoss_EventFreeStage_StartOK";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_ClearOK="CG_Request_FinalBoss_EventFreeStage_ClearOK";
public const string RmiName_CG_Request_FinalBoss_EventFreeStage_ContinueOK="CG_Request_FinalBoss_EventFreeStage_ContinueOK";
public const string RmiName_CG_Request_Limited_EventStage_StartOK="CG_Request_Limited_EventStage_StartOK";
public const string RmiName_CG_Request_Limited_EventStage_ClearOK="CG_Request_Limited_EventStage_ClearOK";
public const string RmiName_CG_Request_Limited_EventStage_ContinueOK="CG_Request_Limited_EventStage_ContinueOK";
public const string RmiName_CG_Request_Boss_EventStage_StartOK="CG_Request_Boss_EventStage_StartOK";
public const string RmiName_CG_Request_Boss_EventStage_ClearOK="CG_Request_Boss_EventStage_ClearOK";
public const string RmiName_CG_Request_Boss_EventStage_ContinueOK="CG_Request_Boss_EventStage_ContinueOK";
public const string RmiName_CG_Request_Monthly_EventStage_StartOK="CG_Request_Monthly_EventStage_StartOK";
public const string RmiName_CG_Request_Monthly_EventStage_ClearOK="CG_Request_Monthly_EventStage_ClearOK";
public const string RmiName_CG_Request_Monthly_EventStage_ContinueOK="CG_Request_Monthly_EventStage_ContinueOK";
public const string RmiName_CG_RequestMonthlyStagePointRewardOK="CG_RequestMonthlyStagePointRewardOK";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_StartOK="CG_Request_ChallengeBoss_EventStage_StartOK";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_ClearOK="CG_Request_ChallengeBoss_EventStage_ClearOK";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_ContinueOK="CG_Request_ChallengeBoss_EventStage_ContinueOK";
public const string RmiName_CG_Request_ChallengeBoss_EventStage_InfoOK="CG_Request_ChallengeBoss_EventStage_InfoOK";
public const string RmiName_CG_Request_ChallengeBoss_Event_Point_RewardOK="CG_Request_ChallengeBoss_Event_Point_RewardOK";
public const string RmiName_CG_Request_Training_Stage_InfoOK="CG_Request_Training_Stage_InfoOK";
public const string RmiName_CG_Request_Training_Stage_StartOK="CG_Request_Training_Stage_StartOK";
public const string RmiName_CG_Request_Training_Stage_ClearOK="CG_Request_Training_Stage_ClearOK";
public const string RmiName_CG_Request_Training_Stage_ContinueOK="CG_Request_Training_Stage_ContinueOK";
public const string RmiName_CG_Request_Training_Stage_OpenOK="CG_Request_Training_Stage_OpenOK";
public const string RmiName_CG_Request_Training_Stage_RefreshOK="CG_Request_Training_Stage_RefreshOK";
public const string RmiName_CG_RequestWeekStageGaugeRewardOK="CG_RequestWeekStageGaugeRewardOK";
public const string RmiName_CG_RequestIngameBattleStartOK="CG_RequestIngameBattleStartOK";
public const string RmiName_CG_RequestStageEndLogOK="CG_RequestStageEndLogOK";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_StartOK="CG_Request_SingleSiege_ExtraStage_StartOK";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_ClearOK="CG_Request_SingleSiege_ExtraStage_ClearOK";
public const string RmiName_CG_Request_SingleSiege_ExtraStage_ContinueOK="CG_Request_SingleSiege_ExtraStage_ContinueOK";
public const string RmiName_CG_Request_FinalBoss_Stage_StartOK="CG_Request_FinalBoss_Stage_StartOK";
public const string RmiName_CG_Request_FinalBoss_Stage_ClearOK="CG_Request_FinalBoss_Stage_ClearOK";
public const string RmiName_CG_Request_FinalBoss_Stage_ContinueOK="CG_Request_FinalBoss_Stage_ContinueOK";
public const string RmiName_CG_Request_FinalBoss_Season_InfoOK="CG_Request_FinalBoss_Season_InfoOK";
public const string RmiName_CG_Request_FinalBoss_Season_Rank_InfoOK="CG_Request_FinalBoss_Season_Rank_InfoOK";
public const string RmiName_CG_Request_GuildBoss_Stage_StartOK="CG_Request_GuildBoss_Stage_StartOK";
public const string RmiName_CG_Request_GuildBoss_Stage_ClearOK="CG_Request_GuildBoss_Stage_ClearOK";
public const string RmiName_CG_Request_GuildBoss_Lobby_InfoOK="CG_Request_GuildBoss_Lobby_InfoOK";
public const string RmiName_CG_Request_GuildBoss_Rank_InfoOK="CG_Request_GuildBoss_Rank_InfoOK";
public const string RmiName_CG_Request_GuildBoss_LastWeek_Rank_InfoOK="CG_Request_GuildBoss_LastWeek_Rank_InfoOK";
public const string RmiName_CG_Request_GuildBoss_Time_RefreshOK="CG_Request_GuildBoss_Time_RefreshOK";
public const string RmiName_CG_RequestMailListOK="CG_RequestMailListOK";
public const string RmiName_CG_RequestMailConfirmOK="CG_RequestMailConfirmOK";
public const string RmiName_CG_RequestMailConfirmAllOK="CG_RequestMailConfirmAllOK";
public const string RmiName_CG_RequestMailHistoryListOK="CG_RequestMailHistoryListOK";
public const string RmiName_CG_RequestMailRecentlyHistoryListOK="CG_RequestMailRecentlyHistoryListOK";
public const string RmiName_CG_RequestFriendMailListOK="CG_RequestFriendMailListOK";
public const string RmiName_CG_RequestFriendMailConfirmOK="CG_RequestFriendMailConfirmOK";
public const string RmiName_CG_RequestFriendMailConfirmAllOK="CG_RequestFriendMailConfirmAllOK";
public const string RmiName_CG_RequestNoticeMailRewardOK="CG_RequestNoticeMailRewardOK";
public const string RmiName_CG_RequestPackageMailListOK="CG_RequestPackageMailListOK";
public const string RmiName_CG_RequestPackageMailGetOK="CG_RequestPackageMailGetOK";
public const string RmiName_CG_RequestPackageMailHistoryListOK="CG_RequestPackageMailHistoryListOK";
public const string RmiName_CG_RequestLevelUpPackageRewardOK="CG_RequestLevelUpPackageRewardOK";
public const string RmiName_CG_RequestLevelUpPackageRewardAllOK="CG_RequestLevelUpPackageRewardAllOK";
public const string RmiName_CG_RequestAttendancePackageRewardOK="CG_RequestAttendancePackageRewardOK";
public const string RmiName_CG_RequestAttendancePackageRewardAllOK="CG_RequestAttendancePackageRewardAllOK";
public const string RmiName_CG_RequestMailADRewardOK="CG_RequestMailADRewardOK";
public const string RmiName_CG_RequestItemInventoryBuyOK="CG_RequestItemInventoryBuyOK";
public const string RmiName_CG_RequestWeaponInventoryBuyOK="CG_RequestWeaponInventoryBuyOK";
public const string RmiName_CG_RequestWeekStageKeyBuyOK="CG_RequestWeekStageKeyBuyOK";
public const string RmiName_CG_RequestDiaShopInfoOK="CG_RequestDiaShopInfoOK";
public const string RmiName_CG_RequestDiaShopBuyOK="CG_RequestDiaShopBuyOK";
public const string RmiName_CG_RequestGambleShopBuyOK="CG_RequestGambleShopBuyOK";
public const string RmiName_CG_RequestItemGambleShopInfoOK="CG_RequestItemGambleShopInfoOK";
public const string RmiName_CG_RequestItemGambleShopBuyOK="CG_RequestItemGambleShopBuyOK";
public const string RmiName_CG_RequestRandomShopBuyOK="CG_RequestRandomShopBuyOK";
public const string RmiName_CG_RequestRandomShopRefreshOK="CG_RequestRandomShopRefreshOK";
public const string RmiName_CG_RequestRandomShopInfoOK="CG_RequestRandomShopInfoOK";
public const string RmiName_CG_RequestBasePointShopInfoOK="CG_RequestBasePointShopInfoOK";
public const string RmiName_CG_RequestBasePointShopBuyOK="CG_RequestBasePointShopBuyOK";
public const string RmiName_CG_RequestArenaRealTimePvpShopInfoOK="CG_RequestArenaRealTimePvpShopInfoOK";
public const string RmiName_CG_RequestArenaRealTimePvpShopBuyOK="CG_RequestArenaRealTimePvpShopBuyOK";
public const string RmiName_CG_RequestCoinShopInfoOK="CG_RequestCoinShopInfoOK";
public const string RmiName_CG_RequestCoinShopBuyOK="CG_RequestCoinShopBuyOK";
public const string RmiName_CG_RequestCoinShopDailyBuyOK="CG_RequestCoinShopDailyBuyOK";
public const string RmiName_CG_RequestCostumeShopInfoOK="CG_RequestCostumeShopInfoOK";
public const string RmiName_CG_RequestCostumeShopBuyOK="CG_RequestCostumeShopBuyOK";
public const string RmiName_CG_RequestFriendPointShopInfoOK="CG_RequestFriendPointShopInfoOK";
public const string RmiName_CG_RequestFriendPointShopBuyOK="CG_RequestFriendPointShopBuyOK";
public const string RmiName_CG_RequestCommonItemSellOK="CG_RequestCommonItemSellOK";
public const string RmiName_CG_RequestCommonItemRemoveOK="CG_RequestCommonItemRemoveOK";
public const string RmiName_CG_RequestPackageShopInfoOK="CG_RequestPackageShopInfoOK";
public const string RmiName_CG_RequestGambleShopInfoOK="CG_RequestGambleShopInfoOK";
public const string RmiName_CG_RequestADRouletteRewardOK="CG_RequestADRouletteRewardOK";
public const string RmiName_CG_RequestRandomShopVisitRewardOK="CG_RequestRandomShopVisitRewardOK";
public const string RmiName_CG_RequestRandomShopScheduleInfoOK="CG_RequestRandomShopScheduleInfoOK";
public const string RmiName_CG_RequestPackageBuyOK="CG_RequestPackageBuyOK";
public const string RmiName_CG_RequestBuyDiaOK="CG_RequestBuyDiaOK";
public const string RmiName_CG_RequestBuyGoldOK="CG_RequestBuyGoldOK";
public const string RmiName_CG_RequestBuyStaminaOK="CG_RequestBuyStaminaOK";
public const string RmiName_CG_RequestGuildShopInfoOK="CG_RequestGuildShopInfoOK";
public const string RmiName_CG_RequestGuildShopBuyOK="CG_RequestGuildShopBuyOK";
public const string RmiName_CG_RequestBasePointShopResetOK="CG_RequestBasePointShopResetOK";
public const string RmiName_CG_RequestArenaRealTimePvpShopResetOK="CG_RequestArenaRealTimePvpShopResetOK";
public const string RmiName_CG_RequestCostumeShopPackageBuyOK="CG_RequestCostumeShopPackageBuyOK";
public const string RmiName_CG_RequestFinalBossShopInfoOK="CG_RequestFinalBossShopInfoOK";
public const string RmiName_CG_RequestFinalBossShopBuyOK="CG_RequestFinalBossShopBuyOK";
public const string RmiName_CG_RequestEventCollaborationCoinShopInfoOK="CG_RequestEventCollaborationCoinShopInfoOK";
public const string RmiName_CG_RequestEventCollaborationCoinShopBuyOK="CG_RequestEventCollaborationCoinShopBuyOK";
public const string RmiName_CG_RequestGuildShopResetOK="CG_RequestGuildShopResetOK";
public const string RmiName_CG_RequestCoinShopOnceBuyOK="CG_RequestCoinShopOnceBuyOK";
public const string RmiName_CG_RequestBingoGambleShopInfoOK="CG_RequestBingoGambleShopInfoOK";
public const string RmiName_CG_RequestBingoGambleShopResetOK="CG_RequestBingoGambleShopResetOK";
public const string RmiName_CG_RequestBingoGambleShopRewardOK="CG_RequestBingoGambleShopRewardOK";
public const string RmiName_CG_RequestDiaShopPackageBuyOK="CG_RequestDiaShopPackageBuyOK";
public const string RmiName_CG_RequestGambleChoiceShopBuyOK="CG_RequestGambleChoiceShopBuyOK";
public const string RmiName_CG_RequestFreePackageRewardOK="CG_RequestFreePackageRewardOK";
public const string RmiName_CG_RequestPackageMissionCloseOK="CG_RequestPackageMissionCloseOK";
public const string RmiName_CG_RequestMissionProgressOK="CG_RequestMissionProgressOK";
public const string RmiName_CG_RequestMissionClearOK="CG_RequestMissionClearOK";
public const string RmiName_CG_RequestMissionEventClearOK="CG_RequestMissionEventClearOK";
public const string RmiName_CG_RequestMissionGetAchievePointRewardOK="CG_RequestMissionGetAchievePointRewardOK";
public const string RmiName_CG_RequestQuestStartOK="CG_RequestQuestStartOK";
public const string RmiName_CG_RequestQuestProgressOK="CG_RequestQuestProgressOK";
public const string RmiName_CG_RequestQuestClearOK="CG_RequestQuestClearOK";
public const string RmiName_CG_RequestQuestRemoveOK="CG_RequestQuestRemoveOK";
public const string RmiName_CG_RequestNetmarbleQuestAchieveOK="CG_RequestNetmarbleQuestAchieveOK";
public const string RmiName_CG_RequestNetmarbleQuestRewardOK="CG_RequestNetmarbleQuestRewardOK";
public const string RmiName_CG_RequestDirectSelectorRewardOK="CG_RequestDirectSelectorRewardOK";
public const string RmiName_CG_RequestQuestChapterClearOK="CG_RequestQuestChapterClearOK";
public const string RmiName_CG_RequestEventQuestClearOK="CG_RequestEventQuestClearOK";
public const string RmiName_CG_RequestAnotherQuestClearOK="CG_RequestAnotherQuestClearOK";
public const string RmiName_CG_RequestQuestGuideListAllClearRewardOK="CG_RequestQuestGuideListAllClearRewardOK";
public const string RmiName_CG_RequestLobbyVRSearchOK="CG_RequestLobbyVRSearchOK";
public const string RmiName_CG_RequestLobbyVRHelbramOK="CG_RequestLobbyVRHelbramOK";
public const string RmiName_CG_RequestLobbyNpcSkinOK="CG_RequestLobbyNpcSkinOK";
public const string RmiName_CG_RequestLobbyNpcGiftOK="CG_RequestLobbyNpcGiftOK";
public const string RmiName_CG_RequestLobbyKingAmberOK="CG_RequestLobbyKingAmberOK";
public const string RmiName_CG_RequestLobbyDropInteractiveOpenOK="CG_RequestLobbyDropInteractiveOpenOK";
public const string RmiName_CG_RequestLobbyUniqueInteractiveOpenOK="CG_RequestLobbyUniqueInteractiveOpenOK";
public const string RmiName_CG_RequestLobbyNpcTalkInfoOK="CG_RequestLobbyNpcTalkInfoOK";
public const string RmiName_CG_RequestLobbyNpcTalkChoiceOK="CG_RequestLobbyNpcTalkChoiceOK";
public const string RmiName_CG_RequestLobbyBarrelOK="CG_RequestLobbyBarrelOK";
public const string RmiName_CG_RequestLobbyBarrelRefillOK="CG_RequestLobbyBarrelRefillOK";
public const string RmiName_CG_RequestLobbyCleanTableOK="CG_RequestLobbyCleanTableOK";
public const string RmiName_CG_RequestLobbyServeBeerOK="CG_RequestLobbyServeBeerOK";
public const string RmiName_CG_RequestLobbyPlayJukeboxOK="CG_RequestLobbyPlayJukeboxOK";
public const string RmiName_CG_RequestLobbyElizabethTouchOK="CG_RequestLobbyElizabethTouchOK";
public const string RmiName_CG_RequestLobbyHawkAngerOK="CG_RequestLobbyHawkAngerOK";
public const string RmiName_CG_RequestAttendanceRewardOK="CG_RequestAttendanceRewardOK";
public const string RmiName_CG_RequestAttendanceEventRewardOK="CG_RequestAttendanceEventRewardOK";
public const string RmiName_CG_RequestCookingStartOK="CG_RequestCookingStartOK";
public const string RmiName_CG_RequestRecipeActiveOK="CG_RequestRecipeActiveOK";
public const string RmiName_CG_RequestCookingRecipeOrderInfoOK="CG_RequestCookingRecipeOrderInfoOK";
public const string RmiName_CG_RequestCookingRecipeOrderOK="CG_RequestCookingRecipeOrderOK";
public const string RmiName_CG_RequestCookingRecipeDisorderOK="CG_RequestCookingRecipeDisorderOK";
public const string RmiName_CG_RequestCookingRecipeCollectOK="CG_RequestCookingRecipeCollectOK";
public const string RmiName_CG_RequestCookingRecipeCollectOneSlotOK="CG_RequestCookingRecipeCollectOneSlotOK";
public const string RmiName_CG_RequestCookingUseCookingBuffOK="CG_RequestCookingUseCookingBuffOK";
public const string RmiName_CG_RequestGuestInfoOK="CG_RequestGuestInfoOK";
public const string RmiName_CG_RequestGuestChangeOK="CG_RequestGuestChangeOK";
public const string RmiName_CG_RequestGuestChangeTargetOK="CG_RequestGuestChangeTargetOK";
public const string RmiName_CG_RequestGuestTalkOK="CG_RequestGuestTalkOK";
public const string RmiName_CG_RequestGuestGiftOK="CG_RequestGuestGiftOK";
public const string RmiName_CG_RequestBirthdayNpcInfoOK="CG_RequestBirthdayNpcInfoOK";
public const string RmiName_CG_RequestRestRewardOK="CG_RequestRestRewardOK";
public const string RmiName_CG_RequestAttendanceFortuneEventRewardOK="CG_RequestAttendanceFortuneEventRewardOK";
public const string RmiName_CG_RequestBasePointGoldDonationOK="CG_RequestBasePointGoldDonationOK";
public const string RmiName_CG_RequestBasePointSetTriggerOK="CG_RequestBasePointSetTriggerOK";
public const string RmiName_CG_RequestBasePointDropInteractiveOpenOK="CG_RequestBasePointDropInteractiveOpenOK";
public const string RmiName_CG_RequestBasePointUniqueInteractiveOpenOK="CG_RequestBasePointUniqueInteractiveOpenOK";
public const string RmiName_CG_RequestBasePointDailyRewardOK="CG_RequestBasePointDailyRewardOK";
public const string RmiName_CG_RequestBasePointDonationEventRewardOK="CG_RequestBasePointDonationEventRewardOK";
public const string RmiName_CG_RequestBasePointDonationInfoOK="CG_RequestBasePointDonationInfoOK";
public const string RmiName_CG_RequestBasePointEventGoldDonationOK="CG_RequestBasePointEventGoldDonationOK";
public const string RmiName_CG_RequestEventBasepointInfoOK="CG_RequestEventBasepointInfoOK";
public const string RmiName_GC_NotifyDestroyInvite="GC_NotifyDestroyInvite";
public const string RmiName_CG_RequestDestroySetInviteOptionOK="CG_RequestDestroySetInviteOptionOK";
public const string RmiName_CG_RequestDestroyGetUserLoginListOK="CG_RequestDestroyGetUserLoginListOK";
public const string RmiName_CG_RequestDestroyGetFriendLoginListOK="CG_RequestDestroyGetFriendLoginListOK";
public const string RmiName_CG_RequestDestroyGetGuildLoginListOK="CG_RequestDestroyGetGuildLoginListOK";
public const string RmiName_CG_RequestDestroyGetReceivedInvitationListOK="CG_RequestDestroyGetReceivedInvitationListOK";
public const string RmiName_CG_RequestDestroyInviteOK="CG_RequestDestroyInviteOK";
public const string RmiName_CG_RequestDestroyRemoveInvitationOK="CG_RequestDestroyRemoveInvitationOK";
public const string RmiName_CG_RequestDestroyRemoveJoinInfoOK="CG_RequestDestroyRemoveJoinInfoOK";
public const string RmiName_CG_RequestDestroyCreateOK="CG_RequestDestroyCreateOK";
public const string RmiName_CG_RequestDestroyStartOK="CG_RequestDestroyStartOK";
public const string RmiName_CG_RequestDestroyBattleStartOK="CG_RequestDestroyBattleStartOK";
public const string RmiName_CG_RequestDestroyJoinOK="CG_RequestDestroyJoinOK";
public const string RmiName_CG_RequestDestroyClearOK="CG_RequestDestroyClearOK";
public const string RmiName_CG_RequestDestroyReJoinOK="CG_RequestDestroyReJoinOK";
public const string RmiName_CG_RequestDestroyRemoveOK="CG_RequestDestroyRemoveOK";
public const string RmiName_CG_RequestDestroyBattleEndOK="CG_RequestDestroyBattleEndOK";
public const string RmiName_CG_RequestDestroyInviteAIOK="CG_RequestDestroyInviteAIOK";
public const string RmiName_CG_RequestDestroyKickOutAIOK="CG_RequestDestroyKickOutAIOK";
public const string RmiName_CG_RequestEventDestroyCreateOK="CG_RequestEventDestroyCreateOK";
public const string RmiName_CG_RequestEventDestroyClearOK="CG_RequestEventDestroyClearOK";
public const string RmiName_CG_RequestEventDestroyStartOK="CG_RequestEventDestroyStartOK";
public const string RmiName_CG_RequestEventDestroyRemoveOK="CG_RequestEventDestroyRemoveOK";
public const string RmiName_CG_RequestEventChallengeDestroyCreateOK="CG_RequestEventChallengeDestroyCreateOK";
public const string RmiName_CG_RequestEventChallengeDestroyStartOK="CG_RequestEventChallengeDestroyStartOK";
public const string RmiName_CG_RequestEventChallengeDestroyClearOK="CG_RequestEventChallengeDestroyClearOK";
public const string RmiName_CG_RequestEventChallengeDestroyPointRefreshOK="CG_RequestEventChallengeDestroyPointRefreshOK";
public const string RmiName_CG_RequestEventChallengeDestroyUserRewardOK="CG_RequestEventChallengeDestroyUserRewardOK";
public const string RmiName_CG_RequestEventChallengeDestroyWorldRewardOK="CG_RequestEventChallengeDestroyWorldRewardOK";
public const string RmiName_CG_RequestFriendListOK="CG_RequestFriendListOK";
public const string RmiName_CG_RequestFriendGuildInfoOK="CG_RequestFriendGuildInfoOK";
public const string RmiName_CG_RequestFriendApplySendListOK="CG_RequestFriendApplySendListOK";
public const string RmiName_CG_RequestFriendApplyReceiveListOK="CG_RequestFriendApplyReceiveListOK";
public const string RmiName_CG_RequestFriendApplySendOK="CG_RequestFriendApplySendOK";
public const string RmiName_CG_RequestFriendApplyRejectOK="CG_RequestFriendApplyRejectOK";
public const string RmiName_CG_RequestFriendApplyReceiveAcceptOK="CG_RequestFriendApplyReceiveAcceptOK";
public const string RmiName_CG_RequestFriendApplyReceiveAcceptListOK="CG_RequestFriendApplyReceiveAcceptListOK";
public const string RmiName_CG_RequestFriendApplyReceiveRefuseOK="CG_RequestFriendApplyReceiveRefuseOK";
public const string RmiName_CG_RequestFriendApplyReceiveRefuseListOK="CG_RequestFriendApplyReceiveRefuseListOK";
public const string RmiName_CG_RequestFriendRemoveOK="CG_RequestFriendRemoveOK";
public const string RmiName_CG_RequestFriendSearchOK="CG_RequestFriendSearchOK";
public const string RmiName_CG_RequestFriendVisitOK="CG_RequestFriendVisitOK";
public const string RmiName_CG_RequestFriendPointSendOK="CG_RequestFriendPointSendOK";
public const string RmiName_CG_RequestFriendPointSendAllOK="CG_RequestFriendPointSendAllOK";
public const string RmiName_CG_RequestFriendLobbyInfoOK="CG_RequestFriendLobbyInfoOK";
public const string RmiName_CG_RequestFriendCookingRecipeInfoOK="CG_RequestFriendCookingRecipeInfoOK";
public const string RmiName_CG_RequestFriendCookingEatOK="CG_RequestFriendCookingEatOK";
public const string RmiName_CG_RequestFriendCookingEatFriendListOK="CG_RequestFriendCookingEatFriendListOK";
public const string RmiName_CG_RequestGuildRecommendListOK="CG_RequestGuildRecommendListOK";
public const string RmiName_CG_RequestGuildInfoWithMemberListOK="CG_RequestGuildInfoWithMemberListOK";
public const string RmiName_CG_RequestGuildSearchByNameOK="CG_RequestGuildSearchByNameOK";
public const string RmiName_CG_RequestGuildCreateOK="CG_RequestGuildCreateOK";
public const string RmiName_CG_RequestGuildDisbandOK="CG_RequestGuildDisbandOK";
public const string RmiName_CG_RequestGuildApplicantListOK="CG_RequestGuildApplicantListOK";
public const string RmiName_CG_RequestGuildApplyOK="CG_RequestGuildApplyOK";
public const string RmiName_CG_RequestGuildReturnApplicationOK="CG_RequestGuildReturnApplicationOK";
public const string RmiName_CG_RequestGuildAcceptApplicantOK="CG_RequestGuildAcceptApplicantOK";
public const string RmiName_CG_RequestGuildRejectApplicantOK="CG_RequestGuildRejectApplicantOK";
public const string RmiName_CG_RequestGuildLevelUpOK="CG_RequestGuildLevelUpOK";
public const string RmiName_CG_RequestGuildChangeNameOK="CG_RequestGuildChangeNameOK";
public const string RmiName_CG_RequestGuildChangeBoardOK="CG_RequestGuildChangeBoardOK";
public const string RmiName_CG_RequestGuildChangeMasterOK="CG_RequestGuildChangeMasterOK";
public const string RmiName_CG_RequestGuildChangeMemberGradeOK="CG_RequestGuildChangeMemberGradeOK";
public const string RmiName_CG_RequestGuildKickOutMemberOK="CG_RequestGuildKickOutMemberOK";
public const string RmiName_CG_RequestGuildLeaveOK="CG_RequestGuildLeaveOK";
public const string RmiName_CG_RequestGuildRoomInfoOK="CG_RequestGuildRoomInfoOK";
public const string RmiName_CG_RequestGuildAttendanceOK="CG_RequestGuildAttendanceOK";
public const string RmiName_CG_RequestGuildAttendanceRewardOK="CG_RequestGuildAttendanceRewardOK";
public const string RmiName_CG_RequestGuildUserInfoOK="CG_RequestGuildUserInfoOK";
public const string RmiName_CG_RequestGuildAttendanceStatusOK="CG_RequestGuildAttendanceStatusOK";
public const string RmiName_GC_NotifyGuildKickout="GC_NotifyGuildKickout";
public const string RmiName_CG_RequestGuildDonationOK="CG_RequestGuildDonationOK";
public const string RmiName_CG_RequestGuildDonationInitializeOK="CG_RequestGuildDonationInitializeOK";
public const string RmiName_CG_RequestGuildMissionInfoOK="CG_RequestGuildMissionInfoOK";
public const string RmiName_CG_RequestGuildMissionRewardOK="CG_RequestGuildMissionRewardOK";
public const string RmiName_GC_NotifyGuildAcceptApplicantOK="GC_NotifyGuildAcceptApplicantOK";
public const string RmiName_CG_RequestGuildDonationInfoOK="CG_RequestGuildDonationInfoOK";
public const string RmiName_CG_RequestGuildSkillInfoOK="CG_RequestGuildSkillInfoOK";
public const string RmiName_CG_RequestGuildSkillLevelUpOK="CG_RequestGuildSkillLevelUpOK";
public const string RmiName_CG_RequestGuildSkillUseOK="CG_RequestGuildSkillUseOK";
public const string RmiName_CG_RequestGuildSkillDisuseOK="CG_RequestGuildSkillDisuseOK";
public const string RmiName_CG_RequestGuildSkillUseInfoOK="CG_RequestGuildSkillUseInfoOK";
public const string RmiName_CG_RequestGuildMemberRankPointRewardOK="CG_RequestGuildMemberRankPointRewardOK";
public const string RmiName_CG_RequestGuildBattlePointRegisterOK="CG_RequestGuildBattlePointRegisterOK";
public const string RmiName_CG_RequestGuildBattlePointMemeberRankListOK="CG_RequestGuildBattlePointMemeberRankListOK";
public const string RmiName_CG_RequestGuildBattlePointGuildRankListOK="CG_RequestGuildBattlePointGuildRankListOK";
public const string RmiName_CG_RequestGuildBattlePointUserRankListOK="CG_RequestGuildBattlePointUserRankListOK";
public const string RmiName_CG_RequestAPRechargeByUseItemOK="CG_RequestAPRechargeByUseItemOK";
public const string RmiName_CG_RequestWeekStageKeyOpenOK="CG_RequestWeekStageKeyOpenOK";
public const string RmiName_CG_RequestFoodBuffAutoUseOnOffOK="CG_RequestFoodBuffAutoUseOnOffOK";
public const string RmiName_CG_RequestItemUseRankExpOK="CG_RequestItemUseRankExpOK";
public const string RmiName_CG_RequestItemUseBoxOpenOK="CG_RequestItemUseBoxOpenOK";
public const string RmiName_CG_RequestItemUseRecipeExpOK="CG_RequestItemUseRecipeExpOK";
public const string RmiName_CG_RequestItemUseWeeklyKeyBoxOK="CG_RequestItemUseWeeklyKeyBoxOK";
public const string RmiName_CG_RequestItemUseWeaponTicketOK="CG_RequestItemUseWeaponTicketOK";
public const string RmiName_CG_RequestItemUseMusicOK="CG_RequestItemUseMusicOK";
public const string RmiName_CG_RequestTutorialAddStepOK="CG_RequestTutorialAddStepOK";
public const string RmiName_CG_RequestTutorialSetFlagOK="CG_RequestTutorialSetFlagOK";
public const string RmiName_CG_RequestTutorialHeroFlagOK="CG_RequestTutorialHeroFlagOK";
public const string RmiName_CG_RequestTutorialGambleShopBuyOK="CG_RequestTutorialGambleShopBuyOK";
public const string RmiName_CG_RequestBattleTutorialInfoOK="CG_RequestBattleTutorialInfoOK";
public const string RmiName_CG_RequestBattleTutorialSetOK="CG_RequestBattleTutorialSetOK";
public const string RmiName_CG_RequestFriendlyMatchCreateOK="CG_RequestFriendlyMatchCreateOK";
public const string RmiName_CG_RequestFriendlyMatchFriendListOK="CG_RequestFriendlyMatchFriendListOK";
public const string RmiName_CG_RequestFriendlyMatchInviteOK="CG_RequestFriendlyMatchInviteOK";
public const string RmiName_CG_RequestFriendlyMatchReceivedInviteListOK="CG_RequestFriendlyMatchReceivedInviteListOK";
public const string RmiName_CG_RequestFriendlyMatchInviteAcceptOK="CG_RequestFriendlyMatchInviteAcceptOK";
public const string RmiName_CG_RequestFriendlyMatchInviteRejectOK="CG_RequestFriendlyMatchInviteRejectOK";
public const string RmiName_CG_RequestFriendlyMatchStartOK="CG_RequestFriendlyMatchStartOK";
public const string RmiName_CG_RequestFriendlyMatchBattleStartOK="CG_RequestFriendlyMatchBattleStartOK";
public const string RmiName_CG_RequestFriendlyMatchClearOK="CG_RequestFriendlyMatchClearOK";
public const string RmiName_CG_RequestFriendlyMatchExitOK="CG_RequestFriendlyMatchExitOK";
public const string RmiName_GC_NotifyFriendlyMatchInvite="GC_NotifyFriendlyMatchInvite";
public const string RmiName_CG_RequestFriendlyMatchSetInviteOptionOK="CG_RequestFriendlyMatchSetInviteOptionOK";
public const string RmiName_CG_RequestEventMissionGetAchievePointRewardOK="CG_RequestEventMissionGetAchievePointRewardOK";
public const string RmiName_CG_RequestEventMissionCompleteRewardOK="CG_RequestEventMissionCompleteRewardOK";
public const string RmiName_CG_RequestEventMissionInfoOk="CG_RequestEventMissionInfoOk";
public const string RmiName_CG_RequestLobbyHousingShopInfoOK="CG_RequestLobbyHousingShopInfoOK";
public const string RmiName_CG_RequestLobbyHousingShopBuyOK="CG_RequestLobbyHousingShopBuyOK";
public const string RmiName_CG_RequestLobbyFurnitureRegistOK="CG_RequestLobbyFurnitureRegistOK";
public const string RmiName_CG_RequestUserMusicEditOK="CG_RequestUserMusicEditOK";
public const string RmiName_CG_RequestEventSeasonPassInfoOK="CG_RequestEventSeasonPassInfoOK";
public const string RmiName_CG_RequestEventSeasonPassRankUpRewardOK="CG_RequestEventSeasonPassRankUpRewardOK";
public const string RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK="CG_RequestEventSeasonPassRankUpRewardAllOK";
public const string RmiName_CG_RequestEventSeasonPassRankBuyOK="CG_RequestEventSeasonPassRankBuyOK";
public const string RmiName_CG_RequestStepupGambleShopBuyOK="CG_RequestStepupGambleShopBuyOK";
public const string RmiName_CG_RequestStepupGambleMileageRewardOK="CG_RequestStepupGambleMileageRewardOK";
public const string RmiName_CG_RequestWestSideServerInfo_RandomOK="CG_RequestWestSideServerInfo_RandomOK";
public const string RmiName_CG_RequestWestSideServerInfo_FixedOK="CG_RequestWestSideServerInfo_FixedOK";
public const string RmiName_CG_RequestWestSideServerInfo_RecommandOK="CG_RequestWestSideServerInfo_RecommandOK";
public const string RmiName_CG_RequestWestSide_PlayerInfoOK="CG_RequestWestSide_PlayerInfoOK";
public const string RmiName_CG_RequestWestSide_PlayerteamInfoOK="CG_RequestWestSide_PlayerteamInfoOK";
public const string RmiName_CG_RequestWestSide_PlayerGuildInfoOK="CG_RequestWestSide_PlayerGuildInfoOK";
public const string RmiName_CG_RequestWorldChattingChannelOK="CG_RequestWorldChattingChannelOK";
public const string RmiName_CG_RequestArenaRealTimePvpLobbyInfoOK="CG_RequestArenaRealTimePvpLobbyInfoOK";
public const string RmiName_CG_RequestArenaRealTimePvpJoinOK="CG_RequestArenaRealTimePvpJoinOK";
public const string RmiName_CG_RequestArenaRealTimePvpTopRankerListOK="CG_RequestArenaRealTimePvpTopRankerListOK";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerListOK="CG_RequestArenaRealTimePvpLastRankerListOK";
public const string RmiName_CG_RequestArenaRealTimePvpMatchingOK="CG_RequestArenaRealTimePvpMatchingOK";
public const string RmiName_CG_RequestArenaRealTimePvpBattleStartOK="CG_RequestArenaRealTimePvpBattleStartOK";
public const string RmiName_CG_RequestArenaRealTimePvpBattleEndOK="CG_RequestArenaRealTimePvpBattleEndOK";
public const string RmiName_CG_RequestArenaRealTimePvpRollbackOK="CG_RequestArenaRealTimePvpRollbackOK";
public const string RmiName_CG_RequestArenaRealTimePvpIngameBattleStartOK="CG_RequestArenaRealTimePvpIngameBattleStartOK";
public const string RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfoOK="CG_RequestArenaRealTimePvpLowerLobbyInfoOK";
public const string RmiName_CG_RequestArenaRealTimePvpLowerJoinOK="CG_RequestArenaRealTimePvpLowerJoinOK";
public const string RmiName_CG_RequestArenaRealTimePvpLowerTopRankerListOK="CG_RequestArenaRealTimePvpLowerTopRankerListOK";
public const string RmiName_CG_RequestArenaRealTimePvpLowerMatchingOK="CG_RequestArenaRealTimePvpLowerMatchingOK";
public const string RmiName_CG_RequestArenaRealTimePvpLowerBattleStartOK="CG_RequestArenaRealTimePvpLowerBattleStartOK";
public const string RmiName_CG_RequestArenaRealTimePvpLowerBattleEndOK="CG_RequestArenaRealTimePvpLowerBattleEndOK";
public const string RmiName_CG_RequestArenaRealTimePvpAllInfoOK="CG_RequestArenaRealTimePvpAllInfoOK";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK="CG_RequestArenaRealTimePvpLastRankerBattleInfoOK";
public const string RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStartOK="CG_RequestArenaRealTimePvpLastRankerBattleStartOK";
public const string RmiName_CG_RequestArenaRealTimePvpLowerRollbackOK="CG_RequestArenaRealTimePvpLowerRollbackOK";
public const string RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK="CG_RequestArenaRealTimePvpLowerIngameBattleStartOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionLobbyInfoOK="CG_RequestArenaRealTimeDecisionLobbyInfoOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionJoinOK="CG_RequestArenaRealTimeDecisionJoinOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionTopRankerListOK="CG_RequestArenaRealTimeDecisionTopRankerListOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionMatchingOK="CG_RequestArenaRealTimeDecisionMatchingOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionBattleStartOK="CG_RequestArenaRealTimeDecisionBattleStartOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionBattleEndOK="CG_RequestArenaRealTimeDecisionBattleEndOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStartOK="CG_RequestArenaRealTimeDecisionIngameBattleStartOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionHistoryOK="CG_RequestArenaRealTimeDecisionHistoryOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingListOK="CG_RequestArenaRealTimeDecisionChangeMatchingListOK";
public const string RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK="CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK";
public const string RmiName_CG_RequestPvpSeasonInfoOK="CG_RequestPvpSeasonInfoOK";
public const string RmiName_CG_RequestPvpSeasonHistoryOK="CG_RequestPvpSeasonHistoryOK";
public const string RmiName_CG_RequestEventExchangeInfoOK="CG_RequestEventExchangeInfoOK";
public const string RmiName_CG_RequestEventExchangeBoxGachaInfoOK="CG_RequestEventExchangeBoxGachaInfoOK";
public const string RmiName_CG_RequestEventExchangeBoxGachaPickupOK="CG_RequestEventExchangeBoxGachaPickupOK";
public const string RmiName_CG_RequestEventExchangeBoxGachaResetOK="CG_RequestEventExchangeBoxGachaResetOK";
public const string RmiName_CG_RequestEventPaybackRewardOK="CG_RequestEventPaybackRewardOK";
public const string RmiName_CG_RequestBossWarCreateOK="CG_RequestBossWarCreateOK";
public const string RmiName_CG_RequestBossWarJoinOK="CG_RequestBossWarJoinOK";
public const string RmiName_CG_RequestBossWarStartOK="CG_RequestBossWarStartOK";
public const string RmiName_CG_RequestBossWarBattleStartOK="CG_RequestBossWarBattleStartOK";
public const string RmiName_CG_RequestBossWarBattleEndOK="CG_RequestBossWarBattleEndOK";
public const string RmiName_CG_RequestBossWarOnlineFriendListOK="CG_RequestBossWarOnlineFriendListOK";
public const string RmiName_CG_RequestBossWarOnlineGuildMemberListOK="CG_RequestBossWarOnlineGuildMemberListOK";
public const string RmiName_CG_RequestBossWarOnlineUserRankRangeListOK="CG_RequestBossWarOnlineUserRankRangeListOK";
public const string RmiName_CG_RequestBossWarInvitationReceiveListOK="CG_RequestBossWarInvitationReceiveListOK";
public const string RmiName_CG_RequestBossWarRemoveInvitationOK="CG_RequestBossWarRemoveInvitationOK";
public const string RmiName_CG_RequestBossWarInviteOK="CG_RequestBossWarInviteOK";
public const string RmiName_CG_RequestBossWarKickOutOK="CG_RequestBossWarKickOutOK";
public const string RmiName_CG_RequestBossWarRewardOK="CG_RequestBossWarRewardOK";
public const string RmiName_CG_RequestBossWarReadyOK="CG_RequestBossWarReadyOK";
public const string RmiName_CG_RequestBossWarReturnReadyOK="CG_RequestBossWarReturnReadyOK";
public const string RmiName_CG_RequestBossWarSyncOK="CG_RequestBossWarSyncOK";
public const string RmiName_CG_RequestBossWarBattleSyncOK="CG_RequestBossWarBattleSyncOK";
public const string RmiName_CG_RequestBossWarLeaveOK="CG_RequestBossWarLeaveOK";
public const string RmiName_GC_NotifyBossWarInvite="GC_NotifyBossWarInvite";
public const string RmiName_GC_NotifyBossWarMemberJoinUpdate="GC_NotifyBossWarMemberJoinUpdate";
public const string RmiName_GC_NotifyBossWarGameStart="GC_NotifyBossWarGameStart";
public const string RmiName_GC_NotifyBossWarWaitReadyStartOK="GC_NotifyBossWarWaitReadyStartOK";
public const string RmiName_GC_NotifyBossWarRewardAggregationOK="GC_NotifyBossWarRewardAggregationOK";
public const string RmiName_CG_RequestEventSnsShareProgressOK="CG_RequestEventSnsShareProgressOK";
public const string RmiName_CG_RequestEventSnsShareRewardOK="CG_RequestEventSnsShareRewardOK";
public const string RmiName_CG_RequestGagueEventInfoOK="CG_RequestGagueEventInfoOK";
public const string RmiName_CG_RequestGagueEventChargeOK="CG_RequestGagueEventChargeOK";
public const string RmiName_CG_RequestGagueEventRewardOK="CG_RequestGagueEventRewardOK";
public const string RmiName_CG_RequestGagueEventResetOK="CG_RequestGagueEventResetOK";
public const string RmiName_CG_RequestEventLadderRewardOK="CG_RequestEventLadderRewardOK";
public const string RmiName_CG_RequestEventLobbyGiftRewardOK="CG_RequestEventLobbyGiftRewardOK";
public const string RmiName_CG_RequestEventTimeMissionInfoOK="CG_RequestEventTimeMissionInfoOK";
public const string RmiName_CG_RequestEventTimeMissionStartOK="CG_RequestEventTimeMissionStartOK";
public const string RmiName_CG_RequestEventLobbyDecorationRewardOK="CG_RequestEventLobbyDecorationRewardOK";
public const string RmiName_CG_RequestRegistPlayTitleOK="CG_RequestRegistPlayTitleOK";
public const string RmiName_CG_RequestPlayTitleMissionRewardOK="CG_RequestPlayTitleMissionRewardOK";
public const string RmiName_CG_RequestTournamentListOK="CG_RequestTournamentListOK";
public const string RmiName_CG_RequestTournamentProgressInfoOK="CG_RequestTournamentProgressInfoOK";
public const string RmiName_CG_RequestTournamentResultInfoOK="CG_RequestTournamentResultInfoOK";
public const string RmiName_CG_RequestTournamentMatchJoinOK="CG_RequestTournamentMatchJoinOK";
public const string RmiName_CG_RequestTournamentMatchBattleStartOK="CG_RequestTournamentMatchBattleStartOK";
public const string RmiName_CG_RequestTournamentMatchBattleEndOK="CG_RequestTournamentMatchBattleEndOK";
public const string RmiName_CG_RequestTournamentMatchExitOK="CG_RequestTournamentMatchExitOK";
public const string RmiName_GC_NotifyTournamentProgressChange="GC_NotifyTournamentProgressChange";
public const string RmiName_CG_RequestTournamentRewardOK="CG_RequestTournamentRewardOK";
public const string RmiName_GC_NotifyTournamentMatchSuspend="GC_NotifyTournamentMatchSuspend";
public const string RmiName_CG_RequestTournamentPlayerTeamSlotChangeOK="CG_RequestTournamentPlayerTeamSlotChangeOK";
public const string RmiName_CG_RequestTournamentPlayerTeamInfoOK="CG_RequestTournamentPlayerTeamInfoOK";
public const string RmiName_CG_RequestTournamentCheerOK="CG_RequestTournamentCheerOK";
public const string RmiName_CG_RequestTournamentCheerListOK="CG_RequestTournamentCheerListOK";
public const string RmiName_CG_RequestTournamentWatcherJoinOK="CG_RequestTournamentWatcherJoinOK";
public const string RmiName_CG_RequestTournamentWatcherExitOK="CG_RequestTournamentWatcherExitOK";
public const string RmiName_CG_RequestTournamentMatchPlayInfoOK="CG_RequestTournamentMatchPlayInfoOK";
public const string RmiName_CG_RequestTournamentReplayInfoOK="CG_RequestTournamentReplayInfoOK";
public const string RmiName_CG_RequestGuildWarLobbyInfoOK="CG_RequestGuildWarLobbyInfoOK";
public const string RmiName_CG_RequestGuildWarRankInfoOK="CG_RequestGuildWarRankInfoOK";
public const string RmiName_CG_RequestGuildWarVersusRecordInfoOK="CG_RequestGuildWarVersusRecordInfoOK";
public const string RmiName_CG_RequestGuildWarGuildMemberListOK="CG_RequestGuildWarGuildMemberListOK";
public const string RmiName_CG_RequestGuildWarWorldMapInfoOK="CG_RequestGuildWarWorldMapInfoOK";
public const string RmiName_CG_RequestGuildWarAttackSquadChangeOK="CG_RequestGuildWarAttackSquadChangeOK";
public const string RmiName_CG_RequestGuildWarDefenceTeamChangeOK="CG_RequestGuildWarDefenceTeamChangeOK";
public const string RmiName_CG_RequestGuildWarRegionBonusScoreChangeOK="CG_RequestGuildWarRegionBonusScoreChangeOK";
public const string RmiName_CG_RequestGuildWarAreaGuildMemberChangeOK="CG_RequestGuildWarAreaGuildMemberChangeOK";
public const string RmiName_CG_RequestGuildWarBattleRecordInfoOK="CG_RequestGuildWarBattleRecordInfoOK";
public const string RmiName_CG_Request_GuildWar_Stage_StartOK="CG_Request_GuildWar_Stage_StartOK";
public const string RmiName_CG_Request_GuildWar_Stage_ClearOK="CG_Request_GuildWar_Stage_ClearOK";
public const string RmiName_CG_Request_GuildWar_Stage_RejoinOK="CG_Request_GuildWar_Stage_RejoinOK";
public const string RmiName_CG_Request_GuildWar_Stage_HeroStatus_SyncOK="CG_Request_GuildWar_Stage_HeroStatus_SyncOK";
       
public const string RmiName_First = RmiName_CG_CommonCancel;
#else
        // RMI name declaration.
        // It is the unique pointer that indicates RMI name such as RMI profiler.
        public const string RmiName_CG_CommonCancel = "";
        public const string RmiName_GC_NotifyUserLevelUp = "";
        public const string RmiName_CG_FrozenAssetCancel = "";
        public const string RmiName_CG_RequestChannelUserInfoOK = "";
        public const string RmiName_CG_RequestHeartBeatOK = "";
        public const string RmiName_CG_RequestChangeNicknameOK = "";
        public const string RmiName_CG_RequestChangeWantToSayOK = "";
        public const string RmiName_CG_RequestStageInfoOK = "";
        public const string RmiName_CG_RequestTeamInfoOK = "";
        public const string RmiName_CG_RequestTeamSlotChangeOK = "";
        public const string RmiName_CG_RequestTeamNameChangeOK = "";
        public const string RmiName_CG_RequestLobbyInfoOK = "";
        public const string RmiName_CG_RequestBasePointInfoOK = "";
        public const string RmiName_CG_RequestMercenaryListOK = "";
        public const string RmiName_CG_RequestMercenaryInfoOK = "";
        public const string RmiName_CG_RequestGuildInfoOK = "";
        public const string RmiName_CG_RequestChatStampUpdateBookmarkOK = "";
        public const string RmiName_CG_RequestChatStampUpdateQuickMessageOK = "";
        public const string RmiName_CG_RequestMainSkinChangeOK = "";
        public const string RmiName_CG_RequestEventListOK = "";
        public const string RmiName_CG_RequestCheatEnterOK = "";
        public const string RmiName_CG_RequestCheatStageClearOK = "";
        public const string RmiName_CG_RequestDllGetItemOK = "";
        public const string RmiName_CG_RequestRecommendFriendUSNListOK = "";
        public const string RmiName_CG_RequestDailyResetOK = "";
        public const string RmiName_CG_NotifyMaintenance = "";
        public const string RmiName_CG_RequestFrozenAssetRedeemOK = "";
        public const string RmiName_CG_RequestSecurityTokenOK = "";
        public const string RmiName_CG_RequestNetmarbleAuthOK = "";
        public const string RmiName_CG_RequestAuthenticateCreateOK = "";
        public const string RmiName_CG_RequestEditorUserInfoByNickNameOK = "";
        public const string RmiName_CG_RequestLoginOK = "";
        public const string RmiName_CG_RequestLoginInstantlyOK = "";
        public const string RmiName_CG_RequestForceLogoutOK = "";
        public const string RmiName_CG_RetryRequestOK = "";
        public const string RmiName_CG_RequestBillingInitializeOK = "";
        public const string RmiName_CG_RequestBillingVerifyPUOK = "";
        public const string RmiName_CG_RequestBillingRemainTROK = "";
        public const string RmiName_CG_RequestBillingCouponVerifyOK = "";
        public const string RmiName_CG_RequestBillingCrossPromotionOK = "";
        public const string RmiName_CG_RequestBillingPackageShopOK = "";
        public const string RmiName_CG_RequestAgeInputOK = "";
        public const string RmiName_CG_Notify_WolverineOK = "";
        public const string RmiName_CG_RequestSDKInfoChangeOK = "";
        public const string RmiName_CG_RequestSkinLevelUpBySkinMaterialOK = "";
        public const string RmiName_CG_RequestSkinResearchOK = "";
        public const string RmiName_CG_RequestSkinResearchInitOK = "";
        public const string RmiName_CG_RequestSkinMaterialGrindOK = "";
        public const string RmiName_CG_RequestSkinAwakenOK = "";
        public const string RmiName_CG_RequestSkinHeadStyleChangeOK = "";
        public const string RmiName_CG_RequestSkinEvolutionOK = "";
        public const string RmiName_CG_RequestSkinSkillLevelUpOK = "";
        public const string RmiName_CG_RequestSkinGiveFellowshipExpOK = "";
        public const string RmiName_CG_RequestSkinFellowshipLevelUpRewardOK = "";
        public const string RmiName_CG_RequestCostumeEquipOK = "";
        public const string RmiName_CG_RequestCostumeUnEquipOK = "";
        public const string RmiName_CG_RequestCostumeUnLockOK = "";
        public const string RmiName_CG_RequestSkinOverEvolutionOK = "";
        public const string RmiName_CG_RequestSkinMaxAwakenRewardOK = "";
        public const string RmiName_CG_RequestCostumeRegisterOK = "";
        public const string RmiName_CG_RequestSkinLoveRewardOK = "";
        public const string RmiName_CG_RequestCostumeAutoRegisterOK = "";
        public const string RmiName_CG_RequestStoryCostumeOK = "";
        public const string RmiName_CG_RequestCostumeLevelUpOK = "";
        public const string RmiName_CG_RequestSkinMaxAwakenOK = "";
        public const string RmiName_CG_RequestWeaponEquipOK = "";
        public const string RmiName_CG_RequestWeaponUnEquipOK = "";
        public const string RmiName_CG_RequestWeaponSellOK = "";
        public const string RmiName_CG_RequestWeaponGrindOK = "";
        public const string RmiName_CG_RequestWeaponUpgradeOK = "";
        public const string RmiName_CG_RequestWeaponUpgradeRetryOK = "";
        public const string RmiName_CG_RequestWeaponEvolutionOK = "";
        public const string RmiName_CG_RequestWeaponEvolutionRetryOK = "";
        public const string RmiName_CG_RequestWeaponOptionEnhanceOK = "";
        public const string RmiName_CG_RequestWeaponLockOK = "";
        public const string RmiName_CG_RequestWeaponUnLockOK = "";
        public const string RmiName_CG_RequestWeaponEquipExchangeOK = "";
        public const string RmiName_CG_RequestWeaponEquipExchangeAllOK = "";
        public const string RmiName_CG_RequestWeaponEquipRecommandOK = "";
        public const string RmiName_CG_RequestWeaponCarveOK = "";
        public const string RmiName_CG_RequestWeaponCarveRemoveOK = "";
        public const string RmiName_CG_RequestStageRejoinOK = "";
        public const string RmiName_CG_Request_Main_Stage_StartOK = "";
        public const string RmiName_CG_Request_Main_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Main_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_Free_Stage_StartOK = "";
        public const string RmiName_CG_Request_Free_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Free_Stage_ContinueOK = "";
        public const string RmiName_CG_RequestHawkRunStageStartOK = "";
        public const string RmiName_CG_RequestHawkRunStageClearOK = "";
        public const string RmiName_CG_RequestEventStageClearOK = "";
        public const string RmiName_CG_Request_Quest_Stage_StartOK = "";
        public const string RmiName_CG_Request_Quest_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Quest_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_Week_Stage_StartOK = "";
        public const string RmiName_CG_Request_Week_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Week_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_Boss_Stage_StartOK = "";
        public const string RmiName_CG_Request_Boss_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Boss_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_Memorial_Stage_StartOK = "";
        public const string RmiName_CG_Request_Memorial_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Memorial_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_Limited_Stage_StartOK = "";
        public const string RmiName_CG_Request_Limited_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Limited_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_Main_ExtraStage_StartOK = "";
        public const string RmiName_CG_Request_Main_ExtraStage_ClearOK = "";
        public const string RmiName_CG_Request_Main_ExtraStage_ContinueOK = "";
        public const string RmiName_CG_Request_Boss_ExtraStage_StartOK = "";
        public const string RmiName_CG_Request_Boss_ExtraStage_ClearOK = "";
        public const string RmiName_CG_Request_Boss_ExtraStage_ContinueOK = "";
        public const string RmiName_CG_RequestRewardStageClearOK = "";
        public const string RmiName_CG_Request_AnotherMain_Stage_StartOK = "";
        public const string RmiName_CG_Request_AnotherMain_Stage_ClearOK = "";
        public const string RmiName_CG_Request_AnotherMain_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_Reverse_Stage_StartOK = "";
        public const string RmiName_CG_Request_Reverse_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Reverse_Star_RewardOK = "";
        public const string RmiName_CG_Request_Reverse_Group_RewardOK = "";
        public const string RmiName_CG_Request_Main_EventAreaStage_StartOK = "";
        public const string RmiName_CG_Request_Main_EventAreaStage_ClearOK = "";
        public const string RmiName_CG_Request_Main_EventAreaStage_ContinueOK = "";
        public const string RmiName_CG_Request_Free_EventAreaStage_StartOK = "";
        public const string RmiName_CG_Request_Free_EventAreaStage_ClearOK = "";
        public const string RmiName_CG_Request_Free_EventAreaStage_ContinueOK = "";
        public const string RmiName_CG_RequestEventAreaRewardStageClearOK = "";
        public const string RmiName_CG_Request_Free_EventStage_StartOK = "";
        public const string RmiName_CG_Request_Free_EventStage_ClearOK = "";
        public const string RmiName_CG_Request_Free_EventStage_ContinueOK = "";
        public const string RmiName_CG_RequestEventExchangeOK = "";
        public const string RmiName_CG_RequestEventPlayCountRewardOK = "";
        public const string RmiName_CG_Request_Main_ListEventStage_StartOK = "";
        public const string RmiName_CG_Request_Main_ListEventStage_ClearOK = "";
        public const string RmiName_CG_Request_Main_ListEventStage_ContinueOK = "";
        public const string RmiName_CG_Request_Free_ListEventStage_StartOK = "";
        public const string RmiName_CG_Request_Free_ListEventStage_ClearOK = "";
        public const string RmiName_CG_Request_Free_ListEventStage_ContinueOK = "";
        public const string RmiName_CG_Request_Main_FinalBossStage_StartOK = "";
        public const string RmiName_CG_Request_Main_FinalBossStage_ClearOK = "";
        public const string RmiName_CG_Request_Main_FinalBossStage_ContinueOK = "";
        public const string RmiName_CG_Request_FinalBoss_EventFreeStage_StartOK = "";
        public const string RmiName_CG_Request_FinalBoss_EventFreeStage_ClearOK = "";
        public const string RmiName_CG_Request_FinalBoss_EventFreeStage_ContinueOK = "";
        public const string RmiName_CG_Request_Limited_EventStage_StartOK = "";
        public const string RmiName_CG_Request_Limited_EventStage_ClearOK = "";
        public const string RmiName_CG_Request_Limited_EventStage_ContinueOK = "";
        public const string RmiName_CG_Request_Boss_EventStage_StartOK = "";
        public const string RmiName_CG_Request_Boss_EventStage_ClearOK = "";
        public const string RmiName_CG_Request_Boss_EventStage_ContinueOK = "";
        public const string RmiName_CG_Request_Monthly_EventStage_StartOK = "";
        public const string RmiName_CG_Request_Monthly_EventStage_ClearOK = "";
        public const string RmiName_CG_Request_Monthly_EventStage_ContinueOK = "";
        public const string RmiName_CG_RequestMonthlyStagePointRewardOK = "";
        public const string RmiName_CG_Request_ChallengeBoss_EventStage_StartOK = "";
        public const string RmiName_CG_Request_ChallengeBoss_EventStage_ClearOK = "";
        public const string RmiName_CG_Request_ChallengeBoss_EventStage_ContinueOK = "";
        public const string RmiName_CG_Request_ChallengeBoss_EventStage_InfoOK = "";
        public const string RmiName_CG_Request_ChallengeBoss_Event_Point_RewardOK = "";
        public const string RmiName_CG_Request_Training_Stage_InfoOK = "";
        public const string RmiName_CG_Request_Training_Stage_StartOK = "";
        public const string RmiName_CG_Request_Training_Stage_ClearOK = "";
        public const string RmiName_CG_Request_Training_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_Training_Stage_OpenOK = "";
        public const string RmiName_CG_Request_Training_Stage_RefreshOK = "";
        public const string RmiName_CG_RequestWeekStageGaugeRewardOK = "";
        public const string RmiName_CG_RequestIngameBattleStartOK = "";
        public const string RmiName_CG_RequestStageEndLogOK = "";
        public const string RmiName_CG_Request_SingleSiege_ExtraStage_StartOK = "";
        public const string RmiName_CG_Request_SingleSiege_ExtraStage_ClearOK = "";
        public const string RmiName_CG_Request_SingleSiege_ExtraStage_ContinueOK = "";
        public const string RmiName_CG_Request_FinalBoss_Stage_StartOK = "";
        public const string RmiName_CG_Request_FinalBoss_Stage_ClearOK = "";
        public const string RmiName_CG_Request_FinalBoss_Stage_ContinueOK = "";
        public const string RmiName_CG_Request_FinalBoss_Season_InfoOK = "";
        public const string RmiName_CG_Request_FinalBoss_Season_Rank_InfoOK = "";
        public const string RmiName_CG_Request_GuildBoss_Stage_StartOK = "";
        public const string RmiName_CG_Request_GuildBoss_Stage_ClearOK = "";
        public const string RmiName_CG_Request_GuildBoss_Lobby_InfoOK = "";
        public const string RmiName_CG_Request_GuildBoss_Rank_InfoOK = "";
        public const string RmiName_CG_Request_GuildBoss_LastWeek_Rank_InfoOK = "";
        public const string RmiName_CG_Request_GuildBoss_Time_RefreshOK = "";
        public const string RmiName_CG_RequestMailListOK = "";
        public const string RmiName_CG_RequestMailConfirmOK = "";
        public const string RmiName_CG_RequestMailConfirmAllOK = "";
        public const string RmiName_CG_RequestMailHistoryListOK = "";
        public const string RmiName_CG_RequestMailRecentlyHistoryListOK = "";
        public const string RmiName_CG_RequestFriendMailListOK = "";
        public const string RmiName_CG_RequestFriendMailConfirmOK = "";
        public const string RmiName_CG_RequestFriendMailConfirmAllOK = "";
        public const string RmiName_CG_RequestNoticeMailRewardOK = "";
        public const string RmiName_CG_RequestPackageMailListOK = "";
        public const string RmiName_CG_RequestPackageMailGetOK = "";
        public const string RmiName_CG_RequestPackageMailHistoryListOK = "";
        public const string RmiName_CG_RequestLevelUpPackageRewardOK = "";
        public const string RmiName_CG_RequestLevelUpPackageRewardAllOK = "";
        public const string RmiName_CG_RequestAttendancePackageRewardOK = "";
        public const string RmiName_CG_RequestAttendancePackageRewardAllOK = "";
        public const string RmiName_CG_RequestMailADRewardOK = "";
        public const string RmiName_CG_RequestItemInventoryBuyOK = "";
        public const string RmiName_CG_RequestWeaponInventoryBuyOK = "";
        public const string RmiName_CG_RequestWeekStageKeyBuyOK = "";
        public const string RmiName_CG_RequestDiaShopInfoOK = "";
        public const string RmiName_CG_RequestDiaShopBuyOK = "";
        public const string RmiName_CG_RequestGambleShopBuyOK = "";
        public const string RmiName_CG_RequestItemGambleShopInfoOK = "";
        public const string RmiName_CG_RequestItemGambleShopBuyOK = "";
        public const string RmiName_CG_RequestRandomShopBuyOK = "";
        public const string RmiName_CG_RequestRandomShopRefreshOK = "";
        public const string RmiName_CG_RequestRandomShopInfoOK = "";
        public const string RmiName_CG_RequestBasePointShopInfoOK = "";
        public const string RmiName_CG_RequestBasePointShopBuyOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpShopInfoOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpShopBuyOK = "";
        public const string RmiName_CG_RequestCoinShopInfoOK = "";
        public const string RmiName_CG_RequestCoinShopBuyOK = "";
        public const string RmiName_CG_RequestCoinShopDailyBuyOK = "";
        public const string RmiName_CG_RequestCostumeShopInfoOK = "";
        public const string RmiName_CG_RequestCostumeShopBuyOK = "";
        public const string RmiName_CG_RequestFriendPointShopInfoOK = "";
        public const string RmiName_CG_RequestFriendPointShopBuyOK = "";
        public const string RmiName_CG_RequestCommonItemSellOK = "";
        public const string RmiName_CG_RequestCommonItemRemoveOK = "";
        public const string RmiName_CG_RequestPackageShopInfoOK = "";
        public const string RmiName_CG_RequestGambleShopInfoOK = "";
        public const string RmiName_CG_RequestADRouletteRewardOK = "";
        public const string RmiName_CG_RequestRandomShopVisitRewardOK = "";
        public const string RmiName_CG_RequestRandomShopScheduleInfoOK = "";
        public const string RmiName_CG_RequestPackageBuyOK = "";
        public const string RmiName_CG_RequestBuyDiaOK = "";
        public const string RmiName_CG_RequestBuyGoldOK = "";
        public const string RmiName_CG_RequestBuyStaminaOK = "";
        public const string RmiName_CG_RequestGuildShopInfoOK = "";
        public const string RmiName_CG_RequestGuildShopBuyOK = "";
        public const string RmiName_CG_RequestBasePointShopResetOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpShopResetOK = "";
        public const string RmiName_CG_RequestCostumeShopPackageBuyOK = "";
        public const string RmiName_CG_RequestFinalBossShopInfoOK = "";
        public const string RmiName_CG_RequestFinalBossShopBuyOK = "";
        public const string RmiName_CG_RequestEventCollaborationCoinShopInfoOK = "";
        public const string RmiName_CG_RequestEventCollaborationCoinShopBuyOK = "";
        public const string RmiName_CG_RequestGuildShopResetOK = "";
        public const string RmiName_CG_RequestCoinShopOnceBuyOK = "";
        public const string RmiName_CG_RequestBingoGambleShopInfoOK = "";
        public const string RmiName_CG_RequestBingoGambleShopResetOK = "";
        public const string RmiName_CG_RequestBingoGambleShopRewardOK = "";
        public const string RmiName_CG_RequestDiaShopPackageBuyOK = "";
        public const string RmiName_CG_RequestGambleChoiceShopBuyOK = "";
        public const string RmiName_CG_RequestFreePackageRewardOK = "";
        public const string RmiName_CG_RequestPackageMissionCloseOK = "";
        public const string RmiName_CG_RequestMissionProgressOK = "";
        public const string RmiName_CG_RequestMissionClearOK = "";
        public const string RmiName_CG_RequestMissionEventClearOK = "";
        public const string RmiName_CG_RequestMissionGetAchievePointRewardOK = "";
        public const string RmiName_CG_RequestQuestStartOK = "";
        public const string RmiName_CG_RequestQuestProgressOK = "";
        public const string RmiName_CG_RequestQuestClearOK = "";
        public const string RmiName_CG_RequestQuestRemoveOK = "";
        public const string RmiName_CG_RequestNetmarbleQuestAchieveOK = "";
        public const string RmiName_CG_RequestNetmarbleQuestRewardOK = "";
        public const string RmiName_CG_RequestDirectSelectorRewardOK = "";
        public const string RmiName_CG_RequestQuestChapterClearOK = "";
        public const string RmiName_CG_RequestEventQuestClearOK = "";
        public const string RmiName_CG_RequestAnotherQuestClearOK = "";
        public const string RmiName_CG_RequestQuestGuideListAllClearRewardOK = "";
        public const string RmiName_CG_RequestLobbyVRSearchOK = "";
        public const string RmiName_CG_RequestLobbyVRHelbramOK = "";
        public const string RmiName_CG_RequestLobbyNpcSkinOK = "";
        public const string RmiName_CG_RequestLobbyNpcGiftOK = "";
        public const string RmiName_CG_RequestLobbyKingAmberOK = "";
        public const string RmiName_CG_RequestLobbyDropInteractiveOpenOK = "";
        public const string RmiName_CG_RequestLobbyUniqueInteractiveOpenOK = "";
        public const string RmiName_CG_RequestLobbyNpcTalkInfoOK = "";
        public const string RmiName_CG_RequestLobbyNpcTalkChoiceOK = "";
        public const string RmiName_CG_RequestLobbyBarrelOK = "";
        public const string RmiName_CG_RequestLobbyBarrelRefillOK = "";
        public const string RmiName_CG_RequestLobbyCleanTableOK = "";
        public const string RmiName_CG_RequestLobbyServeBeerOK = "";
        public const string RmiName_CG_RequestLobbyPlayJukeboxOK = "";
        public const string RmiName_CG_RequestLobbyElizabethTouchOK = "";
        public const string RmiName_CG_RequestLobbyHawkAngerOK = "";
        public const string RmiName_CG_RequestAttendanceRewardOK = "";
        public const string RmiName_CG_RequestAttendanceEventRewardOK = "";
        public const string RmiName_CG_RequestCookingStartOK = "";
        public const string RmiName_CG_RequestRecipeActiveOK = "";
        public const string RmiName_CG_RequestCookingRecipeOrderInfoOK = "";
        public const string RmiName_CG_RequestCookingRecipeOrderOK = "";
        public const string RmiName_CG_RequestCookingRecipeDisorderOK = "";
        public const string RmiName_CG_RequestCookingRecipeCollectOK = "";
        public const string RmiName_CG_RequestCookingRecipeCollectOneSlotOK = "";
        public const string RmiName_CG_RequestCookingUseCookingBuffOK = "";
        public const string RmiName_CG_RequestGuestInfoOK = "";
        public const string RmiName_CG_RequestGuestChangeOK = "";
        public const string RmiName_CG_RequestGuestChangeTargetOK = "";
        public const string RmiName_CG_RequestGuestTalkOK = "";
        public const string RmiName_CG_RequestGuestGiftOK = "";
        public const string RmiName_CG_RequestBirthdayNpcInfoOK = "";
        public const string RmiName_CG_RequestRestRewardOK = "";
        public const string RmiName_CG_RequestAttendanceFortuneEventRewardOK = "";
        public const string RmiName_CG_RequestBasePointGoldDonationOK = "";
        public const string RmiName_CG_RequestBasePointSetTriggerOK = "";
        public const string RmiName_CG_RequestBasePointDropInteractiveOpenOK = "";
        public const string RmiName_CG_RequestBasePointUniqueInteractiveOpenOK = "";
        public const string RmiName_CG_RequestBasePointDailyRewardOK = "";
        public const string RmiName_CG_RequestBasePointDonationEventRewardOK = "";
        public const string RmiName_CG_RequestBasePointDonationInfoOK = "";
        public const string RmiName_CG_RequestBasePointEventGoldDonationOK = "";
        public const string RmiName_CG_RequestEventBasepointInfoOK = "";
        public const string RmiName_GC_NotifyDestroyInvite = "";
        public const string RmiName_CG_RequestDestroySetInviteOptionOK = "";
        public const string RmiName_CG_RequestDestroyGetUserLoginListOK = "";
        public const string RmiName_CG_RequestDestroyGetFriendLoginListOK = "";
        public const string RmiName_CG_RequestDestroyGetGuildLoginListOK = "";
        public const string RmiName_CG_RequestDestroyGetReceivedInvitationListOK = "";
        public const string RmiName_CG_RequestDestroyInviteOK = "";
        public const string RmiName_CG_RequestDestroyRemoveInvitationOK = "";
        public const string RmiName_CG_RequestDestroyRemoveJoinInfoOK = "";
        public const string RmiName_CG_RequestDestroyCreateOK = "";
        public const string RmiName_CG_RequestDestroyStartOK = "";
        public const string RmiName_CG_RequestDestroyBattleStartOK = "";
        public const string RmiName_CG_RequestDestroyJoinOK = "";
        public const string RmiName_CG_RequestDestroyClearOK = "";
        public const string RmiName_CG_RequestDestroyReJoinOK = "";
        public const string RmiName_CG_RequestDestroyRemoveOK = "";
        public const string RmiName_CG_RequestDestroyBattleEndOK = "";
        public const string RmiName_CG_RequestDestroyInviteAIOK = "";
        public const string RmiName_CG_RequestDestroyKickOutAIOK = "";
        public const string RmiName_CG_RequestEventDestroyCreateOK = "";
        public const string RmiName_CG_RequestEventDestroyClearOK = "";
        public const string RmiName_CG_RequestEventDestroyStartOK = "";
        public const string RmiName_CG_RequestEventDestroyRemoveOK = "";
        public const string RmiName_CG_RequestEventChallengeDestroyCreateOK = "";
        public const string RmiName_CG_RequestEventChallengeDestroyStartOK = "";
        public const string RmiName_CG_RequestEventChallengeDestroyClearOK = "";
        public const string RmiName_CG_RequestEventChallengeDestroyPointRefreshOK = "";
        public const string RmiName_CG_RequestEventChallengeDestroyUserRewardOK = "";
        public const string RmiName_CG_RequestEventChallengeDestroyWorldRewardOK = "";
        public const string RmiName_CG_RequestFriendListOK = "";
        public const string RmiName_CG_RequestFriendGuildInfoOK = "";
        public const string RmiName_CG_RequestFriendApplySendListOK = "";
        public const string RmiName_CG_RequestFriendApplyReceiveListOK = "";
        public const string RmiName_CG_RequestFriendApplySendOK = "";
        public const string RmiName_CG_RequestFriendApplyRejectOK = "";
        public const string RmiName_CG_RequestFriendApplyReceiveAcceptOK = "";
        public const string RmiName_CG_RequestFriendApplyReceiveAcceptListOK = "";
        public const string RmiName_CG_RequestFriendApplyReceiveRefuseOK = "";
        public const string RmiName_CG_RequestFriendApplyReceiveRefuseListOK = "";
        public const string RmiName_CG_RequestFriendRemoveOK = "";
        public const string RmiName_CG_RequestFriendSearchOK = "";
        public const string RmiName_CG_RequestFriendVisitOK = "";
        public const string RmiName_CG_RequestFriendPointSendOK = "";
        public const string RmiName_CG_RequestFriendPointSendAllOK = "";
        public const string RmiName_CG_RequestFriendLobbyInfoOK = "";
        public const string RmiName_CG_RequestFriendCookingRecipeInfoOK = "";
        public const string RmiName_CG_RequestFriendCookingEatOK = "";
        public const string RmiName_CG_RequestFriendCookingEatFriendListOK = "";
        public const string RmiName_CG_RequestGuildRecommendListOK = "";
        public const string RmiName_CG_RequestGuildInfoWithMemberListOK = "";
        public const string RmiName_CG_RequestGuildSearchByNameOK = "";
        public const string RmiName_CG_RequestGuildCreateOK = "";
        public const string RmiName_CG_RequestGuildDisbandOK = "";
        public const string RmiName_CG_RequestGuildApplicantListOK = "";
        public const string RmiName_CG_RequestGuildApplyOK = "";
        public const string RmiName_CG_RequestGuildReturnApplicationOK = "";
        public const string RmiName_CG_RequestGuildAcceptApplicantOK = "";
        public const string RmiName_CG_RequestGuildRejectApplicantOK = "";
        public const string RmiName_CG_RequestGuildLevelUpOK = "";
        public const string RmiName_CG_RequestGuildChangeNameOK = "";
        public const string RmiName_CG_RequestGuildChangeBoardOK = "";
        public const string RmiName_CG_RequestGuildChangeMasterOK = "";
        public const string RmiName_CG_RequestGuildChangeMemberGradeOK = "";
        public const string RmiName_CG_RequestGuildKickOutMemberOK = "";
        public const string RmiName_CG_RequestGuildLeaveOK = "";
        public const string RmiName_CG_RequestGuildRoomInfoOK = "";
        public const string RmiName_CG_RequestGuildAttendanceOK = "";
        public const string RmiName_CG_RequestGuildAttendanceRewardOK = "";
        public const string RmiName_CG_RequestGuildUserInfoOK = "";
        public const string RmiName_CG_RequestGuildAttendanceStatusOK = "";
        public const string RmiName_GC_NotifyGuildKickout = "";
        public const string RmiName_CG_RequestGuildDonationOK = "";
        public const string RmiName_CG_RequestGuildDonationInitializeOK = "";
        public const string RmiName_CG_RequestGuildMissionInfoOK = "";
        public const string RmiName_CG_RequestGuildMissionRewardOK = "";
        public const string RmiName_GC_NotifyGuildAcceptApplicantOK = "";
        public const string RmiName_CG_RequestGuildDonationInfoOK = "";
        public const string RmiName_CG_RequestGuildSkillInfoOK = "";
        public const string RmiName_CG_RequestGuildSkillLevelUpOK = "";
        public const string RmiName_CG_RequestGuildSkillUseOK = "";
        public const string RmiName_CG_RequestGuildSkillDisuseOK = "";
        public const string RmiName_CG_RequestGuildSkillUseInfoOK = "";
        public const string RmiName_CG_RequestGuildMemberRankPointRewardOK = "";
        public const string RmiName_CG_RequestGuildBattlePointRegisterOK = "";
        public const string RmiName_CG_RequestGuildBattlePointMemeberRankListOK = "";
        public const string RmiName_CG_RequestGuildBattlePointGuildRankListOK = "";
        public const string RmiName_CG_RequestGuildBattlePointUserRankListOK = "";
        public const string RmiName_CG_RequestAPRechargeByUseItemOK = "";
        public const string RmiName_CG_RequestWeekStageKeyOpenOK = "";
        public const string RmiName_CG_RequestFoodBuffAutoUseOnOffOK = "";
        public const string RmiName_CG_RequestItemUseRankExpOK = "";
        public const string RmiName_CG_RequestItemUseBoxOpenOK = "";
        public const string RmiName_CG_RequestItemUseRecipeExpOK = "";
        public const string RmiName_CG_RequestItemUseWeeklyKeyBoxOK = "";
        public const string RmiName_CG_RequestItemUseWeaponTicketOK = "";
        public const string RmiName_CG_RequestItemUseMusicOK = "";
        public const string RmiName_CG_RequestTutorialAddStepOK = "";
        public const string RmiName_CG_RequestTutorialSetFlagOK = "";
        public const string RmiName_CG_RequestTutorialHeroFlagOK = "";
        public const string RmiName_CG_RequestTutorialGambleShopBuyOK = "";
        public const string RmiName_CG_RequestBattleTutorialInfoOK = "";
        public const string RmiName_CG_RequestBattleTutorialSetOK = "";
        public const string RmiName_CG_RequestFriendlyMatchCreateOK = "";
        public const string RmiName_CG_RequestFriendlyMatchFriendListOK = "";
        public const string RmiName_CG_RequestFriendlyMatchInviteOK = "";
        public const string RmiName_CG_RequestFriendlyMatchReceivedInviteListOK = "";
        public const string RmiName_CG_RequestFriendlyMatchInviteAcceptOK = "";
        public const string RmiName_CG_RequestFriendlyMatchInviteRejectOK = "";
        public const string RmiName_CG_RequestFriendlyMatchStartOK = "";
        public const string RmiName_CG_RequestFriendlyMatchBattleStartOK = "";
        public const string RmiName_CG_RequestFriendlyMatchClearOK = "";
        public const string RmiName_CG_RequestFriendlyMatchExitOK = "";
        public const string RmiName_GC_NotifyFriendlyMatchInvite = "";
        public const string RmiName_CG_RequestFriendlyMatchSetInviteOptionOK = "";
        public const string RmiName_CG_RequestEventMissionGetAchievePointRewardOK = "";
        public const string RmiName_CG_RequestEventMissionCompleteRewardOK = "";
        public const string RmiName_CG_RequestEventMissionInfoOk = "";
        public const string RmiName_CG_RequestLobbyHousingShopInfoOK = "";
        public const string RmiName_CG_RequestLobbyHousingShopBuyOK = "";
        public const string RmiName_CG_RequestLobbyFurnitureRegistOK = "";
        public const string RmiName_CG_RequestUserMusicEditOK = "";
        public const string RmiName_CG_RequestEventSeasonPassInfoOK = "";
        public const string RmiName_CG_RequestEventSeasonPassRankUpRewardOK = "";
        public const string RmiName_CG_RequestEventSeasonPassRankUpRewardAllOK = "";
        public const string RmiName_CG_RequestEventSeasonPassRankBuyOK = "";
        public const string RmiName_CG_RequestStepupGambleShopBuyOK = "";
        public const string RmiName_CG_RequestStepupGambleMileageRewardOK = "";
        public const string RmiName_CG_RequestWestSideServerInfo_RandomOK = "";
        public const string RmiName_CG_RequestWestSideServerInfo_FixedOK = "";
        public const string RmiName_CG_RequestWestSideServerInfo_RecommandOK = "";
        public const string RmiName_CG_RequestWestSide_PlayerInfoOK = "";
        public const string RmiName_CG_RequestWestSide_PlayerteamInfoOK = "";
        public const string RmiName_CG_RequestWestSide_PlayerGuildInfoOK = "";
        public const string RmiName_CG_RequestWorldChattingChannelOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLobbyInfoOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpJoinOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpTopRankerListOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLastRankerListOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpMatchingOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpBattleStartOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpBattleEndOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpRollbackOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpIngameBattleStartOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLowerLobbyInfoOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLowerJoinOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLowerTopRankerListOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLowerMatchingOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLowerBattleStartOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLowerBattleEndOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpAllInfoOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLastRankerBattleInfoOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLastRankerBattleStartOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLowerRollbackOK = "";
        public const string RmiName_CG_RequestArenaRealTimePvpLowerIngameBattleStartOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionLobbyInfoOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionJoinOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionTopRankerListOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionMatchingOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionBattleStartOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionBattleEndOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionIngameBattleStartOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionHistoryOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionChangeMatchingListOK = "";
        public const string RmiName_CG_RequestArenaRealTimeDecisionMatchingSimpleInfoOK = "";
        public const string RmiName_CG_RequestPvpSeasonInfoOK = "";
        public const string RmiName_CG_RequestPvpSeasonHistoryOK = "";
        public const string RmiName_CG_RequestEventExchangeInfoOK = "";
        public const string RmiName_CG_RequestEventExchangeBoxGachaInfoOK = "";
        public const string RmiName_CG_RequestEventExchangeBoxGachaPickupOK = "";
        public const string RmiName_CG_RequestEventExchangeBoxGachaResetOK = "";
        public const string RmiName_CG_RequestEventPaybackRewardOK = "";
        public const string RmiName_CG_RequestBossWarCreateOK = "";
        public const string RmiName_CG_RequestBossWarJoinOK = "";
        public const string RmiName_CG_RequestBossWarStartOK = "";
        public const string RmiName_CG_RequestBossWarBattleStartOK = "";
        public const string RmiName_CG_RequestBossWarBattleEndOK = "";
        public const string RmiName_CG_RequestBossWarOnlineFriendListOK = "";
        public const string RmiName_CG_RequestBossWarOnlineGuildMemberListOK = "";
        public const string RmiName_CG_RequestBossWarOnlineUserRankRangeListOK = "";
        public const string RmiName_CG_RequestBossWarInvitationReceiveListOK = "";
        public const string RmiName_CG_RequestBossWarRemoveInvitationOK = "";
        public const string RmiName_CG_RequestBossWarInviteOK = "";
        public const string RmiName_CG_RequestBossWarKickOutOK = "";
        public const string RmiName_CG_RequestBossWarRewardOK = "";
        public const string RmiName_CG_RequestBossWarReadyOK = "";
        public const string RmiName_CG_RequestBossWarReturnReadyOK = "";
        public const string RmiName_CG_RequestBossWarSyncOK = "";
        public const string RmiName_CG_RequestBossWarBattleSyncOK = "";
        public const string RmiName_CG_RequestBossWarLeaveOK = "";
        public const string RmiName_GC_NotifyBossWarInvite = "";
        public const string RmiName_GC_NotifyBossWarMemberJoinUpdate = "";
        public const string RmiName_GC_NotifyBossWarGameStart = "";
        public const string RmiName_GC_NotifyBossWarWaitReadyStartOK = "";
        public const string RmiName_GC_NotifyBossWarRewardAggregationOK = "";
        public const string RmiName_CG_RequestEventSnsShareProgressOK = "";
        public const string RmiName_CG_RequestEventSnsShareRewardOK = "";
        public const string RmiName_CG_RequestGagueEventInfoOK = "";
        public const string RmiName_CG_RequestGagueEventChargeOK = "";
        public const string RmiName_CG_RequestGagueEventRewardOK = "";
        public const string RmiName_CG_RequestGagueEventResetOK = "";
        public const string RmiName_CG_RequestEventLadderRewardOK = "";
        public const string RmiName_CG_RequestEventLobbyGiftRewardOK = "";
        public const string RmiName_CG_RequestEventTimeMissionInfoOK = "";
        public const string RmiName_CG_RequestEventTimeMissionStartOK = "";
        public const string RmiName_CG_RequestEventLobbyDecorationRewardOK = "";
        public const string RmiName_CG_RequestRegistPlayTitleOK = "";
        public const string RmiName_CG_RequestPlayTitleMissionRewardOK = "";
        public const string RmiName_CG_RequestTournamentListOK = "";
        public const string RmiName_CG_RequestTournamentProgressInfoOK = "";
        public const string RmiName_CG_RequestTournamentResultInfoOK = "";
        public const string RmiName_CG_RequestTournamentMatchJoinOK = "";
        public const string RmiName_CG_RequestTournamentMatchBattleStartOK = "";
        public const string RmiName_CG_RequestTournamentMatchBattleEndOK = "";
        public const string RmiName_CG_RequestTournamentMatchExitOK = "";
        public const string RmiName_GC_NotifyTournamentProgressChange = "";
        public const string RmiName_CG_RequestTournamentRewardOK = "";
        public const string RmiName_GC_NotifyTournamentMatchSuspend = "";
        public const string RmiName_CG_RequestTournamentPlayerTeamSlotChangeOK = "";
        public const string RmiName_CG_RequestTournamentPlayerTeamInfoOK = "";
        public const string RmiName_CG_RequestTournamentCheerOK = "";
        public const string RmiName_CG_RequestTournamentCheerListOK = "";
        public const string RmiName_CG_RequestTournamentWatcherJoinOK = "";
        public const string RmiName_CG_RequestTournamentWatcherExitOK = "";
        public const string RmiName_CG_RequestTournamentMatchPlayInfoOK = "";
        public const string RmiName_CG_RequestTournamentReplayInfoOK = "";
        public const string RmiName_CG_RequestGuildWarLobbyInfoOK = "";
        public const string RmiName_CG_RequestGuildWarRankInfoOK = "";
        public const string RmiName_CG_RequestGuildWarVersusRecordInfoOK = "";
        public const string RmiName_CG_RequestGuildWarGuildMemberListOK = "";
        public const string RmiName_CG_RequestGuildWarWorldMapInfoOK = "";
        public const string RmiName_CG_RequestGuildWarAttackSquadChangeOK = "";
        public const string RmiName_CG_RequestGuildWarDefenceTeamChangeOK = "";
        public const string RmiName_CG_RequestGuildWarRegionBonusScoreChangeOK = "";
        public const string RmiName_CG_RequestGuildWarAreaGuildMemberChangeOK = "";
        public const string RmiName_CG_RequestGuildWarBattleRecordInfoOK = "";
        public const string RmiName_CG_Request_GuildWar_Stage_StartOK = "";
        public const string RmiName_CG_Request_GuildWar_Stage_ClearOK = "";
        public const string RmiName_CG_Request_GuildWar_Stage_RejoinOK = "";
        public const string RmiName_CG_Request_GuildWar_Stage_HeroStatus_SyncOK = "";

        public const string RmiName_First = "";
#endif
        public override Nettention.Proud.RmiID[] GetRmiIDList { get { return Common.RmiIDList; } }

    }
}

